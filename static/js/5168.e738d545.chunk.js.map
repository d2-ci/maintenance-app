{"version":3,"file":"static/js/5168.e738d545.chunk.js","mappings":"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","sources":["../../../node_modules/@dhis2-ui/css/build/es/css-variables/css-variables.js","../../../node_modules/@dhis2-ui/notice-box/build/es/notice-box-icon.js","../../../node_modules/@dhis2-ui/notice-box/build/es/notice-box-message.js","../../../node_modules/@dhis2-ui/notice-box/build/es/notice-box-title.js","../../../node_modules/@dhis2-ui/notice-box/build/es/notice-box.js","../../../node_modules/@dhis2/ui-icons/build/es/react/ChevronDown16.js","../../../node_modules/@remix-run/router/history.ts","../../../node_modules/@remix-run/router/utils.ts","../../../node_modules/@remix-run/router/router.ts","../../../node_modules/react-router-dom/index.tsx","../../../node_modules/react-router-dom/dom.ts","../../../node_modules/react-router/lib/use-sync-external-store-shim/useSyncExternalStoreShimClient.ts","../../../node_modules/react-router/lib/use-sync-external-store-shim/index.ts","../../../node_modules/react-router/lib/use-sync-external-store-shim/useSyncExternalStoreShimServer.ts","../../../node_modules/react-router/lib/context.ts","../../../node_modules/react-router/lib/hooks.tsx","../../../node_modules/react-router/lib/components.tsx"],"sourcesContent":["import _JSXStyle from \"styled-jsx/style\";\nimport * as theme from '@dhis2/ui-constants';\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nconst toPrefixedThemeSection = themeSectionKey => Object.entries(theme[themeSectionKey]).reduce((prefixed, _ref) => {\n  let [key, value] = _ref;\n  prefixed[\"\".concat(themeSectionKey, \"-\").concat(key)] = value;\n  return prefixed;\n}, {});\n\nconst toCustomPropertyString = themeSection => Object.entries(themeSection).map(_ref2 => {\n  let [key, value] = _ref2;\n  return \"--\".concat(key, \": \").concat(value, \";\");\n}).join('\\n');\n\nconst CssVariables = _ref3 => {\n  let {\n    colors,\n    theme,\n    layers,\n    spacers,\n    elevations\n  } = _ref3;\n  const allowedProps = {\n    colors,\n    theme,\n    layers,\n    spacers,\n    elevations\n  };\n  const variables = Object.keys(allowedProps) // Filter all props that are false\n  .filter(prop => allowedProps[prop]) // Map props to corresponding theme section and prefixes keys with section name\n  .map(toPrefixedThemeSection) // Map each section to a single string of css custom property declarations\n  .map(toCustomPropertyString) // Join all the sections to a single string\n  .join('\\n');\n  return /*#__PURE__*/React.createElement(_JSXStyle, {\n    id: \"3443925957\",\n    dynamic: [variables]\n  }, [\"html{\".concat(variables, \";}\")]);\n};\n\nCssVariables.defaultProps = {\n  colors: false,\n  theme: false,\n  layers: false,\n  spacers: false,\n  elevations: false\n};\nCssVariables.propTypes = {\n  colors: PropTypes.bool,\n  elevations: PropTypes.bool,\n  layers: PropTypes.bool,\n  spacers: PropTypes.bool,\n  theme: PropTypes.bool\n};\nexport { CssVariables };","import _JSXStyle from \"styled-jsx/style\";\nimport { mutuallyExclusive } from '@dhis2/prop-types';\nimport { colors, spacers } from '@dhis2/ui-constants';\nimport { IconErrorFilled24, IconWarningFilled24, IconInfoFilled24 } from '@dhis2/ui-icons';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nexport const NoticeBoxIcon = _ref => {\n  let {\n    warning,\n    error,\n    dataTest\n  } = _ref;\n  // Info is the default icon\n  let color = colors.blue900;\n  let Icon = IconInfoFilled24;\n\n  if (warning) {\n    color = colors.yellow700;\n    Icon = IconWarningFilled24;\n  }\n\n  if (error) {\n    color = colors.red700;\n    Icon = IconErrorFilled24;\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    \"data-test\": dataTest,\n    className: _JSXStyle.dynamic([[\"190287437\", [spacers.dp12]]])\n  }, /*#__PURE__*/React.createElement(Icon, {\n    color: color,\n    className: _JSXStyle.dynamic([[\"190287437\", [spacers.dp12]]])\n  }), /*#__PURE__*/React.createElement(_JSXStyle, {\n    id: \"190287437\",\n    dynamic: [spacers.dp12]\n  }, [\".__jsx-style-dynamic-selector{margin-right:\".concat(spacers.dp12, \";}\")]));\n};\nNoticeBoxIcon.propTypes = {\n  dataTest: PropTypes.string.isRequired,\n  error: mutuallyExclusive(['error', 'warning'], PropTypes.bool),\n  warning: mutuallyExclusive(['error', 'warning'], PropTypes.bool)\n};","import _JSXStyle from \"styled-jsx/style\";\nimport { colors } from '@dhis2/ui-constants';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nexport const NoticeBoxMessage = _ref => {\n  let {\n    children,\n    dataTest\n  } = _ref;\n\n  if (!children) {\n    return null;\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    \"data-test\": dataTest,\n    className: _JSXStyle.dynamic([[\"3452101222\", [colors.grey900]]])\n  }, children, /*#__PURE__*/React.createElement(_JSXStyle, {\n    id: \"3452101222\",\n    dynamic: [colors.grey900]\n  }, [\"div.__jsx-style-dynamic-selector{color:\".concat(colors.grey900, \";font-size:14px;line-height:20px;}\")]));\n};\nNoticeBoxMessage.propTypes = {\n  dataTest: PropTypes.string.isRequired,\n  children: PropTypes.node\n};","import _JSXStyle from \"styled-jsx/style\";\nimport { colors, spacers } from '@dhis2/ui-constants';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nexport const NoticeBoxTitle = _ref => {\n  let {\n    title,\n    dataTest\n  } = _ref;\n\n  if (!title) {\n    return null;\n  }\n\n  return /*#__PURE__*/React.createElement(\"h6\", {\n    \"data-test\": dataTest,\n    className: _JSXStyle.dynamic([[\"3611901971\", [colors.grey900, spacers.dp12]]])\n  }, title, /*#__PURE__*/React.createElement(_JSXStyle, {\n    id: \"3611901971\",\n    dynamic: [colors.grey900, spacers.dp12]\n  }, [\"h6.__jsx-style-dynamic-selector{color:\".concat(colors.grey900, \";font-size:14px;font-weight:500;line-height:20px;margin:0 0 \").concat(spacers.dp12, \" 0;}\")]));\n};\nNoticeBoxTitle.propTypes = {\n  dataTest: PropTypes.string.isRequired,\n  title: PropTypes.string\n};","import _JSXStyle from \"styled-jsx/style\";\nimport { mutuallyExclusive } from '@dhis2/prop-types';\nimport { spacers, colors } from '@dhis2/ui-constants';\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { NoticeBoxIcon } from './notice-box-icon.js';\nimport { NoticeBoxMessage } from './notice-box-message.js';\nimport { NoticeBoxTitle } from './notice-box-title.js';\nexport const NoticeBox = _ref => {\n  let {\n    className,\n    children,\n    dataTest,\n    title,\n    warning,\n    error\n  } = _ref;\n  const classnames = cx(className, 'root', {\n    warning,\n    error\n  });\n  return /*#__PURE__*/React.createElement(\"div\", {\n    \"data-test\": dataTest,\n    className: _JSXStyle.dynamic([[\"833500449\", [colors.blue050, colors.blue200, spacers.dp12, spacers.dp16, colors.yellow050, colors.yellow200, colors.red050, colors.red500]]]) + \" \" + (classnames || \"\")\n  }, /*#__PURE__*/React.createElement(NoticeBoxIcon, {\n    error: error,\n    warning: warning,\n    dataTest: \"\".concat(dataTest, \"-icon\")\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: _JSXStyle.dynamic([[\"833500449\", [colors.blue050, colors.blue200, spacers.dp12, spacers.dp16, colors.yellow050, colors.yellow200, colors.red050, colors.red500]]])\n  }, /*#__PURE__*/React.createElement(NoticeBoxTitle, {\n    title: title,\n    dataTest: \"\".concat(dataTest, \"-title\")\n  }), /*#__PURE__*/React.createElement(NoticeBoxMessage, {\n    dataTest: \"\".concat(dataTest, \"-message\")\n  }, children)), /*#__PURE__*/React.createElement(_JSXStyle, {\n    id: \"833500449\",\n    dynamic: [colors.blue050, colors.blue200, spacers.dp12, spacers.dp16, colors.yellow050, colors.yellow200, colors.red050, colors.red500]\n  }, [\".root.__jsx-style-dynamic-selector{background:\".concat(colors.blue050, \";border:1px solid \").concat(colors.blue200, \";border-radius:3px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;padding:\").concat(spacers.dp12, \" \").concat(spacers.dp16, \";}\"), \".root.warning.__jsx-style-dynamic-selector{background:\".concat(colors.yellow050, \";border:1px solid \").concat(colors.yellow200, \";}\"), \".root.error.__jsx-style-dynamic-selector{background:\".concat(colors.red050, \";border:2px solid \").concat(colors.red500, \";}\")]));\n};\nNoticeBox.defaultProps = {\n  dataTest: 'dhis2-uicore-noticebox'\n};\nNoticeBox.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  dataTest: PropTypes.string,\n\n  /** Applies 'error' message styles. Mutually exclusive with the `warning` prop */\n  error: mutuallyExclusive(['error', 'warning'], PropTypes.bool),\n  title: PropTypes.string,\n\n  /** Applies 'warning' message styles. Mutually exclusive with the `error` prop */\n  warning: mutuallyExclusive(['error', 'warning'], PropTypes.bool)\n};","import * as React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction SvgChevronDown16(_ref) {\n  let {\n    color\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", {\n    height: 16,\n    viewBox: \"0 0 16 16\",\n    width: 16,\n    xmlns: \"http://www.w3.org/2000/svg\",\n    color: color\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M4.146 6.146a.5.5 0 01.638-.057l.07.057L8 9.293l3.146-3.147a.5.5 0 01.638-.057l.07.057a.5.5 0 01.057.638l-.057.07-3.5 3.5a.5.5 0 01-.638.057l-.07-.057-3.5-3.5a.5.5 0 010-.708z\",\n    fill: \"currentColor\"\n  }));\n}\n\nSvgChevronDown16.propTypes = {\n  color: PropTypes.string\n};\nexport default SvgChevronDown16;","////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Actions represent the type of change to a location value.\n */\nexport enum Action {\n  /**\n   * A POP indicates a change to an arbitrary index in the history stack, such\n   * as a back or forward navigation. It does not describe the direction of the\n   * navigation, only that the current index changed.\n   *\n   * Note: This is the default action for newly created history objects.\n   */\n  Pop = \"POP\",\n\n  /**\n   * A PUSH indicates a new entry being added to the history stack, such as when\n   * a link is clicked and a new page loads. When this happens, all subsequent\n   * entries in the stack are lost.\n   */\n  Push = \"PUSH\",\n\n  /**\n   * A REPLACE indicates the entry at the current index in the history stack\n   * being replaced by a new one.\n   */\n  Replace = \"REPLACE\",\n}\n\n/**\n * The pathname, search, and hash values of a URL.\n */\nexport interface Path {\n  /**\n   * A URL pathname, beginning with a /.\n   */\n  pathname: string;\n\n  /**\n   * A URL search string, beginning with a ?.\n   */\n  search: string;\n\n  /**\n   * A URL fragment identifier, beginning with a #.\n   */\n  hash: string;\n}\n\n/**\n * An entry in a history stack. A location contains information about the\n * URL path, as well as possibly some arbitrary state and a key.\n */\nexport interface Location extends Path {\n  /**\n   * A value of arbitrary data associated with this location.\n   */\n  state: any;\n\n  /**\n   * A unique string associated with this location. May be used to safely store\n   * and retrieve data in some other storage API, like `localStorage`.\n   *\n   * Note: This value is always \"default\" on the initial location.\n   */\n  key: string;\n}\n\n/**\n * A change to the current location.\n */\nexport interface Update {\n  /**\n   * The action that triggered the change.\n   */\n  action: Action;\n\n  /**\n   * The new location.\n   */\n  location: Location;\n\n  /**\n   * The delta between this location and the former location in the history stack\n   */\n  delta: number | null;\n}\n\n/**\n * A function that receives notifications about location changes.\n */\nexport interface Listener {\n  (update: Update): void;\n}\n\n/**\n * Describes a location that is the destination of some navigation, either via\n * `history.push` or `history.replace`. May be either a URL or the pieces of a\n * URL path.\n */\nexport type To = string | Partial<Path>;\n\n/**\n * A history is an interface to the navigation stack. The history serves as the\n * source of truth for the current location, as well as provides a set of\n * methods that may be used to change it.\n *\n * It is similar to the DOM's `window.history` object, but with a smaller, more\n * focused API.\n */\nexport interface History {\n  /**\n   * The last action that modified the current location. This will always be\n   * Action.Pop when a history instance is first created. This value is mutable.\n   */\n  readonly action: Action;\n\n  /**\n   * The current location. This value is mutable.\n   */\n  readonly location: Location;\n\n  /**\n   * Returns a valid href for the given `to` value that may be used as\n   * the value of an <a href> attribute.\n   *\n   * @param to - The destination URL\n   */\n  createHref(to: To): string;\n\n  /**\n   * Returns a URL for the given `to` value\n   *\n   * @param to - The destination URL\n   */\n  createURL(to: To): URL;\n\n  /**\n   * Encode a location the same way window.history would do (no-op for memory\n   * history) so we ensure our PUSH/REPLACE navigations for data routers\n   * behave the same as POP\n   *\n   * @param to Unencoded path\n   */\n  encodeLocation(to: To): Path;\n\n  /**\n   * Pushes a new location onto the history stack, increasing its length by one.\n   * If there were any entries in the stack after the current one, they are\n   * lost.\n   *\n   * @param to - The new URL\n   * @param state - Data to associate with the new location\n   */\n  push(to: To, state?: any): void;\n\n  /**\n   * Replaces the current location in the history stack with a new one.  The\n   * location that was replaced will no longer be available.\n   *\n   * @param to - The new URL\n   * @param state - Data to associate with the new location\n   */\n  replace(to: To, state?: any): void;\n\n  /**\n   * Navigates `n` entries backward/forward in the history stack relative to the\n   * current index. For example, a \"back\" navigation would use go(-1).\n   *\n   * @param delta - The delta in the stack index\n   */\n  go(delta: number): void;\n\n  /**\n   * Sets up a listener that will be called whenever the current location\n   * changes.\n   *\n   * @param listener - A function that will be called when the location changes\n   * @returns unlisten - A function that may be used to stop listening\n   */\n  listen(listener: Listener): () => void;\n}\n\ntype HistoryState = {\n  usr: any;\n  key?: string;\n  idx: number;\n};\n\nconst PopStateEventType = \"popstate\";\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Memory History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A user-supplied object that describes a location. Used when providing\n * entries to `createMemoryHistory` via its `initialEntries` option.\n */\nexport type InitialEntry = string | Partial<Location>;\n\nexport type MemoryHistoryOptions = {\n  initialEntries?: InitialEntry[];\n  initialIndex?: number;\n  v5Compat?: boolean;\n};\n\n/**\n * A memory history stores locations in memory. This is useful in stateful\n * environments where there is no web browser, such as node tests or React\n * Native.\n */\nexport interface MemoryHistory extends History {\n  /**\n   * The current index in the history stack.\n   */\n  readonly index: number;\n}\n\n/**\n * Memory history stores the current location in memory. It is designed for use\n * in stateful non-browser environments like tests and React Native.\n */\nexport function createMemoryHistory(\n  options: MemoryHistoryOptions = {}\n): MemoryHistory {\n  let { initialEntries = [\"/\"], initialIndex, v5Compat = false } = options;\n  let entries: Location[]; // Declare so we can access from createMemoryLocation\n  entries = initialEntries.map((entry, index) =>\n    createMemoryLocation(\n      entry,\n      typeof entry === \"string\" ? null : entry.state,\n      index === 0 ? \"default\" : undefined\n    )\n  );\n  let index = clampIndex(\n    initialIndex == null ? entries.length - 1 : initialIndex\n  );\n  let action = Action.Pop;\n  let listener: Listener | null = null;\n\n  function clampIndex(n: number): number {\n    return Math.min(Math.max(n, 0), entries.length - 1);\n  }\n  function getCurrentLocation(): Location {\n    return entries[index];\n  }\n  function createMemoryLocation(\n    to: To,\n    state: any = null,\n    key?: string\n  ): Location {\n    let location = createLocation(\n      entries ? getCurrentLocation().pathname : \"/\",\n      to,\n      state,\n      key\n    );\n    warning(\n      location.pathname.charAt(0) === \"/\",\n      `relative pathnames are not supported in memory history: ${JSON.stringify(\n        to\n      )}`\n    );\n    return location;\n  }\n\n  function createHref(to: To) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  let history: MemoryHistory = {\n    get index() {\n      return index;\n    },\n    get action() {\n      return action;\n    },\n    get location() {\n      return getCurrentLocation();\n    },\n    createHref,\n    createURL(to) {\n      return new URL(createHref(to), \"http://localhost\");\n    },\n    encodeLocation(to: To) {\n      let path = typeof to === \"string\" ? parsePath(to) : to;\n      return {\n        pathname: path.pathname || \"\",\n        search: path.search || \"\",\n        hash: path.hash || \"\",\n      };\n    },\n    push(to, state) {\n      action = Action.Push;\n      let nextLocation = createMemoryLocation(to, state);\n      index += 1;\n      entries.splice(index, entries.length, nextLocation);\n      if (v5Compat && listener) {\n        listener({ action, location: nextLocation, delta: 1 });\n      }\n    },\n    replace(to, state) {\n      action = Action.Replace;\n      let nextLocation = createMemoryLocation(to, state);\n      entries[index] = nextLocation;\n      if (v5Compat && listener) {\n        listener({ action, location: nextLocation, delta: 0 });\n      }\n    },\n    go(delta) {\n      action = Action.Pop;\n      let nextIndex = clampIndex(index + delta);\n      let nextLocation = entries[nextIndex];\n      index = nextIndex;\n      if (listener) {\n        listener({ action, location: nextLocation, delta });\n      }\n    },\n    listen(fn: Listener) {\n      listener = fn;\n      return () => {\n        listener = null;\n      };\n    },\n  };\n\n  return history;\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Browser History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A browser history stores the current location in regular URLs in a web\n * browser environment. This is the standard for most web apps and provides the\n * cleanest URLs the browser's address bar.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#browserhistory\n */\nexport interface BrowserHistory extends UrlHistory {}\n\nexport type BrowserHistoryOptions = UrlHistoryOptions;\n\n/**\n * Browser history stores the location in regular URLs. This is the standard for\n * most web apps, but it requires some configuration on the server to ensure you\n * serve the same app at multiple URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory\n */\nexport function createBrowserHistory(\n  options: BrowserHistoryOptions = {}\n): BrowserHistory {\n  function createBrowserLocation(\n    window: Window,\n    globalHistory: Window[\"history\"]\n  ) {\n    let { pathname, search, hash } = window.location;\n    return createLocation(\n      \"\",\n      { pathname, search, hash },\n      // state defaults to `null` because `window.history.state` does\n      (globalHistory.state && globalHistory.state.usr) || null,\n      (globalHistory.state && globalHistory.state.key) || \"default\"\n    );\n  }\n\n  function createBrowserHref(window: Window, to: To) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  return getUrlBasedHistory(\n    createBrowserLocation,\n    createBrowserHref,\n    null,\n    options\n  );\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Hash History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A hash history stores the current location in the fragment identifier portion\n * of the URL in a web browser environment.\n *\n * This is ideal for apps that do not control the server for some reason\n * (because the fragment identifier is never sent to the server), including some\n * shared hosting environments that do not provide fine-grained controls over\n * which pages are served at which URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#hashhistory\n */\nexport interface HashHistory extends UrlHistory {}\n\nexport type HashHistoryOptions = UrlHistoryOptions;\n\n/**\n * Hash history stores the location in window.location.hash. This makes it ideal\n * for situations where you don't want to send the location to the server for\n * some reason, either because you do cannot configure it or the URL space is\n * reserved for something else.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createhashhistory\n */\nexport function createHashHistory(\n  options: HashHistoryOptions = {}\n): HashHistory {\n  function createHashLocation(\n    window: Window,\n    globalHistory: Window[\"history\"]\n  ) {\n    let {\n      pathname = \"/\",\n      search = \"\",\n      hash = \"\",\n    } = parsePath(window.location.hash.substr(1));\n    return createLocation(\n      \"\",\n      { pathname, search, hash },\n      // state defaults to `null` because `window.history.state` does\n      (globalHistory.state && globalHistory.state.usr) || null,\n      (globalHistory.state && globalHistory.state.key) || \"default\"\n    );\n  }\n\n  function createHashHref(window: Window, to: To) {\n    let base = window.document.querySelector(\"base\");\n    let href = \"\";\n\n    if (base && base.getAttribute(\"href\")) {\n      let url = window.location.href;\n      let hashIndex = url.indexOf(\"#\");\n      href = hashIndex === -1 ? url : url.slice(0, hashIndex);\n    }\n\n    return href + \"#\" + (typeof to === \"string\" ? to : createPath(to));\n  }\n\n  function validateHashLocation(location: Location, to: To) {\n    warning(\n      location.pathname.charAt(0) === \"/\",\n      `relative pathnames are not supported in hash history.push(${JSON.stringify(\n        to\n      )})`\n    );\n  }\n\n  return getUrlBasedHistory(\n    createHashLocation,\n    createHashHref,\n    validateHashLocation,\n    options\n  );\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region UTILS\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * @private\n */\nexport function invariant(value: boolean, message?: string): asserts value;\nexport function invariant<T>(\n  value: T | null | undefined,\n  message?: string\n): asserts value is T;\nexport function invariant(value: any, message?: string) {\n  if (value === false || value === null || typeof value === \"undefined\") {\n    throw new Error(message);\n  }\n}\n\nfunction warning(cond: any, message: string) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging history!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\nfunction createKey() {\n  return Math.random().toString(36).substr(2, 8);\n}\n\n/**\n * For browser-based histories, we combine the state and key into an object\n */\nfunction getHistoryState(location: Location, index: number): HistoryState {\n  return {\n    usr: location.state,\n    key: location.key,\n    idx: index,\n  };\n}\n\n/**\n * Creates a Location object with a unique key from the given Path\n */\nexport function createLocation(\n  current: string | Location,\n  to: To,\n  state: any = null,\n  key?: string\n): Readonly<Location> {\n  let location: Readonly<Location> = {\n    pathname: typeof current === \"string\" ? current : current.pathname,\n    search: \"\",\n    hash: \"\",\n    ...(typeof to === \"string\" ? parsePath(to) : to),\n    state,\n    // TODO: This could be cleaned up.  push/replace should probably just take\n    // full Locations now and avoid the need to run through this flow at all\n    // But that's a pretty big refactor to the current test suite so going to\n    // keep as is for the time being and just let any incoming keys take precedence\n    key: (to && (to as Location).key) || key || createKey(),\n  };\n  return location;\n}\n\n/**\n * Creates a string URL path from the given pathname, search, and hash components.\n */\nexport function createPath({\n  pathname = \"/\",\n  search = \"\",\n  hash = \"\",\n}: Partial<Path>) {\n  if (search && search !== \"?\")\n    pathname += search.charAt(0) === \"?\" ? search : \"?\" + search;\n  if (hash && hash !== \"#\")\n    pathname += hash.charAt(0) === \"#\" ? hash : \"#\" + hash;\n  return pathname;\n}\n\n/**\n * Parses a string URL path into its separate pathname, search, and hash components.\n */\nexport function parsePath(path: string): Partial<Path> {\n  let parsedPath: Partial<Path> = {};\n\n  if (path) {\n    let hashIndex = path.indexOf(\"#\");\n    if (hashIndex >= 0) {\n      parsedPath.hash = path.substr(hashIndex);\n      path = path.substr(0, hashIndex);\n    }\n\n    let searchIndex = path.indexOf(\"?\");\n    if (searchIndex >= 0) {\n      parsedPath.search = path.substr(searchIndex);\n      path = path.substr(0, searchIndex);\n    }\n\n    if (path) {\n      parsedPath.pathname = path;\n    }\n  }\n\n  return parsedPath;\n}\n\nexport interface UrlHistory extends History {}\n\nexport type UrlHistoryOptions = {\n  window?: Window;\n  v5Compat?: boolean;\n};\n\nfunction getUrlBasedHistory(\n  getLocation: (window: Window, globalHistory: Window[\"history\"]) => Location,\n  createHref: (window: Window, to: To) => string,\n  validateLocation: ((location: Location, to: To) => void) | null,\n  options: UrlHistoryOptions = {}\n): UrlHistory {\n  let { window = document.defaultView!, v5Compat = false } = options;\n  let globalHistory = window.history;\n  let action = Action.Pop;\n  let listener: Listener | null = null;\n\n  let index = getIndex()!;\n  // Index should only be null when we initialize. If not, it's because the\n  // user called history.pushState or history.replaceState directly, in which\n  // case we should log a warning as it will result in bugs.\n  if (index == null) {\n    index = 0;\n    globalHistory.replaceState({ ...globalHistory.state, idx: index }, \"\");\n  }\n\n  function getIndex(): number {\n    let state = globalHistory.state || { idx: null };\n    return state.idx;\n  }\n\n  function handlePop() {\n    action = Action.Pop;\n    let nextIndex = getIndex();\n    let delta = nextIndex == null ? null : nextIndex - index;\n    index = nextIndex;\n    if (listener) {\n      listener({ action, location: history.location, delta });\n    }\n  }\n\n  function push(to: To, state?: any) {\n    action = Action.Push;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n\n    index = getIndex() + 1;\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n\n    // try...catch because iOS limits us to 100 pushState calls :/\n    try {\n      globalHistory.pushState(historyState, \"\", url);\n    } catch (error) {\n      // They are going to lose state here, but there is no real\n      // way to warn them about it since the page will refresh...\n      window.location.assign(url);\n    }\n\n    if (v5Compat && listener) {\n      listener({ action, location: history.location, delta: 1 });\n    }\n  }\n\n  function replace(to: To, state?: any) {\n    action = Action.Replace;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n\n    index = getIndex();\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n    globalHistory.replaceState(historyState, \"\", url);\n\n    if (v5Compat && listener) {\n      listener({ action, location: history.location, delta: 0 });\n    }\n  }\n\n  function createURL(to: To): URL {\n    // window.location.origin is \"null\" (the literal string value) in Firefox\n    // under certain conditions, notably when serving from a local HTML file\n    // See https://bugzilla.mozilla.org/show_bug.cgi?id=878297\n    let base =\n      window.location.origin !== \"null\"\n        ? window.location.origin\n        : window.location.href;\n\n    let href = typeof to === \"string\" ? to : createPath(to);\n    invariant(\n      base,\n      `No window.location.(origin|href) available to create URL for href: ${href}`\n    );\n    return new URL(href, base);\n  }\n\n  let history: History = {\n    get action() {\n      return action;\n    },\n    get location() {\n      return getLocation(window, globalHistory);\n    },\n    listen(fn: Listener) {\n      if (listener) {\n        throw new Error(\"A history only accepts one active listener\");\n      }\n      window.addEventListener(PopStateEventType, handlePop);\n      listener = fn;\n\n      return () => {\n        window.removeEventListener(PopStateEventType, handlePop);\n        listener = null;\n      };\n    },\n    createHref(to) {\n      return createHref(window, to);\n    },\n    createURL,\n    encodeLocation(to) {\n      // Encode a Location the same way window.location would\n      let url = createURL(to);\n      return {\n        pathname: url.pathname,\n        search: url.search,\n        hash: url.hash,\n      };\n    },\n    push,\n    replace,\n    go(n) {\n      return globalHistory.go(n);\n    },\n  };\n\n  return history;\n}\n\n//#endregion\n","import type { Location, Path, To } from \"./history\";\nimport { invariant, parsePath } from \"./history\";\n\n/**\n * Map of routeId -> data returned from a loader/action/error\n */\nexport interface RouteData {\n  [routeId: string]: any;\n}\n\nexport enum ResultType {\n  data = \"data\",\n  deferred = \"deferred\",\n  redirect = \"redirect\",\n  error = \"error\",\n}\n\n/**\n * Successful result from a loader or action\n */\nexport interface SuccessResult {\n  type: ResultType.data;\n  data: any;\n  statusCode?: number;\n  headers?: Headers;\n}\n\n/**\n * Successful defer() result from a loader or action\n */\nexport interface DeferredResult {\n  type: ResultType.deferred;\n  deferredData: DeferredData;\n  statusCode?: number;\n  headers?: Headers;\n}\n\n/**\n * Redirect result from a loader or action\n */\nexport interface RedirectResult {\n  type: ResultType.redirect;\n  status: number;\n  location: string;\n  revalidate: boolean;\n}\n\n/**\n * Unsuccessful result from a loader or action\n */\nexport interface ErrorResult {\n  type: ResultType.error;\n  error: any;\n  headers?: Headers;\n}\n\n/**\n * Result from a loader or action - potentially successful or unsuccessful\n */\nexport type DataResult =\n  | SuccessResult\n  | DeferredResult\n  | RedirectResult\n  | ErrorResult;\n\nexport type MutationFormMethod = \"post\" | \"put\" | \"patch\" | \"delete\";\nexport type FormMethod = \"get\" | MutationFormMethod;\n\nexport type FormEncType =\n  | \"application/x-www-form-urlencoded\"\n  | \"multipart/form-data\";\n\n/**\n * @private\n * Internal interface to pass around for action submissions, not intended for\n * external consumption\n */\nexport interface Submission {\n  formMethod: FormMethod;\n  formAction: string;\n  formEncType: FormEncType;\n  formData: FormData;\n}\n\n/**\n * @private\n * Arguments passed to route loader/action functions.  Same for now but we keep\n * this as a private implementation detail in case they diverge in the future.\n */\ninterface DataFunctionArgs {\n  request: Request;\n  params: Params;\n  context?: any;\n}\n\n/**\n * Arguments passed to loader functions\n */\nexport interface LoaderFunctionArgs extends DataFunctionArgs {}\n\n/**\n * Arguments passed to action functions\n */\nexport interface ActionFunctionArgs extends DataFunctionArgs {}\n\n/**\n * Route loader function signature\n */\nexport interface LoaderFunction {\n  (args: LoaderFunctionArgs): Promise<Response> | Response | Promise<any> | any;\n}\n\n/**\n * Route action function signature\n */\nexport interface ActionFunction {\n  (args: ActionFunctionArgs): Promise<Response> | Response | Promise<any> | any;\n}\n\n/**\n * Route shouldRevalidate function signature.  This runs after any submission\n * (navigation or fetcher), so we flatten the navigation/fetcher submission\n * onto the arguments.  It shouldn't matter whether it came from a navigation\n * or a fetcher, what really matters is the URLs and the formData since loaders\n * have to re-run based on the data models that were potentially mutated.\n */\nexport interface ShouldRevalidateFunction {\n  (args: {\n    currentUrl: URL;\n    currentParams: AgnosticDataRouteMatch[\"params\"];\n    nextUrl: URL;\n    nextParams: AgnosticDataRouteMatch[\"params\"];\n    formMethod?: Submission[\"formMethod\"];\n    formAction?: Submission[\"formAction\"];\n    formEncType?: Submission[\"formEncType\"];\n    formData?: Submission[\"formData\"];\n    actionResult?: DataResult;\n    defaultShouldRevalidate: boolean;\n  }): boolean;\n}\n\n/**\n * Base RouteObject with common props shared by all types of routes\n */\ntype AgnosticBaseRouteObject = {\n  caseSensitive?: boolean;\n  path?: string;\n  id?: string;\n  loader?: LoaderFunction;\n  action?: ActionFunction;\n  hasErrorBoundary?: boolean;\n  shouldRevalidate?: ShouldRevalidateFunction;\n  handle?: any;\n};\n\n/**\n * Index routes must not have children\n */\nexport type AgnosticIndexRouteObject = AgnosticBaseRouteObject & {\n  children?: undefined;\n  index: true;\n};\n\n/**\n * Non-index routes may have children, but cannot have index\n */\nexport type AgnosticNonIndexRouteObject = AgnosticBaseRouteObject & {\n  children?: AgnosticRouteObject[];\n  index?: false;\n};\n\n/**\n * A route object represents a logical route, with (optionally) its child\n * routes organized in a tree-like structure.\n */\nexport type AgnosticRouteObject =\n  | AgnosticIndexRouteObject\n  | AgnosticNonIndexRouteObject;\n\nexport type AgnosticDataIndexRouteObject = AgnosticIndexRouteObject & {\n  id: string;\n};\n\nexport type AgnosticDataNonIndexRouteObject = AgnosticNonIndexRouteObject & {\n  children?: AgnosticDataRouteObject[];\n  id: string;\n};\n\n/**\n * A data route object, which is just a RouteObject with a required unique ID\n */\nexport type AgnosticDataRouteObject =\n  | AgnosticDataIndexRouteObject\n  | AgnosticDataNonIndexRouteObject;\n\n// Recursive helper for finding path parameters in the absence of wildcards\ntype _PathParam<Path extends string> =\n  // split path into individual path segments\n  Path extends `${infer L}/${infer R}`\n    ? _PathParam<L> | _PathParam<R>\n    : // find params after `:`\n    Path extends `:${infer Param}`\n    ? Param extends `${infer Optional}?`\n      ? Optional\n      : Param\n    : // otherwise, there aren't any params present\n      never;\n\n/**\n * Examples:\n * \"/a/b/*\" -> \"*\"\n * \":a\" -> \"a\"\n * \"/a/:b\" -> \"b\"\n * \"/a/blahblahblah:b\" -> \"b\"\n * \"/:a/:b\" -> \"a\" | \"b\"\n * \"/:a/b/:c/*\" -> \"a\" | \"c\" | \"*\"\n */\ntype PathParam<Path extends string> =\n  // check if path is just a wildcard\n  Path extends \"*\"\n    ? \"*\"\n    : // look for wildcard at the end of the path\n    Path extends `${infer Rest}/*`\n    ? \"*\" | _PathParam<Rest>\n    : // look for params in the absence of wildcards\n      _PathParam<Path>;\n\n// Attempt to parse the given string segment. If it fails, then just return the\n// plain string type as a default fallback. Otherwise return the union of the\n// parsed string literals that were referenced as dynamic segments in the route.\nexport type ParamParseKey<Segment extends string> =\n  // if could not find path params, fallback to `string`\n  [PathParam<Segment>] extends [never] ? string : PathParam<Segment>;\n\n/**\n * The parameters that were parsed from the URL path.\n */\nexport type Params<Key extends string = string> = {\n  readonly [key in Key]: string | undefined;\n};\n\n/**\n * A RouteMatch contains info about how a route matched a URL.\n */\nexport interface AgnosticRouteMatch<\n  ParamKey extends string = string,\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The route object that was used to match.\n   */\n  route: RouteObjectType;\n}\n\nexport interface AgnosticDataRouteMatch\n  extends AgnosticRouteMatch<string, AgnosticDataRouteObject> {}\n\nfunction isIndexRoute(\n  route: AgnosticRouteObject\n): route is AgnosticIndexRouteObject {\n  return route.index === true;\n}\n\n// Walk the route tree generating unique IDs where necessary so we are working\n// solely with AgnosticDataRouteObject's within the Router\nexport function convertRoutesToDataRoutes(\n  routes: AgnosticRouteObject[],\n  parentPath: number[] = [],\n  allIds: Set<string> = new Set<string>()\n): AgnosticDataRouteObject[] {\n  return routes.map((route, index) => {\n    let treePath = [...parentPath, index];\n    let id = typeof route.id === \"string\" ? route.id : treePath.join(\"-\");\n    invariant(\n      route.index !== true || !route.children,\n      `Cannot specify children on an index route`\n    );\n    invariant(\n      !allIds.has(id),\n      `Found a route id collision on id \"${id}\".  Route ` +\n        \"id's must be globally unique within Data Router usages\"\n    );\n    allIds.add(id);\n\n    if (isIndexRoute(route)) {\n      let indexRoute: AgnosticDataIndexRouteObject = { ...route, id };\n      return indexRoute;\n    } else {\n      let pathOrLayoutRoute: AgnosticDataNonIndexRouteObject = {\n        ...route,\n        id,\n        children: route.children\n          ? convertRoutesToDataRoutes(route.children, treePath, allIds)\n          : undefined,\n      };\n      return pathOrLayoutRoute;\n    }\n  });\n}\n\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/utils/match-routes\n */\nexport function matchRoutes<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  routes: RouteObjectType[],\n  locationArg: Partial<Location> | string,\n  basename = \"/\"\n): AgnosticRouteMatch<string, RouteObjectType>[] | null {\n  let location =\n    typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n\n  let pathname = stripBasename(location.pathname || \"/\", basename);\n\n  if (pathname == null) {\n    return null;\n  }\n\n  let branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n\n  let matches = null;\n  for (let i = 0; matches == null && i < branches.length; ++i) {\n    matches = matchRouteBranch<string, RouteObjectType>(\n      branches[i],\n      // Incoming pathnames are generally encoded from either window.location\n      // or from router.navigate, but we want to match against the unencoded\n      // paths in the route definitions.  Memory router locations won't be\n      // encoded here but there also shouldn't be anything to decode so this\n      // should be a safe operation.  This avoids needing matchRoutes to be\n      // history-aware.\n      safelyDecodeURI(pathname)\n    );\n  }\n\n  return matches;\n}\n\ninterface RouteMeta<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  relativePath: string;\n  caseSensitive: boolean;\n  childrenIndex: number;\n  route: RouteObjectType;\n}\n\ninterface RouteBranch<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  path: string;\n  score: number;\n  routesMeta: RouteMeta<RouteObjectType>[];\n}\n\nfunction flattenRoutes<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  routes: RouteObjectType[],\n  branches: RouteBranch<RouteObjectType>[] = [],\n  parentsMeta: RouteMeta<RouteObjectType>[] = [],\n  parentPath = \"\"\n): RouteBranch<RouteObjectType>[] {\n  let flattenRoute = (\n    route: RouteObjectType,\n    index: number,\n    relativePath?: string\n  ) => {\n    let meta: RouteMeta<RouteObjectType> = {\n      relativePath:\n        relativePath === undefined ? route.path || \"\" : relativePath,\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index,\n      route,\n    };\n\n    if (meta.relativePath.startsWith(\"/\")) {\n      invariant(\n        meta.relativePath.startsWith(parentPath),\n        `Absolute route path \"${meta.relativePath}\" nested under path ` +\n          `\"${parentPath}\" is not valid. An absolute child route path ` +\n          `must start with the combined path of all its parent routes.`\n      );\n\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n\n    let path = joinPaths([parentPath, meta.relativePath]);\n    let routesMeta = parentsMeta.concat(meta);\n\n    // Add the children before adding this route to the array so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n    if (route.children && route.children.length > 0) {\n      invariant(\n        // Our types know better, but runtime JS may not!\n        // @ts-expect-error\n        route.index !== true,\n        `Index routes must not have child routes. Please remove ` +\n          `all child routes from route path \"${path}\".`\n      );\n\n      flattenRoutes(route.children, branches, routesMeta, path);\n    }\n\n    // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n    if (route.path == null && !route.index) {\n      return;\n    }\n\n    branches.push({\n      path,\n      score: computeScore(path, route.index),\n      routesMeta,\n    });\n  };\n  routes.forEach((route, index) => {\n    // coarse-grain check for optional params\n    if (route.path === \"\" || !route.path?.includes(\"?\")) {\n      flattenRoute(route, index);\n    } else {\n      for (let exploded of explodeOptionalSegments(route.path)) {\n        flattenRoute(route, index, exploded);\n      }\n    }\n  });\n\n  return branches;\n}\n\n/**\n * Computes all combinations of optional path segments for a given path,\n * excluding combinations that are ambiguous and of lower priority.\n *\n * For example, `/one/:two?/three/:four?/:five?` explodes to:\n * - `/one/three`\n * - `/one/:two/three`\n * - `/one/three/:four`\n * - `/one/three/:five`\n * - `/one/:two/three/:four`\n * - `/one/:two/three/:five`\n * - `/one/three/:four/:five`\n * - `/one/:two/three/:four/:five`\n */\nfunction explodeOptionalSegments(path: string): string[] {\n  let segments = path.split(\"/\");\n  if (segments.length === 0) return [];\n\n  let [first, ...rest] = segments;\n\n  // Optional path segments are denoted by a trailing `?`\n  let isOptional = first.endsWith(\"?\");\n  // Compute the corresponding required segment: `foo?` -> `foo`\n  let required = first.replace(/\\?$/, \"\");\n\n  if (rest.length === 0) {\n    // Intepret empty string as omitting an optional segment\n    // `[\"one\", \"\", \"three\"]` corresponds to omitting `:two` from `/one/:two?/three` -> `/one/three`\n    return isOptional ? [required, \"\"] : [required];\n  }\n\n  let restExploded = explodeOptionalSegments(rest.join(\"/\"));\n\n  let result: string[] = [];\n\n  // All child paths with the prefix.  Do this for all children before the\n  // optional version for all children so we get consistent ordering where the\n  // parent optional aspect is preferred as required.  Otherwise, we can get\n  // child sections interspersed where deeper optional segments are higher than\n  // parent optional segments, where for example, /:two would explodes _earlier_\n  // then /:one.  By always including the parent as required _for all children_\n  // first, we avoid this issue\n  result.push(\n    ...restExploded.map((subpath) =>\n      subpath === \"\" ? required : [required, subpath].join(\"/\")\n    )\n  );\n\n  // Then if this is an optional value, add all child versions without\n  if (isOptional) {\n    result.push(...restExploded);\n  }\n\n  // for absolute paths, ensure `/` instead of empty segment\n  return result.map((exploded) =>\n    path.startsWith(\"/\") && exploded === \"\" ? \"/\" : exploded\n  );\n}\n\nfunction rankRouteBranches(branches: RouteBranch[]): void {\n  branches.sort((a, b) =>\n    a.score !== b.score\n      ? b.score - a.score // Higher score first\n      : compareIndexes(\n          a.routesMeta.map((meta) => meta.childrenIndex),\n          b.routesMeta.map((meta) => meta.childrenIndex)\n        )\n  );\n}\n\nconst paramRe = /^:\\w+$/;\nconst dynamicSegmentValue = 3;\nconst indexRouteValue = 2;\nconst emptySegmentValue = 1;\nconst staticSegmentValue = 10;\nconst splatPenalty = -2;\nconst isSplat = (s: string) => s === \"*\";\n\nfunction computeScore(path: string, index: boolean | undefined): number {\n  let segments = path.split(\"/\");\n  let initialScore = segments.length;\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n\n  return segments\n    .filter((s) => !isSplat(s))\n    .reduce(\n      (score, segment) =>\n        score +\n        (paramRe.test(segment)\n          ? dynamicSegmentValue\n          : segment === \"\"\n          ? emptySegmentValue\n          : staticSegmentValue),\n      initialScore\n    );\n}\n\nfunction compareIndexes(a: number[], b: number[]): number {\n  let siblings =\n    a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);\n\n  return siblings\n    ? // If two routes are siblings, we should try to match the earlier sibling\n      // first. This allows people to have fine-grained control over the matching\n      // behavior by simply putting routes with identical paths in the order they\n      // want them tried.\n      a[a.length - 1] - b[b.length - 1]\n    : // Otherwise, it doesn't really make sense to rank non-siblings by index,\n      // so they sort equally.\n      0;\n}\n\nfunction matchRouteBranch<\n  ParamKey extends string = string,\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  branch: RouteBranch<RouteObjectType>,\n  pathname: string\n): AgnosticRouteMatch<ParamKey, RouteObjectType>[] | null {\n  let { routesMeta } = branch;\n\n  let matchedParams = {};\n  let matchedPathname = \"/\";\n  let matches: AgnosticRouteMatch<ParamKey, RouteObjectType>[] = [];\n  for (let i = 0; i < routesMeta.length; ++i) {\n    let meta = routesMeta[i];\n    let end = i === routesMeta.length - 1;\n    let remainingPathname =\n      matchedPathname === \"/\"\n        ? pathname\n        : pathname.slice(matchedPathname.length) || \"/\";\n    let match = matchPath(\n      { path: meta.relativePath, caseSensitive: meta.caseSensitive, end },\n      remainingPathname\n    );\n\n    if (!match) return null;\n\n    Object.assign(matchedParams, match.params);\n\n    let route = meta.route;\n\n    matches.push({\n      // TODO: Can this as be avoided?\n      params: matchedParams as Params<ParamKey>,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: normalizePathname(\n        joinPaths([matchedPathname, match.pathnameBase])\n      ),\n      route,\n    });\n\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n  }\n\n  return matches;\n}\n\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/utils/generate-path\n */\nexport function generatePath<Path extends string>(\n  originalPath: Path,\n  params: {\n    [key in PathParam<Path>]: string | null;\n  } = {} as any\n): string {\n  let path = originalPath;\n  if (path.endsWith(\"*\") && path !== \"*\" && !path.endsWith(\"/*\")) {\n    warning(\n      false,\n      `Route path \"${path}\" will be treated as if it were ` +\n        `\"${path.replace(/\\*$/, \"/*\")}\" because the \\`*\\` character must ` +\n        `always follow a \\`/\\` in the pattern. To get rid of this warning, ` +\n        `please change the route path to \"${path.replace(/\\*$/, \"/*\")}\".`\n    );\n    path = path.replace(/\\*$/, \"/*\") as Path;\n  }\n\n  return (\n    path\n      .replace(\n        /^:(\\w+)(\\??)/g,\n        (_, key: PathParam<Path>, optional: string | undefined) => {\n          let param = params[key];\n          if (optional === \"?\") {\n            return param == null ? \"\" : param;\n          }\n          if (param == null) {\n            invariant(false, `Missing \":${key}\" param`);\n          }\n          return param;\n        }\n      )\n      .replace(\n        /\\/:(\\w+)(\\??)/g,\n        (_, key: PathParam<Path>, optional: string | undefined) => {\n          let param = params[key];\n          if (optional === \"?\") {\n            return param == null ? \"\" : `/${param}`;\n          }\n          if (param == null) {\n            invariant(false, `Missing \":${key}\" param`);\n          }\n          return `/${param}`;\n        }\n      )\n      // Remove any optional markers from optional static segments\n      .replace(/\\?/g, \"\")\n      .replace(/(\\/?)\\*/, (_, prefix, __, str) => {\n        const star = \"*\" as PathParam<Path>;\n\n        if (params[star] == null) {\n          // If no splat was provided, trim the trailing slash _unless_ it's\n          // the entire path\n          return str === \"/*\" ? \"/\" : \"\";\n        }\n\n        // Apply the splat\n        return `${prefix}${params[star]}`;\n      })\n  );\n}\n\n/**\n * A PathPattern is used to match on some portion of a URL pathname.\n */\nexport interface PathPattern<Path extends string = string> {\n  /**\n   * A string to match against a URL pathname. May contain `:id`-style segments\n   * to indicate placeholders for dynamic parameters. May also end with `/*` to\n   * indicate matching the rest of the URL pathname.\n   */\n  path: Path;\n  /**\n   * Should be `true` if the static portions of the `path` should be matched in\n   * the same case.\n   */\n  caseSensitive?: boolean;\n  /**\n   * Should be `true` if this pattern should match the entire URL pathname.\n   */\n  end?: boolean;\n}\n\n/**\n * A PathMatch contains info about how a PathPattern matched on a URL pathname.\n */\nexport interface PathMatch<ParamKey extends string = string> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The pattern that was used to match.\n   */\n  pattern: PathPattern;\n}\n\ntype Mutable<T> = {\n  -readonly [P in keyof T]: T[P];\n};\n\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/utils/match-path\n */\nexport function matchPath<\n  ParamKey extends ParamParseKey<Path>,\n  Path extends string\n>(\n  pattern: PathPattern<Path> | Path,\n  pathname: string\n): PathMatch<ParamKey> | null {\n  if (typeof pattern === \"string\") {\n    pattern = { path: pattern, caseSensitive: false, end: true };\n  }\n\n  let [matcher, paramNames] = compilePath(\n    pattern.path,\n    pattern.caseSensitive,\n    pattern.end\n  );\n\n  let match = pathname.match(matcher);\n  if (!match) return null;\n\n  let matchedPathname = match[0];\n  let pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  let captureGroups = match.slice(1);\n  let params: Params = paramNames.reduce<Mutable<Params>>(\n    (memo, paramName, index) => {\n      // We need to compute the pathnameBase here using the raw splat value\n      // instead of using params[\"*\"] later because it will be decoded then\n      if (paramName === \"*\") {\n        let splatValue = captureGroups[index] || \"\";\n        pathnameBase = matchedPathname\n          .slice(0, matchedPathname.length - splatValue.length)\n          .replace(/(.)\\/+$/, \"$1\");\n      }\n\n      memo[paramName] = safelyDecodeURIComponent(\n        captureGroups[index] || \"\",\n        paramName\n      );\n      return memo;\n    },\n    {}\n  );\n\n  return {\n    params,\n    pathname: matchedPathname,\n    pathnameBase,\n    pattern,\n  };\n}\n\nfunction compilePath(\n  path: string,\n  caseSensitive = false,\n  end = true\n): [RegExp, string[]] {\n  warning(\n    path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"),\n    `Route path \"${path}\" will be treated as if it were ` +\n      `\"${path.replace(/\\*$/, \"/*\")}\" because the \\`*\\` character must ` +\n      `always follow a \\`/\\` in the pattern. To get rid of this warning, ` +\n      `please change the route path to \"${path.replace(/\\*$/, \"/*\")}\".`\n  );\n\n  let paramNames: string[] = [];\n  let regexpSource =\n    \"^\" +\n    path\n      .replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n      .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n      .replace(/[\\\\.*+^$?{}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n      .replace(/\\/:(\\w+)/g, (_: string, paramName: string) => {\n        paramNames.push(paramName);\n        return \"/([^\\\\/]+)\";\n      });\n\n  if (path.endsWith(\"*\")) {\n    paramNames.push(\"*\");\n    regexpSource +=\n      path === \"*\" || path === \"/*\"\n        ? \"(.*)$\" // Already matched the initial /, just match the rest\n        : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else if (end) {\n    // When matching to the end, ignore trailing slashes\n    regexpSource += \"\\\\/*$\";\n  } else if (path !== \"\" && path !== \"/\") {\n    // If our path is non-empty and contains anything beyond an initial slash,\n    // then we have _some_ form of path in our regex so we should expect to\n    // match only if we find the end of this path segment.  Look for an optional\n    // non-captured trailing slash (to match a portion of the URL) or the end\n    // of the path (if we've matched to the end).  We used to do this with a\n    // word boundary but that gives false positives on routes like\n    // /user-preferences since `-` counts as a word boundary.\n    regexpSource += \"(?:(?=\\\\/|$))\";\n  } else {\n    // Nothing to match for \"\" or \"/\"\n  }\n\n  let matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n\n  return [matcher, paramNames];\n}\n\nfunction safelyDecodeURI(value: string) {\n  try {\n    return decodeURI(value);\n  } catch (error) {\n    warning(\n      false,\n      `The URL path \"${value}\" could not be decoded because it is is a ` +\n        `malformed URL segment. This is probably due to a bad percent ` +\n        `encoding (${error}).`\n    );\n\n    return value;\n  }\n}\n\nfunction safelyDecodeURIComponent(value: string, paramName: string) {\n  try {\n    return decodeURIComponent(value);\n  } catch (error) {\n    warning(\n      false,\n      `The value for the URL param \"${paramName}\" will not be decoded because` +\n        ` the string \"${value}\" is a malformed URL segment. This is probably` +\n        ` due to a bad percent encoding (${error}).`\n    );\n\n    return value;\n  }\n}\n\n/**\n * @private\n */\nexport function stripBasename(\n  pathname: string,\n  basename: string\n): string | null {\n  if (basename === \"/\") return pathname;\n\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  }\n\n  // We want to leave trailing slash behavior in the user's control, so if they\n  // specify a basename with a trailing slash, we should support it\n  let startIndex = basename.endsWith(\"/\")\n    ? basename.length - 1\n    : basename.length;\n  let nextChar = pathname.charAt(startIndex);\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n\n  return pathname.slice(startIndex) || \"/\";\n}\n\n/**\n * @private\n */\nexport function warning(cond: any, message: string): void {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging @remix-run/router!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/utils/resolve-path\n */\nexport function resolvePath(to: To, fromPathname = \"/\"): Path {\n  let {\n    pathname: toPathname,\n    search = \"\",\n    hash = \"\",\n  } = typeof to === \"string\" ? parsePath(to) : to;\n\n  let pathname = toPathname\n    ? toPathname.startsWith(\"/\")\n      ? toPathname\n      : resolvePathname(toPathname, fromPathname)\n    : fromPathname;\n\n  return {\n    pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash),\n  };\n}\n\nfunction resolvePathname(relativePath: string, fromPathname: string): string {\n  let segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  let relativeSegments = relativePath.split(\"/\");\n\n  relativeSegments.forEach((segment) => {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\n\nfunction getInvalidPathError(\n  char: string,\n  field: string,\n  dest: string,\n  path: Partial<Path>\n) {\n  return (\n    `Cannot include a '${char}' character in a manually specified ` +\n    `\\`to.${field}\\` field [${JSON.stringify(\n      path\n    )}].  Please separate it out to the ` +\n    `\\`to.${dest}\\` field. Alternatively you may provide the full path as ` +\n    `a string in <Link to=\"...\"> and the router will parse it for you.`\n  );\n}\n\n/**\n * @private\n *\n * When processing relative navigation we want to ignore ancestor routes that\n * do not contribute to the path, such that index/pathless layout routes don't\n * interfere.\n *\n * For example, when moving a route element into an index route and/or a\n * pathless layout route, relative link behavior contained within should stay\n * the same.  Both of the following examples should link back to the root:\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\" element={<Link to=\"..\"}>\n *   </Route>\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\">\n *       <Route element={<AccountsLayout />}>       // <-- Does not contribute\n *         <Route index element={<Link to=\"..\"} />  // <-- Does not contribute\n *       </Route\n *     </Route>\n *   </Route>\n */\nexport function getPathContributingMatches<\n  T extends AgnosticRouteMatch = AgnosticRouteMatch\n>(matches: T[]) {\n  return matches.filter(\n    (match, index) =>\n      index === 0 || (match.route.path && match.route.path.length > 0)\n  );\n}\n\n/**\n * @private\n */\nexport function resolveTo(\n  toArg: To,\n  routePathnames: string[],\n  locationPathname: string,\n  isPathRelative = false\n): Path {\n  let to: Partial<Path>;\n  if (typeof toArg === \"string\") {\n    to = parsePath(toArg);\n  } else {\n    to = { ...toArg };\n\n    invariant(\n      !to.pathname || !to.pathname.includes(\"?\"),\n      getInvalidPathError(\"?\", \"pathname\", \"search\", to)\n    );\n    invariant(\n      !to.pathname || !to.pathname.includes(\"#\"),\n      getInvalidPathError(\"#\", \"pathname\", \"hash\", to)\n    );\n    invariant(\n      !to.search || !to.search.includes(\"#\"),\n      getInvalidPathError(\"#\", \"search\", \"hash\", to)\n    );\n  }\n\n  let isEmptyPath = toArg === \"\" || to.pathname === \"\";\n  let toPathname = isEmptyPath ? \"/\" : to.pathname;\n\n  let from: string;\n\n  // Routing is relative to the current pathname if explicitly requested.\n  //\n  // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n  if (isPathRelative || toPathname == null) {\n    from = locationPathname;\n  } else {\n    let routePathnameIndex = routePathnames.length - 1;\n\n    if (toPathname.startsWith(\"..\")) {\n      let toSegments = toPathname.split(\"/\");\n\n      // Each leading .. segment means \"go up one route\" instead of \"go up one\n      // URL segment\".  This is a key difference from how <a href> works and a\n      // major reason we call this a \"to\" value instead of a \"href\".\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n\n      to.pathname = toSegments.join(\"/\");\n    }\n\n    // If there are more \"..\" segments than parent routes, resolve relative to\n    // the root / URL.\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n\n  let path = resolvePath(to, from);\n\n  // Ensure the pathname has a trailing slash if the original \"to\" had one\n  let hasExplicitTrailingSlash =\n    toPathname && toPathname !== \"/\" && toPathname.endsWith(\"/\");\n  // Or if this was a link to the current path which has a trailing slash\n  let hasCurrentTrailingSlash =\n    (isEmptyPath || toPathname === \".\") && locationPathname.endsWith(\"/\");\n  if (\n    !path.pathname.endsWith(\"/\") &&\n    (hasExplicitTrailingSlash || hasCurrentTrailingSlash)\n  ) {\n    path.pathname += \"/\";\n  }\n\n  return path;\n}\n\n/**\n * @private\n */\nexport function getToPathname(to: To): string | undefined {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || (to as Path).pathname === \"\"\n    ? \"/\"\n    : typeof to === \"string\"\n    ? parsePath(to).pathname\n    : to.pathname;\n}\n\n/**\n * @private\n */\nexport const joinPaths = (paths: string[]): string =>\n  paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n\n/**\n * @private\n */\nexport const normalizePathname = (pathname: string): string =>\n  pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n\n/**\n * @private\n */\nexport const normalizeSearch = (search: string): string =>\n  !search || search === \"?\"\n    ? \"\"\n    : search.startsWith(\"?\")\n    ? search\n    : \"?\" + search;\n\n/**\n * @private\n */\nexport const normalizeHash = (hash: string): string =>\n  !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash;\n\nexport type JsonFunction = <Data>(\n  data: Data,\n  init?: number | ResponseInit\n) => Response;\n\n/**\n * This is a shortcut for creating `application/json` responses. Converts `data`\n * to JSON and sets the `Content-Type` header.\n */\nexport const json: JsonFunction = (data, init = {}) => {\n  let responseInit = typeof init === \"number\" ? { status: init } : init;\n\n  let headers = new Headers(responseInit.headers);\n  if (!headers.has(\"Content-Type\")) {\n    headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n  }\n\n  return new Response(JSON.stringify(data), {\n    ...responseInit,\n    headers,\n  });\n};\n\nexport interface TrackedPromise extends Promise<any> {\n  _tracked?: boolean;\n  _data?: any;\n  _error?: any;\n}\n\nexport class AbortedDeferredError extends Error {}\n\nexport class DeferredData {\n  private pendingKeysSet: Set<string> = new Set<string>();\n  private controller: AbortController;\n  private abortPromise: Promise<void>;\n  private unlistenAbortSignal: () => void;\n  private subscribers: Set<(aborted: boolean, settledKey?: string) => void> =\n    new Set();\n  data: Record<string, unknown>;\n  init?: ResponseInit;\n  deferredKeys: string[] = [];\n\n  constructor(data: Record<string, unknown>, responseInit?: ResponseInit) {\n    invariant(\n      data && typeof data === \"object\" && !Array.isArray(data),\n      \"defer() only accepts plain objects\"\n    );\n\n    // Set up an AbortController + Promise we can race against to exit early\n    // cancellation\n    let reject: (e: AbortedDeferredError) => void;\n    this.abortPromise = new Promise((_, r) => (reject = r));\n    this.controller = new AbortController();\n    let onAbort = () =>\n      reject(new AbortedDeferredError(\"Deferred data aborted\"));\n    this.unlistenAbortSignal = () =>\n      this.controller.signal.removeEventListener(\"abort\", onAbort);\n    this.controller.signal.addEventListener(\"abort\", onAbort);\n\n    this.data = Object.entries(data).reduce(\n      (acc, [key, value]) =>\n        Object.assign(acc, {\n          [key]: this.trackPromise(key, value),\n        }),\n      {}\n    );\n\n    if (this.done) {\n      // All incoming values were resolved\n      this.unlistenAbortSignal();\n    }\n\n    this.init = responseInit;\n  }\n\n  private trackPromise(\n    key: string,\n    value: Promise<unknown> | unknown\n  ): TrackedPromise | unknown {\n    if (!(value instanceof Promise)) {\n      return value;\n    }\n\n    this.deferredKeys.push(key);\n    this.pendingKeysSet.add(key);\n\n    // We store a little wrapper promise that will be extended with\n    // _data/_error props upon resolve/reject\n    let promise: TrackedPromise = Promise.race([value, this.abortPromise]).then(\n      (data) => this.onSettle(promise, key, null, data as unknown),\n      (error) => this.onSettle(promise, key, error as unknown)\n    );\n\n    // Register rejection listeners to avoid uncaught promise rejections on\n    // errors or aborted deferred values\n    promise.catch(() => {});\n\n    Object.defineProperty(promise, \"_tracked\", { get: () => true });\n    return promise;\n  }\n\n  private onSettle(\n    promise: TrackedPromise,\n    key: string,\n    error: unknown,\n    data?: unknown\n  ): unknown {\n    if (\n      this.controller.signal.aborted &&\n      error instanceof AbortedDeferredError\n    ) {\n      this.unlistenAbortSignal();\n      Object.defineProperty(promise, \"_error\", { get: () => error });\n      return Promise.reject(error);\n    }\n\n    this.pendingKeysSet.delete(key);\n\n    if (this.done) {\n      // Nothing left to abort!\n      this.unlistenAbortSignal();\n    }\n\n    if (error) {\n      Object.defineProperty(promise, \"_error\", { get: () => error });\n      this.emit(false, key);\n      return Promise.reject(error);\n    }\n\n    Object.defineProperty(promise, \"_data\", { get: () => data });\n    this.emit(false, key);\n    return data;\n  }\n\n  private emit(aborted: boolean, settledKey?: string) {\n    this.subscribers.forEach((subscriber) => subscriber(aborted, settledKey));\n  }\n\n  subscribe(fn: (aborted: boolean, settledKey?: string) => void) {\n    this.subscribers.add(fn);\n    return () => this.subscribers.delete(fn);\n  }\n\n  cancel() {\n    this.controller.abort();\n    this.pendingKeysSet.forEach((v, k) => this.pendingKeysSet.delete(k));\n    this.emit(true);\n  }\n\n  async resolveData(signal: AbortSignal) {\n    let aborted = false;\n    if (!this.done) {\n      let onAbort = () => this.cancel();\n      signal.addEventListener(\"abort\", onAbort);\n      aborted = await new Promise((resolve) => {\n        this.subscribe((aborted) => {\n          signal.removeEventListener(\"abort\", onAbort);\n          if (aborted || this.done) {\n            resolve(aborted);\n          }\n        });\n      });\n    }\n    return aborted;\n  }\n\n  get done() {\n    return this.pendingKeysSet.size === 0;\n  }\n\n  get unwrappedData() {\n    invariant(\n      this.data !== null && this.done,\n      \"Can only unwrap data on initialized and settled deferreds\"\n    );\n\n    return Object.entries(this.data).reduce(\n      (acc, [key, value]) =>\n        Object.assign(acc, {\n          [key]: unwrapTrackedPromise(value),\n        }),\n      {}\n    );\n  }\n\n  get pendingKeys() {\n    return Array.from(this.pendingKeysSet);\n  }\n}\n\nfunction isTrackedPromise(value: any): value is TrackedPromise {\n  return (\n    value instanceof Promise && (value as TrackedPromise)._tracked === true\n  );\n}\n\nfunction unwrapTrackedPromise(value: any) {\n  if (!isTrackedPromise(value)) {\n    return value;\n  }\n\n  if (value._error) {\n    throw value._error;\n  }\n  return value._data;\n}\n\nexport type DeferFunction = (\n  data: Record<string, unknown>,\n  init?: number | ResponseInit\n) => DeferredData;\n\nexport const defer: DeferFunction = (data, init = {}) => {\n  let responseInit = typeof init === \"number\" ? { status: init } : init;\n\n  return new DeferredData(data, responseInit);\n};\n\nexport type RedirectFunction = (\n  url: string,\n  init?: number | ResponseInit\n) => Response;\n\n/**\n * A redirect response. Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nexport const redirect: RedirectFunction = (url, init = 302) => {\n  let responseInit = init;\n  if (typeof responseInit === \"number\") {\n    responseInit = { status: responseInit };\n  } else if (typeof responseInit.status === \"undefined\") {\n    responseInit.status = 302;\n  }\n\n  let headers = new Headers(responseInit.headers);\n  headers.set(\"Location\", url);\n\n  return new Response(null, {\n    ...responseInit,\n    headers,\n  });\n};\n\n/**\n * @private\n * Utility class we use to hold auto-unwrapped 4xx/5xx Response bodies\n */\nexport class ErrorResponse {\n  status: number;\n  statusText: string;\n  data: any;\n  error?: Error;\n  internal: boolean;\n\n  constructor(\n    status: number,\n    statusText: string | undefined,\n    data: any,\n    internal = false\n  ) {\n    this.status = status;\n    this.statusText = statusText || \"\";\n    this.internal = internal;\n    if (data instanceof Error) {\n      this.data = data.toString();\n      this.error = data;\n    } else {\n      this.data = data;\n    }\n  }\n}\n\n/**\n * Check if the given error is an ErrorResponse generated from a 4xx/5xx\n * Response thrown from an action/loader\n */\nexport function isRouteErrorResponse(error: any): error is ErrorResponse {\n  return (\n    error != null &&\n    typeof error.status === \"number\" &&\n    typeof error.statusText === \"string\" &&\n    typeof error.internal === \"boolean\" &&\n    \"data\" in error\n  );\n}\n","import type { History, Location, Path, To } from \"./history\";\nimport {\n  Action as HistoryAction,\n  createLocation,\n  createPath,\n  invariant,\n  parsePath,\n} from \"./history\";\nimport type {\n  DataResult,\n  AgnosticDataRouteMatch,\n  AgnosticDataRouteObject,\n  DeferredResult,\n  ErrorResult,\n  FormEncType,\n  FormMethod,\n  RedirectResult,\n  RouteData,\n  AgnosticRouteObject,\n  Submission,\n  SuccessResult,\n  AgnosticRouteMatch,\n  MutationFormMethod,\n  ShouldRevalidateFunction,\n} from \"./utils\";\nimport {\n  DeferredData,\n  ErrorResponse,\n  ResultType,\n  convertRoutesToDataRoutes,\n  getPathContributingMatches,\n  isRouteErrorResponse,\n  joinPaths,\n  matchRoutes,\n  resolveTo,\n  warning,\n} from \"./utils\";\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A Router instance manages all navigation and data loading/mutations\n */\nexport interface Router {\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the basename for the router\n   */\n  get basename(): RouterInit[\"basename\"];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the current state of the router\n   */\n  get state(): RouterState;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the routes for this router instance\n   */\n  get routes(): AgnosticDataRouteObject[];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Initialize the router, including adding history listeners and kicking off\n   * initial data fetches.  Returns a function to cleanup listeners and abort\n   * any in-progress loads\n   */\n  initialize(): Router;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Subscribe to router.state updates\n   *\n   * @param fn function to call with the new state\n   */\n  subscribe(fn: RouterSubscriber): () => void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Enable scroll restoration behavior in the router\n   *\n   * @param savedScrollPositions Object that will manage positions, in case\n   *                             it's being restored from sessionStorage\n   * @param getScrollPosition    Function to get the active Y scroll position\n   * @param getKey               Function to get the key to use for restoration\n   */\n  enableScrollRestoration(\n    savedScrollPositions: Record<string, number>,\n    getScrollPosition: GetScrollPositionFunction,\n    getKey?: GetScrollRestorationKeyFunction\n  ): () => void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Navigate forward/backward in the history stack\n   * @param to Delta to move in the history stack\n   */\n  navigate(to: number): Promise<void>;\n\n  /**\n   * Navigate to the given path\n   * @param to Path to navigate to\n   * @param opts Navigation options (method, submission, etc.)\n   */\n  navigate(to: To, opts?: RouterNavigateOptions): Promise<void>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Trigger a fetcher load/submission\n   *\n   * @param key     Fetcher key\n   * @param routeId Route that owns the fetcher\n   * @param href    href to fetch\n   * @param opts    Fetcher options, (method, submission, etc.)\n   */\n  fetch(\n    key: string,\n    routeId: string,\n    href: string,\n    opts?: RouterNavigateOptions\n  ): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Trigger a revalidation of all current route loaders and fetcher loads\n   */\n  revalidate(): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Utility function to create an href for the given location\n   * @param location\n   */\n  createHref(location: Location | URL): string;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Utility function to URL encode a destination path according to the internal\n   * history implementation\n   * @param to\n   */\n  encodeLocation(to: To): Path;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Get/create a fetcher for the given key\n   * @param key\n   */\n  getFetcher<TData = any>(key?: string): Fetcher<TData>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Delete the fetcher for a given key\n   * @param key\n   */\n  deleteFetcher(key?: string): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Cleanup listeners and abort any in-progress loads\n   */\n  dispose(): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Get a navigation blocker\n   * @param key The identifier for the blocker\n   * @param fn The blocker function implementation\n   */\n  getBlocker(key: string, fn: BlockerFunction): Blocker;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Delete a navigation blocker\n   * @param key The identifier for the blocker\n   */\n  deleteBlocker(key: string): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Internal fetch AbortControllers accessed by unit tests\n   */\n  _internalFetchControllers: Map<string, AbortController>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Internal pending DeferredData instances accessed by unit tests\n   */\n  _internalActiveDeferreds: Map<string, DeferredData>;\n}\n\n/**\n * State maintained internally by the router.  During a navigation, all states\n * reflect the the \"old\" location unless otherwise noted.\n */\nexport interface RouterState {\n  /**\n   * The action of the most recent navigation\n   */\n  historyAction: HistoryAction;\n\n  /**\n   * The current location reflected by the router\n   */\n  location: Location;\n\n  /**\n   * The current set of route matches\n   */\n  matches: AgnosticDataRouteMatch[];\n\n  /**\n   * Tracks whether we've completed our initial data load\n   */\n  initialized: boolean;\n\n  /**\n   * Current scroll position we should start at for a new view\n   *  - number -> scroll position to restore to\n   *  - false -> do not restore scroll at all (used during submissions)\n   *  - null -> don't have a saved position, scroll to hash or top of page\n   */\n  restoreScrollPosition: number | false | null;\n\n  /**\n   * Indicate whether this navigation should skip resetting the scroll position\n   * if we are unable to restore the scroll position\n   */\n  preventScrollReset: boolean;\n\n  /**\n   * Tracks the state of the current navigation\n   */\n  navigation: Navigation;\n\n  /**\n   * Tracks any in-progress revalidations\n   */\n  revalidation: RevalidationState;\n\n  /**\n   * Data from the loaders for the current matches\n   */\n  loaderData: RouteData;\n\n  /**\n   * Data from the action for the current matches\n   */\n  actionData: RouteData | null;\n\n  /**\n   * Errors caught from loaders for the current matches\n   */\n  errors: RouteData | null;\n\n  /**\n   * Map of current fetchers\n   */\n  fetchers: Map<string, Fetcher>;\n\n  /**\n   * Map of current blockers\n   */\n  blockers: Map<string, Blocker>;\n}\n\n/**\n * Data that can be passed into hydrate a Router from SSR\n */\nexport type HydrationState = Partial<\n  Pick<RouterState, \"loaderData\" | \"actionData\" | \"errors\">\n>;\n\n/**\n * Initialization options for createRouter\n */\nexport interface RouterInit {\n  basename?: string;\n  routes: AgnosticRouteObject[];\n  history: History;\n  hydrationData?: HydrationState;\n}\n\n/**\n * State returned from a server-side query() call\n */\nexport interface StaticHandlerContext {\n  basename: Router[\"basename\"];\n  location: RouterState[\"location\"];\n  matches: RouterState[\"matches\"];\n  loaderData: RouterState[\"loaderData\"];\n  actionData: RouterState[\"actionData\"];\n  errors: RouterState[\"errors\"];\n  statusCode: number;\n  loaderHeaders: Record<string, Headers>;\n  actionHeaders: Record<string, Headers>;\n  activeDeferreds: Record<string, DeferredData> | null;\n  _deepestRenderedBoundaryId?: string | null;\n}\n\n/**\n * A StaticHandler instance manages a singular SSR navigation/fetch event\n */\nexport interface StaticHandler {\n  dataRoutes: AgnosticDataRouteObject[];\n  query(\n    request: Request,\n    opts?: { requestContext?: unknown }\n  ): Promise<StaticHandlerContext | Response>;\n  queryRoute(\n    request: Request,\n    opts?: { routeId?: string; requestContext?: unknown }\n  ): Promise<any>;\n}\n\n/**\n * Subscriber function signature for changes to router state\n */\nexport interface RouterSubscriber {\n  (state: RouterState): void;\n}\n\ninterface UseMatchesMatch {\n  id: string;\n  pathname: string;\n  params: AgnosticRouteMatch[\"params\"];\n  data: unknown;\n  handle: unknown;\n}\n\n/**\n * Function signature for determining the key to be used in scroll restoration\n * for a given location\n */\nexport interface GetScrollRestorationKeyFunction {\n  (location: Location, matches: UseMatchesMatch[]): string | null;\n}\n\n/**\n * Function signature for determining the current scroll position\n */\nexport interface GetScrollPositionFunction {\n  (): number;\n}\n\n/**\n * Options for a navigate() call for a Link navigation\n */\ntype LinkNavigateOptions = {\n  replace?: boolean;\n  state?: any;\n  preventScrollReset?: boolean;\n};\n\n/**\n * Options for a navigate() call for a Form navigation\n */\ntype SubmissionNavigateOptions = {\n  replace?: boolean;\n  state?: any;\n  preventScrollReset?: boolean;\n  formMethod?: FormMethod;\n  formEncType?: FormEncType;\n  formData: FormData;\n};\n\n/**\n * Options to pass to navigate() for either a Link or Form navigation\n */\nexport type RouterNavigateOptions =\n  | LinkNavigateOptions\n  | SubmissionNavigateOptions;\n\n/**\n * Options to pass to fetch()\n */\nexport type RouterFetchOptions =\n  | Omit<LinkNavigateOptions, \"replace\">\n  | Omit<SubmissionNavigateOptions, \"replace\">;\n\n/**\n * Potential states for state.navigation\n */\nexport type NavigationStates = {\n  Idle: {\n    state: \"idle\";\n    location: undefined;\n    formMethod: undefined;\n    formAction: undefined;\n    formEncType: undefined;\n    formData: undefined;\n  };\n  Loading: {\n    state: \"loading\";\n    location: Location;\n    formMethod: FormMethod | undefined;\n    formAction: string | undefined;\n    formEncType: FormEncType | undefined;\n    formData: FormData | undefined;\n  };\n  Submitting: {\n    state: \"submitting\";\n    location: Location;\n    formMethod: FormMethod;\n    formAction: string;\n    formEncType: FormEncType;\n    formData: FormData;\n  };\n};\n\nexport type Navigation = NavigationStates[keyof NavigationStates];\n\nexport type RevalidationState = \"idle\" | \"loading\";\n\n/**\n * Potential states for fetchers\n */\ntype FetcherStates<TData = any> = {\n  Idle: {\n    state: \"idle\";\n    formMethod: undefined;\n    formAction: undefined;\n    formEncType: undefined;\n    formData: undefined;\n    data: TData | undefined;\n    \" _hasFetcherDoneAnything \"?: boolean;\n  };\n  Loading: {\n    state: \"loading\";\n    formMethod: FormMethod | undefined;\n    formAction: string | undefined;\n    formEncType: FormEncType | undefined;\n    formData: FormData | undefined;\n    data: TData | undefined;\n    \" _hasFetcherDoneAnything \"?: boolean;\n  };\n  Submitting: {\n    state: \"submitting\";\n    formMethod: FormMethod;\n    formAction: string;\n    formEncType: FormEncType;\n    formData: FormData;\n    data: TData | undefined;\n    \" _hasFetcherDoneAnything \"?: boolean;\n  };\n};\n\nexport type Fetcher<TData = any> =\n  FetcherStates<TData>[keyof FetcherStates<TData>];\n\ninterface BlockerBlocked {\n  state: \"blocked\";\n  reset(): void;\n  proceed(): void;\n  location: Location;\n}\n\ninterface BlockerUnblocked {\n  state: \"unblocked\";\n  reset: undefined;\n  proceed: undefined;\n  location: undefined;\n}\n\ninterface BlockerProceeding {\n  state: \"proceeding\";\n  reset: undefined;\n  proceed: undefined;\n  location: Location;\n}\n\nexport type Blocker = BlockerUnblocked | BlockerBlocked | BlockerProceeding;\n\nexport type BlockerFunction = (args: {\n  currentLocation: Location;\n  nextLocation: Location;\n  historyAction: HistoryAction;\n}) => boolean;\n\ninterface ShortCircuitable {\n  /**\n   * startNavigation does not need to complete the navigation because we\n   * redirected or got interrupted\n   */\n  shortCircuited?: boolean;\n}\n\ninterface HandleActionResult extends ShortCircuitable {\n  /**\n   * Error thrown from the current action, keyed by the route containing the\n   * error boundary to render the error.  To be committed to the state after\n   * loaders have completed\n   */\n  pendingActionError?: RouteData;\n  /**\n   * Data returned from the current action, keyed by the route owning the action.\n   * To be committed to the state after loaders have completed\n   */\n  pendingActionData?: RouteData;\n}\n\ninterface HandleLoadersResult extends ShortCircuitable {\n  /**\n   * loaderData returned from the current set of loaders\n   */\n  loaderData?: RouterState[\"loaderData\"];\n  /**\n   * errors thrown from the current set of loaders\n   */\n  errors?: RouterState[\"errors\"];\n}\n\n/**\n * Cached info for active fetcher.load() instances so they can participate\n * in revalidation\n */\ninterface FetchLoadMatch {\n  routeId: string;\n  path: string;\n  match: AgnosticDataRouteMatch;\n  matches: AgnosticDataRouteMatch[];\n}\n\n/**\n * Identified fetcher.load() calls that need to be revalidated\n */\ninterface RevalidatingFetcher extends FetchLoadMatch {\n  key: string;\n}\n\n/**\n * Wrapper object to allow us to throw any response out from callLoaderOrAction\n * for queryRouter while preserving whether or not it was thrown or returned\n * from the loader/action\n */\ninterface QueryRouteResponse {\n  type: ResultType.data | ResultType.error;\n  response: Response;\n}\n\nconst validMutationMethodsArr: MutationFormMethod[] = [\n  \"post\",\n  \"put\",\n  \"patch\",\n  \"delete\",\n];\nconst validMutationMethods = new Set<MutationFormMethod>(\n  validMutationMethodsArr\n);\n\nconst validRequestMethodsArr: FormMethod[] = [\n  \"get\",\n  ...validMutationMethodsArr,\n];\nconst validRequestMethods = new Set<FormMethod>(validRequestMethodsArr);\n\nconst redirectStatusCodes = new Set([301, 302, 303, 307, 308]);\nconst redirectPreserveMethodStatusCodes = new Set([307, 308]);\n\nexport const IDLE_NAVIGATION: NavigationStates[\"Idle\"] = {\n  state: \"idle\",\n  location: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n};\n\nexport const IDLE_FETCHER: FetcherStates[\"Idle\"] = {\n  state: \"idle\",\n  data: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n};\n\nexport const IDLE_BLOCKER: BlockerUnblocked = {\n  state: \"unblocked\",\n  proceed: undefined,\n  reset: undefined,\n  location: undefined,\n};\n\nconst isBrowser =\n  typeof window !== \"undefined\" &&\n  typeof window.document !== \"undefined\" &&\n  typeof window.document.createElement !== \"undefined\";\nconst isServer = !isBrowser;\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region createRouter\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Create a router and listen to history POP navigations\n */\nexport function createRouter(init: RouterInit): Router {\n  invariant(\n    init.routes.length > 0,\n    \"You must provide a non-empty routes array to createRouter\"\n  );\n\n  let dataRoutes = convertRoutesToDataRoutes(init.routes);\n  // Cleanup function for history\n  let unlistenHistory: (() => void) | null = null;\n  // Externally-provided functions to call on all state changes\n  let subscribers = new Set<RouterSubscriber>();\n  // Externally-provided object to hold scroll restoration locations during routing\n  let savedScrollPositions: Record<string, number> | null = null;\n  // Externally-provided function to get scroll restoration keys\n  let getScrollRestorationKey: GetScrollRestorationKeyFunction | null = null;\n  // Externally-provided function to get current scroll position\n  let getScrollPosition: GetScrollPositionFunction | null = null;\n  // One-time flag to control the initial hydration scroll restoration.  Because\n  // we don't get the saved positions from <ScrollRestoration /> until _after_\n  // the initial render, we need to manually trigger a separate updateState to\n  // send along the restoreScrollPosition\n  // Set to true if we have `hydrationData` since we assume we were SSR'd and that\n  // SSR did the initial scroll restoration.\n  let initialScrollRestored = init.hydrationData != null;\n\n  let initialMatches = matchRoutes(\n    dataRoutes,\n    init.history.location,\n    init.basename\n  );\n  let initialErrors: RouteData | null = null;\n\n  if (initialMatches == null) {\n    // If we do not match a user-provided-route, fall back to the root\n    // to allow the error boundary to take over\n    let error = getInternalRouterError(404, {\n      pathname: init.history.location.pathname,\n    });\n    let { matches, route } = getShortCircuitMatches(dataRoutes);\n    initialMatches = matches;\n    initialErrors = { [route.id]: error };\n  }\n\n  let initialized =\n    !initialMatches.some((m) => m.route.loader) || init.hydrationData != null;\n\n  let router: Router;\n  let state: RouterState = {\n    historyAction: init.history.action,\n    location: init.history.location,\n    matches: initialMatches,\n    initialized,\n    navigation: IDLE_NAVIGATION,\n    // Don't restore on initial updateState() if we were SSR'd\n    restoreScrollPosition: init.hydrationData != null ? false : null,\n    preventScrollReset: false,\n    revalidation: \"idle\",\n    loaderData: (init.hydrationData && init.hydrationData.loaderData) || {},\n    actionData: (init.hydrationData && init.hydrationData.actionData) || null,\n    errors: (init.hydrationData && init.hydrationData.errors) || initialErrors,\n    fetchers: new Map(),\n    blockers: new Map(),\n  };\n\n  // -- Stateful internal variables to manage navigations --\n  // Current navigation in progress (to be committed in completeNavigation)\n  let pendingAction: HistoryAction = HistoryAction.Pop;\n\n  // Should the current navigation prevent the scroll reset if scroll cannot\n  // be restored?\n  let pendingPreventScrollReset = false;\n\n  // AbortController for the active navigation\n  let pendingNavigationController: AbortController | null;\n\n  // We use this to avoid touching history in completeNavigation if a\n  // revalidation is entirely uninterrupted\n  let isUninterruptedRevalidation = false;\n\n  // Use this internal flag to force revalidation of all loaders:\n  //  - submissions (completed or interrupted)\n  //  - useRevalidate()\n  //  - X-Remix-Revalidate (from redirect)\n  let isRevalidationRequired = false;\n\n  // Use this internal array to capture routes that require revalidation due\n  // to a cancelled deferred on action submission\n  let cancelledDeferredRoutes: string[] = [];\n\n  // Use this internal array to capture fetcher loads that were cancelled by an\n  // action navigation and require revalidation\n  let cancelledFetcherLoads: string[] = [];\n\n  // AbortControllers for any in-flight fetchers\n  let fetchControllers = new Map<string, AbortController>();\n\n  // Track loads based on the order in which they started\n  let incrementingLoadId = 0;\n\n  // Track the outstanding pending navigation data load to be compared against\n  // the globally incrementing load when a fetcher load lands after a completed\n  // navigation\n  let pendingNavigationLoadId = -1;\n\n  // Fetchers that triggered data reloads as a result of their actions\n  let fetchReloadIds = new Map<string, number>();\n\n  // Fetchers that triggered redirect navigations from their actions\n  let fetchRedirectIds = new Set<string>();\n\n  // Most recent href/match for fetcher.load calls for fetchers\n  let fetchLoadMatches = new Map<string, FetchLoadMatch>();\n\n  // Store DeferredData instances for active route matches.  When a\n  // route loader returns defer() we stick one in here.  Then, when a nested\n  // promise resolves we update loaderData.  If a new navigation starts we\n  // cancel active deferreds for eliminated routes.\n  let activeDeferreds = new Map<string, DeferredData>();\n\n  // We ony support a single active blocker at the moment since we don't have\n  // any compelling use cases for multi-blocker yet\n  let activeBlocker: string | null = null;\n\n  // Store blocker functions in a separate Map outside of router state since\n  // we don't need to update UI state if they change\n  let blockerFunctions = new Map<string, BlockerFunction>();\n\n  // Flag to ignore the next history update, so we can revert the URL change on\n  // a POP navigation that was blocked by the user without touching router state\n  let ignoreNextHistoryUpdate = false;\n\n  // Initialize the router, all side effects should be kicked off from here.\n  // Implemented as a Fluent API for ease of:\n  //   let router = createRouter(init).initialize();\n  function initialize() {\n    // If history informs us of a POP navigation, start the navigation but do not update\n    // state.  We'll update our own state once the navigation completes\n    unlistenHistory = init.history.listen(\n      ({ action: historyAction, location, delta }) => {\n        // Ignore this event if it was just us resetting the URL from a\n        // blocked POP navigation\n        if (ignoreNextHistoryUpdate) {\n          ignoreNextHistoryUpdate = false;\n          return;\n        }\n\n        warning(\n          activeBlocker != null && delta === null,\n          \"You are trying to use a blocker on a POP navigation to a location \" +\n            \"that was not created by @remix-run/router. This will fail silently in \" +\n            \"production. This can happen if you are navigating outside the router \" +\n            \"via `window.history.pushState`/`window.location.hash` instead of using \" +\n            \"router navigation APIs.  This can also happen if you are using \" +\n            \"createHashRouter and the user manually changes the URL.\"\n        );\n\n        let blockerKey = shouldBlockNavigation({\n          currentLocation: state.location,\n          nextLocation: location,\n          historyAction,\n        });\n\n        if (blockerKey && delta != null) {\n          // Restore the URL to match the current UI, but don't update router state\n          ignoreNextHistoryUpdate = true;\n          init.history.go(delta * -1);\n\n          // Put the blocker into a blocked state\n          updateBlocker(blockerKey, {\n            state: \"blocked\",\n            location,\n            proceed() {\n              updateBlocker(blockerKey!, {\n                state: \"proceeding\",\n                proceed: undefined,\n                reset: undefined,\n                location,\n              });\n              // Re-do the same POP navigation we just blocked\n              init.history.go(delta);\n            },\n            reset() {\n              deleteBlocker(blockerKey!);\n              updateState({ blockers: new Map(router.state.blockers) });\n            },\n          });\n          return;\n        }\n\n        return startNavigation(historyAction, location);\n      }\n    );\n\n    // Kick off initial data load if needed.  Use Pop to avoid modifying history\n    if (!state.initialized) {\n      startNavigation(HistoryAction.Pop, state.location);\n    }\n\n    return router;\n  }\n\n  // Clean up a router and it's side effects\n  function dispose() {\n    if (unlistenHistory) {\n      unlistenHistory();\n    }\n    subscribers.clear();\n    pendingNavigationController && pendingNavigationController.abort();\n    state.fetchers.forEach((_, key) => deleteFetcher(key));\n    state.blockers.forEach((_, key) => deleteBlocker(key));\n  }\n\n  // Subscribe to state updates for the router\n  function subscribe(fn: RouterSubscriber) {\n    subscribers.add(fn);\n    return () => subscribers.delete(fn);\n  }\n\n  // Update our state and notify the calling context of the change\n  function updateState(newState: Partial<RouterState>): void {\n    state = {\n      ...state,\n      ...newState,\n    };\n    subscribers.forEach((subscriber) => subscriber(state));\n  }\n\n  // Complete a navigation returning the state.navigation back to the IDLE_NAVIGATION\n  // and setting state.[historyAction/location/matches] to the new route.\n  // - Location is a required param\n  // - Navigation will always be set to IDLE_NAVIGATION\n  // - Can pass any other state in newState\n  function completeNavigation(\n    location: Location,\n    newState: Partial<Omit<RouterState, \"action\" | \"location\" | \"navigation\">>\n  ): void {\n    // Deduce if we're in a loading/actionReload state:\n    // - We have committed actionData in the store\n    // - The current navigation was a mutation submission\n    // - We're past the submitting state and into the loading state\n    // - The location being loaded is not the result of a redirect\n    let isActionReload =\n      state.actionData != null &&\n      state.navigation.formMethod != null &&\n      isMutationMethod(state.navigation.formMethod) &&\n      state.navigation.state === \"loading\" &&\n      location.state?._isRedirect !== true;\n\n    let actionData: RouteData | null;\n    if (newState.actionData) {\n      if (Object.keys(newState.actionData).length > 0) {\n        actionData = newState.actionData;\n      } else {\n        // Empty actionData -> clear prior actionData due to an action error\n        actionData = null;\n      }\n    } else if (isActionReload) {\n      // Keep the current data if we're wrapping up the action reload\n      actionData = state.actionData;\n    } else {\n      // Clear actionData on any other completed navigations\n      actionData = null;\n    }\n\n    // Always preserve any existing loaderData from re-used routes\n    let loaderData = newState.loaderData\n      ? mergeLoaderData(\n          state.loaderData,\n          newState.loaderData,\n          newState.matches || [],\n          newState.errors\n        )\n      : state.loaderData;\n\n    // On a successful navigation we can assume we got through all blockers\n    // so we can start fresh\n    for (let [key] of blockerFunctions) {\n      deleteBlocker(key);\n    }\n\n    // Always respect the user flag.  Otherwise don't reset on mutation\n    // submission navigations unless they redirect\n    let preventScrollReset =\n      pendingPreventScrollReset === true ||\n      (state.navigation.formMethod != null &&\n        isMutationMethod(state.navigation.formMethod) &&\n        location.state?._isRedirect !== true);\n\n    updateState({\n      ...newState, // matches, errors, fetchers go through as-is\n      actionData,\n      loaderData,\n      historyAction: pendingAction,\n      location,\n      initialized: true,\n      navigation: IDLE_NAVIGATION,\n      revalidation: \"idle\",\n      restoreScrollPosition: getSavedScrollPosition(\n        location,\n        newState.matches || state.matches\n      ),\n      preventScrollReset,\n      blockers: new Map(state.blockers),\n    });\n\n    if (isUninterruptedRevalidation) {\n      // If this was an uninterrupted revalidation then do not touch history\n    } else if (pendingAction === HistoryAction.Pop) {\n      // Do nothing for POP - URL has already been updated\n    } else if (pendingAction === HistoryAction.Push) {\n      init.history.push(location, location.state);\n    } else if (pendingAction === HistoryAction.Replace) {\n      init.history.replace(location, location.state);\n    }\n\n    // Reset stateful navigation vars\n    pendingAction = HistoryAction.Pop;\n    pendingPreventScrollReset = false;\n    isUninterruptedRevalidation = false;\n    isRevalidationRequired = false;\n    cancelledDeferredRoutes = [];\n    cancelledFetcherLoads = [];\n  }\n\n  // Trigger a navigation event, which can either be a numerical POP or a PUSH\n  // replace with an optional submission\n  async function navigate(\n    to: number | To,\n    opts?: RouterNavigateOptions\n  ): Promise<void> {\n    if (typeof to === \"number\") {\n      init.history.go(to);\n      return;\n    }\n\n    let { path, submission, error } = normalizeNavigateOptions(to, opts);\n\n    let currentLocation = state.location;\n    let nextLocation = createLocation(state.location, path, opts && opts.state);\n\n    // When using navigate as a PUSH/REPLACE we aren't reading an already-encoded\n    // URL from window.location, so we need to encode it here so the behavior\n    // remains the same as POP and non-data-router usages.  new URL() does all\n    // the same encoding we'd get from a history.pushState/window.location read\n    // without having to touch history\n    nextLocation = {\n      ...nextLocation,\n      ...init.history.encodeLocation(nextLocation),\n    };\n\n    let userReplace = opts && opts.replace != null ? opts.replace : undefined;\n\n    let historyAction = HistoryAction.Push;\n\n    if (userReplace === true) {\n      historyAction = HistoryAction.Replace;\n    } else if (userReplace === false) {\n      // no-op\n    } else if (\n      submission != null &&\n      isMutationMethod(submission.formMethod) &&\n      submission.formAction === state.location.pathname + state.location.search\n    ) {\n      // By default on submissions to the current location we REPLACE so that\n      // users don't have to double-click the back button to get to the prior\n      // location.  If the user redirects to a different location from the\n      // action/loader this will be ignored and the redirect will be a PUSH\n      historyAction = HistoryAction.Replace;\n    }\n\n    let preventScrollReset =\n      opts && \"preventScrollReset\" in opts\n        ? opts.preventScrollReset === true\n        : undefined;\n\n    let blockerKey = shouldBlockNavigation({\n      currentLocation,\n      nextLocation,\n      historyAction,\n    });\n    if (blockerKey) {\n      // Put the blocker into a blocked state\n      updateBlocker(blockerKey, {\n        state: \"blocked\",\n        location: nextLocation,\n        proceed() {\n          updateBlocker(blockerKey!, {\n            state: \"proceeding\",\n            proceed: undefined,\n            reset: undefined,\n            location: nextLocation,\n          });\n          // Send the same navigation through\n          navigate(to, opts);\n        },\n        reset() {\n          deleteBlocker(blockerKey!);\n          updateState({ blockers: new Map(state.blockers) });\n        },\n      });\n      return;\n    }\n\n    return await startNavigation(historyAction, nextLocation, {\n      submission,\n      // Send through the formData serialization error if we have one so we can\n      // render at the right error boundary after we match routes\n      pendingError: error,\n      preventScrollReset,\n      replace: opts && opts.replace,\n    });\n  }\n\n  // Revalidate all current loaders.  If a navigation is in progress or if this\n  // is interrupted by a navigation, allow this to \"succeed\" by calling all\n  // loaders during the next loader round\n  function revalidate() {\n    interruptActiveLoads();\n    updateState({ revalidation: \"loading\" });\n\n    // If we're currently submitting an action, we don't need to start a new\n    // navigation, we'll just let the follow up loader execution call all loaders\n    if (state.navigation.state === \"submitting\") {\n      return;\n    }\n\n    // If we're currently in an idle state, start a new navigation for the current\n    // action/location and mark it as uninterrupted, which will skip the history\n    // update in completeNavigation\n    if (state.navigation.state === \"idle\") {\n      startNavigation(state.historyAction, state.location, {\n        startUninterruptedRevalidation: true,\n      });\n      return;\n    }\n\n    // Otherwise, if we're currently in a loading state, just start a new\n    // navigation to the navigation.location but do not trigger an uninterrupted\n    // revalidation so that history correctly updates once the navigation completes\n    startNavigation(\n      pendingAction || state.historyAction,\n      state.navigation.location,\n      { overrideNavigation: state.navigation }\n    );\n  }\n\n  // Start a navigation to the given action/location.  Can optionally provide a\n  // overrideNavigation which will override the normalLoad in the case of a redirect\n  // navigation\n  async function startNavigation(\n    historyAction: HistoryAction,\n    location: Location,\n    opts?: {\n      submission?: Submission;\n      overrideNavigation?: Navigation;\n      pendingError?: ErrorResponse;\n      startUninterruptedRevalidation?: boolean;\n      preventScrollReset?: boolean;\n      replace?: boolean;\n    }\n  ): Promise<void> {\n    // Abort any in-progress navigations and start a new one. Unset any ongoing\n    // uninterrupted revalidations unless told otherwise, since we want this\n    // new navigation to update history normally\n    pendingNavigationController && pendingNavigationController.abort();\n    pendingNavigationController = null;\n    pendingAction = historyAction;\n    isUninterruptedRevalidation =\n      (opts && opts.startUninterruptedRevalidation) === true;\n\n    // Save the current scroll position every time we start a new navigation,\n    // and track whether we should reset scroll on completion\n    saveScrollPosition(state.location, state.matches);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n\n    let loadingNavigation = opts && opts.overrideNavigation;\n    let matches = matchRoutes(dataRoutes, location, init.basename);\n\n    // Short circuit with a 404 on the root error boundary if we match nothing\n    if (!matches) {\n      let error = getInternalRouterError(404, { pathname: location.pathname });\n      let { matches: notFoundMatches, route } =\n        getShortCircuitMatches(dataRoutes);\n      // Cancel all pending deferred on 404s since we don't keep any routes\n      cancelActiveDeferreds();\n      completeNavigation(location, {\n        matches: notFoundMatches,\n        loaderData: {},\n        errors: {\n          [route.id]: error,\n        },\n      });\n      return;\n    }\n\n    // Short circuit if it's only a hash change and not a mutation submission\n    // For example, on /page#hash and submit a <Form method=\"post\"> which will\n    // default to a navigation to /page\n    if (\n      isHashChangeOnly(state.location, location) &&\n      !(opts && opts.submission && isMutationMethod(opts.submission.formMethod))\n    ) {\n      completeNavigation(location, { matches });\n      return;\n    }\n\n    // Create a controller/Request for this navigation\n    pendingNavigationController = new AbortController();\n    let request = createClientSideRequest(\n      init.history,\n      location,\n      pendingNavigationController.signal,\n      opts && opts.submission\n    );\n    let pendingActionData: RouteData | undefined;\n    let pendingError: RouteData | undefined;\n\n    if (opts && opts.pendingError) {\n      // If we have a pendingError, it means the user attempted a GET submission\n      // with binary FormData so assign here and skip to handleLoaders.  That\n      // way we handle calling loaders above the boundary etc.  It's not really\n      // different from an actionError in that sense.\n      pendingError = {\n        [findNearestBoundary(matches).route.id]: opts.pendingError,\n      };\n    } else if (\n      opts &&\n      opts.submission &&\n      isMutationMethod(opts.submission.formMethod)\n    ) {\n      // Call action if we received an action submission\n      let actionOutput = await handleAction(\n        request,\n        location,\n        opts.submission,\n        matches,\n        { replace: opts.replace }\n      );\n\n      if (actionOutput.shortCircuited) {\n        return;\n      }\n\n      pendingActionData = actionOutput.pendingActionData;\n      pendingError = actionOutput.pendingActionError;\n\n      let navigation: NavigationStates[\"Loading\"] = {\n        state: \"loading\",\n        location,\n        ...opts.submission,\n      };\n      loadingNavigation = navigation;\n\n      // Create a GET request for the loaders\n      request = new Request(request.url, { signal: request.signal });\n    }\n\n    // Call loaders\n    let { shortCircuited, loaderData, errors } = await handleLoaders(\n      request,\n      location,\n      matches,\n      loadingNavigation,\n      opts && opts.submission,\n      opts && opts.replace,\n      pendingActionData,\n      pendingError\n    );\n\n    if (shortCircuited) {\n      return;\n    }\n\n    // Clean up now that the action/loaders have completed.  Don't clean up if\n    // we short circuited because pendingNavigationController will have already\n    // been assigned to a new controller for the next navigation\n    pendingNavigationController = null;\n\n    completeNavigation(location, {\n      matches,\n      ...(pendingActionData ? { actionData: pendingActionData } : {}),\n      loaderData,\n      errors,\n    });\n  }\n\n  // Call the action matched by the leaf route for this navigation and handle\n  // redirects/errors\n  async function handleAction(\n    request: Request,\n    location: Location,\n    submission: Submission,\n    matches: AgnosticDataRouteMatch[],\n    opts?: { replace?: boolean }\n  ): Promise<HandleActionResult> {\n    interruptActiveLoads();\n\n    // Put us in a submitting state\n    let navigation: NavigationStates[\"Submitting\"] = {\n      state: \"submitting\",\n      location,\n      ...submission,\n    };\n    updateState({ navigation });\n\n    // Call our action and get the result\n    let result: DataResult;\n    let actionMatch = getTargetMatch(matches, location);\n\n    if (!actionMatch.route.action) {\n      result = {\n        type: ResultType.error,\n        error: getInternalRouterError(405, {\n          method: request.method,\n          pathname: location.pathname,\n          routeId: actionMatch.route.id,\n        }),\n      };\n    } else {\n      result = await callLoaderOrAction(\n        \"action\",\n        request,\n        actionMatch,\n        matches,\n        router.basename\n      );\n\n      if (request.signal.aborted) {\n        return { shortCircuited: true };\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      let replace: boolean;\n      if (opts && opts.replace != null) {\n        replace = opts.replace;\n      } else {\n        // If the user didn't explicity indicate replace behavior, replace if\n        // we redirected to the exact same location we're currently at to avoid\n        // double back-buttons\n        replace =\n          result.location === state.location.pathname + state.location.search;\n      }\n      await startRedirectNavigation(state, result, { submission, replace });\n      return { shortCircuited: true };\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n\n      // By default, all submissions are REPLACE navigations, but if the\n      // action threw an error that'll be rendered in an errorElement, we fall\n      // back to PUSH so that the user can use the back button to get back to\n      // the pre-submission form location to try again\n      if ((opts && opts.replace) !== true) {\n        pendingAction = HistoryAction.Push;\n      }\n\n      return {\n        // Send back an empty object we can use to clear out any prior actionData\n        pendingActionData: {},\n        pendingActionError: { [boundaryMatch.route.id]: result.error },\n      };\n    }\n\n    if (isDeferredResult(result)) {\n      throw getInternalRouterError(400, { type: \"defer-action\" });\n    }\n\n    return {\n      pendingActionData: { [actionMatch.route.id]: result.data },\n    };\n  }\n\n  // Call all applicable loaders for the given matches, handling redirects,\n  // errors, etc.\n  async function handleLoaders(\n    request: Request,\n    location: Location,\n    matches: AgnosticDataRouteMatch[],\n    overrideNavigation?: Navigation,\n    submission?: Submission,\n    replace?: boolean,\n    pendingActionData?: RouteData,\n    pendingError?: RouteData\n  ): Promise<HandleLoadersResult> {\n    // Figure out the right navigation we want to use for data loading\n    let loadingNavigation = overrideNavigation;\n    if (!loadingNavigation) {\n      let navigation: NavigationStates[\"Loading\"] = {\n        state: \"loading\",\n        location,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n        ...submission,\n      };\n      loadingNavigation = navigation;\n    }\n\n    // If this was a redirect from an action we don't have a \"submission\" but\n    // we have it on the loading navigation so use that if available\n    let activeSubmission = submission\n      ? submission\n      : loadingNavigation.formMethod &&\n        loadingNavigation.formAction &&\n        loadingNavigation.formData &&\n        loadingNavigation.formEncType\n      ? {\n          formMethod: loadingNavigation.formMethod,\n          formAction: loadingNavigation.formAction,\n          formData: loadingNavigation.formData,\n          formEncType: loadingNavigation.formEncType,\n        }\n      : undefined;\n\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(\n      init.history,\n      state,\n      matches,\n      activeSubmission,\n      location,\n      isRevalidationRequired,\n      cancelledDeferredRoutes,\n      cancelledFetcherLoads,\n      pendingActionData,\n      pendingError,\n      fetchLoadMatches\n    );\n\n    // Cancel pending deferreds for no-longer-matched routes or routes we're\n    // about to reload.  Note that if this is an action reload we would have\n    // already cancelled all pending deferreds so this would be a no-op\n    cancelActiveDeferreds(\n      (routeId) =>\n        !(matches && matches.some((m) => m.route.id === routeId)) ||\n        (matchesToLoad && matchesToLoad.some((m) => m.route.id === routeId))\n    );\n\n    // Short circuit if we have no loaders to run\n    if (matchesToLoad.length === 0 && revalidatingFetchers.length === 0) {\n      completeNavigation(location, {\n        matches,\n        loaderData: {},\n        // Commit pending error if we're short circuiting\n        errors: pendingError || null,\n        ...(pendingActionData ? { actionData: pendingActionData } : {}),\n      });\n      return { shortCircuited: true };\n    }\n\n    // If this is an uninterrupted revalidation, we remain in our current idle\n    // state.  If not, we need to switch to our loading state and load data,\n    // preserving any new action data or existing action data (in the case of\n    // a revalidation interrupting an actionReload)\n    if (!isUninterruptedRevalidation) {\n      revalidatingFetchers.forEach((rf) => {\n        let fetcher = state.fetchers.get(rf.key);\n        let revalidatingFetcher: FetcherStates[\"Loading\"] = {\n          state: \"loading\",\n          data: fetcher && fetcher.data,\n          formMethod: undefined,\n          formAction: undefined,\n          formEncType: undefined,\n          formData: undefined,\n          \" _hasFetcherDoneAnything \": true,\n        };\n        state.fetchers.set(rf.key, revalidatingFetcher);\n      });\n      let actionData = pendingActionData || state.actionData;\n      updateState({\n        navigation: loadingNavigation,\n        ...(actionData\n          ? Object.keys(actionData).length === 0\n            ? { actionData: null }\n            : { actionData }\n          : {}),\n        ...(revalidatingFetchers.length > 0\n          ? { fetchers: new Map(state.fetchers) }\n          : {}),\n      });\n    }\n\n    pendingNavigationLoadId = ++incrementingLoadId;\n    revalidatingFetchers.forEach((rf) =>\n      fetchControllers.set(rf.key, pendingNavigationController!)\n    );\n\n    let { results, loaderResults, fetcherResults } =\n      await callLoadersAndMaybeResolveData(\n        state.matches,\n        matches,\n        matchesToLoad,\n        revalidatingFetchers,\n        request\n      );\n\n    if (request.signal.aborted) {\n      return { shortCircuited: true };\n    }\n\n    // Clean up _after_ loaders have completed.  Don't clean up if we short\n    // circuited because fetchControllers would have been aborted and\n    // reassigned to new controllers for the next navigation\n    revalidatingFetchers.forEach((rf) => fetchControllers.delete(rf.key));\n\n    // If any loaders returned a redirect Response, start a new REPLACE navigation\n    let redirect = findRedirect(results);\n    if (redirect) {\n      await startRedirectNavigation(state, redirect, { replace });\n      return { shortCircuited: true };\n    }\n\n    // Process and commit output from loaders\n    let { loaderData, errors } = processLoaderData(\n      state,\n      matches,\n      matchesToLoad,\n      loaderResults,\n      pendingError,\n      revalidatingFetchers,\n      fetcherResults,\n      activeDeferreds\n    );\n\n    // Wire up subscribers to update loaderData as promises settle\n    activeDeferreds.forEach((deferredData, routeId) => {\n      deferredData.subscribe((aborted) => {\n        // Note: No need to updateState here since the TrackedPromise on\n        // loaderData is stable across resolve/reject\n        // Remove this instance if we were aborted or if promises have settled\n        if (aborted || deferredData.done) {\n          activeDeferreds.delete(routeId);\n        }\n      });\n    });\n\n    markFetchRedirectsDone();\n    let didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);\n\n    return {\n      loaderData,\n      errors,\n      ...(didAbortFetchLoads || revalidatingFetchers.length > 0\n        ? { fetchers: new Map(state.fetchers) }\n        : {}),\n    };\n  }\n\n  function getFetcher<TData = any>(key: string): Fetcher<TData> {\n    return state.fetchers.get(key) || IDLE_FETCHER;\n  }\n\n  // Trigger a fetcher load/submit for the given fetcher key\n  function fetch(\n    key: string,\n    routeId: string,\n    href: string,\n    opts?: RouterFetchOptions\n  ) {\n    if (isServer) {\n      throw new Error(\n        \"router.fetch() was called during the server render, but it shouldn't be. \" +\n          \"You are likely calling a useFetcher() method in the body of your component. \" +\n          \"Try moving it to a useEffect or a callback.\"\n      );\n    }\n\n    if (fetchControllers.has(key)) abortFetcher(key);\n\n    let matches = matchRoutes(dataRoutes, href, init.basename);\n    if (!matches) {\n      setFetcherError(\n        key,\n        routeId,\n        getInternalRouterError(404, { pathname: href })\n      );\n      return;\n    }\n\n    let { path, submission } = normalizeNavigateOptions(href, opts, true);\n    let match = getTargetMatch(matches, path);\n\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n\n    if (submission && isMutationMethod(submission.formMethod)) {\n      handleFetcherAction(key, routeId, path, match, matches, submission);\n      return;\n    }\n\n    // Store off the match so we can call it's shouldRevalidate on subsequent\n    // revalidations\n    fetchLoadMatches.set(key, { routeId, path, match, matches });\n    handleFetcherLoader(key, routeId, path, match, matches, submission);\n  }\n\n  // Call the action for the matched fetcher.submit(), and then handle redirects,\n  // errors, and revalidation\n  async function handleFetcherAction(\n    key: string,\n    routeId: string,\n    path: string,\n    match: AgnosticDataRouteMatch,\n    requestMatches: AgnosticDataRouteMatch[],\n    submission: Submission\n  ) {\n    interruptActiveLoads();\n    fetchLoadMatches.delete(key);\n\n    if (!match.route.action) {\n      let error = getInternalRouterError(405, {\n        method: submission.formMethod,\n        pathname: path,\n        routeId: routeId,\n      });\n      setFetcherError(key, routeId, error);\n      return;\n    }\n\n    // Put this fetcher into it's submitting state\n    let existingFetcher = state.fetchers.get(key);\n    let fetcher: FetcherStates[\"Submitting\"] = {\n      state: \"submitting\",\n      ...submission,\n      data: existingFetcher && existingFetcher.data,\n      \" _hasFetcherDoneAnything \": true,\n    };\n    state.fetchers.set(key, fetcher);\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    // Call the action for the fetcher\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(\n      init.history,\n      path,\n      abortController.signal,\n      submission\n    );\n    fetchControllers.set(key, abortController);\n\n    let actionResult = await callLoaderOrAction(\n      \"action\",\n      fetchRequest,\n      match,\n      requestMatches,\n      router.basename\n    );\n\n    if (fetchRequest.signal.aborted) {\n      // We can delete this so long as we weren't aborted by ou our own fetcher\n      // re-submit which would have put _new_ controller is in fetchControllers\n      if (fetchControllers.get(key) === abortController) {\n        fetchControllers.delete(key);\n      }\n      return;\n    }\n\n    if (isRedirectResult(actionResult)) {\n      fetchControllers.delete(key);\n      fetchRedirectIds.add(key);\n      let loadingFetcher: FetcherStates[\"Loading\"] = {\n        state: \"loading\",\n        ...submission,\n        data: undefined,\n        \" _hasFetcherDoneAnything \": true,\n      };\n      state.fetchers.set(key, loadingFetcher);\n      updateState({ fetchers: new Map(state.fetchers) });\n\n      return startRedirectNavigation(state, actionResult, {\n        isFetchActionRedirect: true,\n      });\n    }\n\n    // Process any non-redirect errors thrown\n    if (isErrorResult(actionResult)) {\n      setFetcherError(key, routeId, actionResult.error);\n      return;\n    }\n\n    if (isDeferredResult(actionResult)) {\n      throw getInternalRouterError(400, { type: \"defer-action\" });\n    }\n\n    // Start the data load for current matches, or the next location if we're\n    // in the middle of a navigation\n    let nextLocation = state.navigation.location || state.location;\n    let revalidationRequest = createClientSideRequest(\n      init.history,\n\n      nextLocation,\n      abortController.signal\n    );\n    let matches =\n      state.navigation.state !== \"idle\"\n        ? matchRoutes(dataRoutes, state.navigation.location, init.basename)\n        : state.matches;\n\n    invariant(matches, \"Didn't find any matches after fetcher action\");\n\n    let loadId = ++incrementingLoadId;\n    fetchReloadIds.set(key, loadId);\n\n    let loadFetcher: FetcherStates[\"Loading\"] = {\n      state: \"loading\",\n      data: actionResult.data,\n      ...submission,\n      \" _hasFetcherDoneAnything \": true,\n    };\n    state.fetchers.set(key, loadFetcher);\n\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(\n      init.history,\n      state,\n      matches,\n      submission,\n      nextLocation,\n      isRevalidationRequired,\n      cancelledDeferredRoutes,\n      cancelledFetcherLoads,\n      { [match.route.id]: actionResult.data },\n      undefined, // No need to send through errors since we short circuit above\n      fetchLoadMatches\n    );\n\n    // Put all revalidating fetchers into the loading state, except for the\n    // current fetcher which we want to keep in it's current loading state which\n    // contains it's action submission info + action data\n    revalidatingFetchers\n      .filter((rf) => rf.key !== key)\n      .forEach((rf) => {\n        let staleKey = rf.key;\n        let existingFetcher = state.fetchers.get(staleKey);\n        let revalidatingFetcher: FetcherStates[\"Loading\"] = {\n          state: \"loading\",\n          data: existingFetcher && existingFetcher.data,\n          formMethod: undefined,\n          formAction: undefined,\n          formEncType: undefined,\n          formData: undefined,\n          \" _hasFetcherDoneAnything \": true,\n        };\n        state.fetchers.set(staleKey, revalidatingFetcher);\n        fetchControllers.set(staleKey, abortController);\n      });\n\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    let { results, loaderResults, fetcherResults } =\n      await callLoadersAndMaybeResolveData(\n        state.matches,\n        matches,\n        matchesToLoad,\n        revalidatingFetchers,\n        revalidationRequest\n      );\n\n    if (abortController.signal.aborted) {\n      return;\n    }\n\n    fetchReloadIds.delete(key);\n    fetchControllers.delete(key);\n    revalidatingFetchers.forEach((r) => fetchControllers.delete(r.key));\n\n    let redirect = findRedirect(results);\n    if (redirect) {\n      return startRedirectNavigation(state, redirect);\n    }\n\n    // Process and commit output from loaders\n    let { loaderData, errors } = processLoaderData(\n      state,\n      state.matches,\n      matchesToLoad,\n      loaderResults,\n      undefined,\n      revalidatingFetchers,\n      fetcherResults,\n      activeDeferreds\n    );\n\n    let doneFetcher: FetcherStates[\"Idle\"] = {\n      state: \"idle\",\n      data: actionResult.data,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      \" _hasFetcherDoneAnything \": true,\n    };\n    state.fetchers.set(key, doneFetcher);\n\n    let didAbortFetchLoads = abortStaleFetchLoads(loadId);\n\n    // If we are currently in a navigation loading state and this fetcher is\n    // more recent than the navigation, we want the newer data so abort the\n    // navigation and complete it with the fetcher data\n    if (\n      state.navigation.state === \"loading\" &&\n      loadId > pendingNavigationLoadId\n    ) {\n      invariant(pendingAction, \"Expected pending action\");\n      pendingNavigationController && pendingNavigationController.abort();\n\n      completeNavigation(state.navigation.location, {\n        matches,\n        loaderData,\n        errors,\n        fetchers: new Map(state.fetchers),\n      });\n    } else {\n      // otherwise just update with the fetcher data, preserving any existing\n      // loaderData for loaders that did not need to reload.  We have to\n      // manually merge here since we aren't going through completeNavigation\n      updateState({\n        errors,\n        loaderData: mergeLoaderData(\n          state.loaderData,\n          loaderData,\n          matches,\n          errors\n        ),\n        ...(didAbortFetchLoads ? { fetchers: new Map(state.fetchers) } : {}),\n      });\n      isRevalidationRequired = false;\n    }\n  }\n\n  // Call the matched loader for fetcher.load(), handling redirects, errors, etc.\n  async function handleFetcherLoader(\n    key: string,\n    routeId: string,\n    path: string,\n    match: AgnosticDataRouteMatch,\n    matches: AgnosticDataRouteMatch[],\n    submission?: Submission\n  ) {\n    let existingFetcher = state.fetchers.get(key);\n    // Put this fetcher into it's loading state\n    let loadingFetcher: FetcherStates[\"Loading\"] = {\n      state: \"loading\",\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      ...submission,\n      data: existingFetcher && existingFetcher.data,\n      \" _hasFetcherDoneAnything \": true,\n    };\n    state.fetchers.set(key, loadingFetcher);\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    // Call the loader for this fetcher route match\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(\n      init.history,\n      path,\n      abortController.signal\n    );\n    fetchControllers.set(key, abortController);\n    let result: DataResult = await callLoaderOrAction(\n      \"loader\",\n      fetchRequest,\n      match,\n      matches,\n      router.basename\n    );\n\n    // Deferred isn't supported for fetcher loads, await everything and treat it\n    // as a normal load.  resolveDeferredData will return undefined if this\n    // fetcher gets aborted, so we just leave result untouched and short circuit\n    // below if that happens\n    if (isDeferredResult(result)) {\n      result =\n        (await resolveDeferredData(result, fetchRequest.signal, true)) ||\n        result;\n    }\n\n    // We can delete this so long as we weren't aborted by ou our own fetcher\n    // re-load which would have put _new_ controller is in fetchControllers\n    if (fetchControllers.get(key) === abortController) {\n      fetchControllers.delete(key);\n    }\n\n    if (fetchRequest.signal.aborted) {\n      return;\n    }\n\n    // If the loader threw a redirect Response, start a new REPLACE navigation\n    if (isRedirectResult(result)) {\n      await startRedirectNavigation(state, result);\n      return;\n    }\n\n    // Process any non-redirect errors thrown\n    if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, routeId);\n      state.fetchers.delete(key);\n      // TODO: In remix, this would reset to IDLE_NAVIGATION if it was a catch -\n      // do we need to behave any differently with our non-redirect errors?\n      // What if it was a non-redirect Response?\n      updateState({\n        fetchers: new Map(state.fetchers),\n        errors: {\n          [boundaryMatch.route.id]: result.error,\n        },\n      });\n      return;\n    }\n\n    invariant(!isDeferredResult(result), \"Unhandled fetcher deferred data\");\n\n    // Put the fetcher back into an idle state\n    let doneFetcher: FetcherStates[\"Idle\"] = {\n      state: \"idle\",\n      data: result.data,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      \" _hasFetcherDoneAnything \": true,\n    };\n    state.fetchers.set(key, doneFetcher);\n    updateState({ fetchers: new Map(state.fetchers) });\n  }\n\n  /**\n   * Utility function to handle redirects returned from an action or loader.\n   * Normally, a redirect \"replaces\" the navigation that triggered it.  So, for\n   * example:\n   *\n   *  - user is on /a\n   *  - user clicks a link to /b\n   *  - loader for /b redirects to /c\n   *\n   * In a non-JS app the browser would track the in-flight navigation to /b and\n   * then replace it with /c when it encountered the redirect response.  In\n   * the end it would only ever update the URL bar with /c.\n   *\n   * In client-side routing using pushState/replaceState, we aim to emulate\n   * this behavior and we also do not update history until the end of the\n   * navigation (including processed redirects).  This means that we never\n   * actually touch history until we've processed redirects, so we just use\n   * the history action from the original navigation (PUSH or REPLACE).\n   */\n  async function startRedirectNavigation(\n    state: RouterState,\n    redirect: RedirectResult,\n    {\n      submission,\n      replace,\n      isFetchActionRedirect,\n    }: {\n      submission?: Submission;\n      replace?: boolean;\n      isFetchActionRedirect?: boolean;\n    } = {}\n  ) {\n    if (redirect.revalidate) {\n      isRevalidationRequired = true;\n    }\n\n    let redirectLocation = createLocation(\n      state.location,\n      redirect.location,\n      // TODO: This can be removed once we get rid of useTransition in Remix v2\n      {\n        _isRedirect: true,\n        ...(isFetchActionRedirect ? { _isFetchActionRedirect: true } : {}),\n      }\n    );\n    invariant(\n      redirectLocation,\n      \"Expected a location on the redirect navigation\"\n    );\n\n    // Check if this an external redirect that goes to a new origin\n    if (isBrowser && typeof window?.location !== \"undefined\") {\n      let newOrigin = init.history.createURL(redirect.location).origin;\n      if (window.location.origin !== newOrigin) {\n        if (replace) {\n          window.location.replace(redirect.location);\n        } else {\n          window.location.assign(redirect.location);\n        }\n        return;\n      }\n    }\n\n    // There's no need to abort on redirects, since we don't detect the\n    // redirect until the action/loaders have settled\n    pendingNavigationController = null;\n\n    let redirectHistoryAction =\n      replace === true ? HistoryAction.Replace : HistoryAction.Push;\n\n    // Use the incoming submission if provided, fallback on the active one in\n    // state.navigation\n    let { formMethod, formAction, formEncType, formData } = state.navigation;\n    if (!submission && formMethod && formAction && formData && formEncType) {\n      submission = {\n        formMethod,\n        formAction,\n        formEncType,\n        formData,\n      };\n    }\n\n    // If this was a 307/308 submission we want to preserve the HTTP method and\n    // re-submit the GET/POST/PUT/PATCH/DELETE as a submission navigation to the\n    // redirected location\n    if (\n      redirectPreserveMethodStatusCodes.has(redirect.status) &&\n      submission &&\n      isMutationMethod(submission.formMethod)\n    ) {\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        submission: {\n          ...submission,\n          formAction: redirect.location,\n        },\n        // Preserve this flag across redirects\n        preventScrollReset: pendingPreventScrollReset,\n      });\n    } else {\n      // Otherwise, we kick off a new loading navigation, preserving the\n      // submission info for the duration of this navigation\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        overrideNavigation: {\n          state: \"loading\",\n          location: redirectLocation,\n          formMethod: submission ? submission.formMethod : undefined,\n          formAction: submission ? submission.formAction : undefined,\n          formEncType: submission ? submission.formEncType : undefined,\n          formData: submission ? submission.formData : undefined,\n        },\n        // Preserve this flag across redirects\n        preventScrollReset: pendingPreventScrollReset,\n      });\n    }\n  }\n\n  async function callLoadersAndMaybeResolveData(\n    currentMatches: AgnosticDataRouteMatch[],\n    matches: AgnosticDataRouteMatch[],\n    matchesToLoad: AgnosticDataRouteMatch[],\n    fetchersToLoad: RevalidatingFetcher[],\n    request: Request\n  ) {\n    // Call all navigation loaders and revalidating fetcher loaders in parallel,\n    // then slice off the results into separate arrays so we can handle them\n    // accordingly\n    let results = await Promise.all([\n      ...matchesToLoad.map((match) =>\n        callLoaderOrAction(\"loader\", request, match, matches, router.basename)\n      ),\n      ...fetchersToLoad.map((f) =>\n        callLoaderOrAction(\n          \"loader\",\n          createClientSideRequest(init.history, f.path, request.signal),\n          f.match,\n          f.matches,\n          router.basename\n        )\n      ),\n    ]);\n    let loaderResults = results.slice(0, matchesToLoad.length);\n    let fetcherResults = results.slice(matchesToLoad.length);\n\n    await Promise.all([\n      resolveDeferredResults(\n        currentMatches,\n        matchesToLoad,\n        loaderResults,\n        request.signal,\n        false,\n        state.loaderData\n      ),\n      resolveDeferredResults(\n        currentMatches,\n        fetchersToLoad.map((f) => f.match),\n        fetcherResults,\n        request.signal,\n        true\n      ),\n    ]);\n\n    return { results, loaderResults, fetcherResults };\n  }\n\n  function interruptActiveLoads() {\n    // Every interruption triggers a revalidation\n    isRevalidationRequired = true;\n\n    // Cancel pending route-level deferreds and mark cancelled routes for\n    // revalidation\n    cancelledDeferredRoutes.push(...cancelActiveDeferreds());\n\n    // Abort in-flight fetcher loads\n    fetchLoadMatches.forEach((_, key) => {\n      if (fetchControllers.has(key)) {\n        cancelledFetcherLoads.push(key);\n        abortFetcher(key);\n      }\n    });\n  }\n\n  function setFetcherError(key: string, routeId: string, error: any) {\n    let boundaryMatch = findNearestBoundary(state.matches, routeId);\n    deleteFetcher(key);\n    updateState({\n      errors: {\n        [boundaryMatch.route.id]: error,\n      },\n      fetchers: new Map(state.fetchers),\n    });\n  }\n\n  function deleteFetcher(key: string): void {\n    if (fetchControllers.has(key)) abortFetcher(key);\n    fetchLoadMatches.delete(key);\n    fetchReloadIds.delete(key);\n    fetchRedirectIds.delete(key);\n    state.fetchers.delete(key);\n  }\n\n  function abortFetcher(key: string) {\n    let controller = fetchControllers.get(key);\n    invariant(controller, `Expected fetch controller: ${key}`);\n    controller.abort();\n    fetchControllers.delete(key);\n  }\n\n  function markFetchersDone(keys: string[]) {\n    for (let key of keys) {\n      let fetcher = getFetcher(key);\n      let doneFetcher: FetcherStates[\"Idle\"] = {\n        state: \"idle\",\n        data: fetcher.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n        \" _hasFetcherDoneAnything \": true,\n      };\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  function markFetchRedirectsDone(): void {\n    let doneKeys = [];\n    for (let key of fetchRedirectIds) {\n      let fetcher = state.fetchers.get(key);\n      invariant(fetcher, `Expected fetcher: ${key}`);\n      if (fetcher.state === \"loading\") {\n        fetchRedirectIds.delete(key);\n        doneKeys.push(key);\n      }\n    }\n    markFetchersDone(doneKeys);\n  }\n\n  function abortStaleFetchLoads(landedId: number): boolean {\n    let yeetedKeys = [];\n    for (let [key, id] of fetchReloadIds) {\n      if (id < landedId) {\n        let fetcher = state.fetchers.get(key);\n        invariant(fetcher, `Expected fetcher: ${key}`);\n        if (fetcher.state === \"loading\") {\n          abortFetcher(key);\n          fetchReloadIds.delete(key);\n          yeetedKeys.push(key);\n        }\n      }\n    }\n    markFetchersDone(yeetedKeys);\n    return yeetedKeys.length > 0;\n  }\n\n  function getBlocker(key: string, fn: BlockerFunction) {\n    let blocker: Blocker = state.blockers.get(key) || IDLE_BLOCKER;\n\n    if (blockerFunctions.get(key) !== fn) {\n      blockerFunctions.set(key, fn);\n      if (activeBlocker == null) {\n        // This is now the active blocker\n        activeBlocker = key;\n      } else if (key !== activeBlocker) {\n        warning(false, \"A router only supports one blocker at a time\");\n      }\n    }\n\n    return blocker;\n  }\n\n  function deleteBlocker(key: string) {\n    state.blockers.delete(key);\n    blockerFunctions.delete(key);\n    if (activeBlocker === key) {\n      activeBlocker = null;\n    }\n  }\n\n  // Utility function to update blockers, ensuring valid state transitions\n  function updateBlocker(key: string, newBlocker: Blocker) {\n    let blocker = state.blockers.get(key) || IDLE_BLOCKER;\n\n    // Poor mans state machine :)\n    // https://mermaid.live/edit#pako:eNqVkc9OwzAMxl8l8nnjAYrEtDIOHEBIgwvKJTReGy3_lDpIqO27k6awMG0XcrLlnz87nwdonESogKXXBuE79rq75XZO3-yHds0RJVuv70YrPlUrCEe2HfrORS3rubqZfuhtpg5C9wk5tZ4VKcRUq88q9Z8RS0-48cE1iHJkL0ugbHuFLus9L6spZy8nX9MP2CNdomVaposqu3fGayT8T8-jJQwhepo_UtpgBQaDEUom04dZhAN1aJBDlUKJBxE1ceB2Smj0Mln-IBW5AFU2dwUiktt_2Qaq2dBfaKdEup85UV7Yd-dKjlnkabl2Pvr0DTkTreM\n    invariant(\n      (blocker.state === \"unblocked\" && newBlocker.state === \"blocked\") ||\n        (blocker.state === \"blocked\" && newBlocker.state === \"blocked\") ||\n        (blocker.state === \"blocked\" && newBlocker.state === \"proceeding\") ||\n        (blocker.state === \"blocked\" && newBlocker.state === \"unblocked\") ||\n        (blocker.state === \"proceeding\" && newBlocker.state === \"unblocked\"),\n      `Invalid blocker state transition: ${blocker.state} -> ${newBlocker.state}`\n    );\n\n    state.blockers.set(key, newBlocker);\n    updateState({ blockers: new Map(state.blockers) });\n  }\n\n  function shouldBlockNavigation({\n    currentLocation,\n    nextLocation,\n    historyAction,\n  }: {\n    currentLocation: Location;\n    nextLocation: Location;\n    historyAction: HistoryAction;\n  }): string | undefined {\n    if (activeBlocker == null) {\n      return;\n    }\n\n    // We only allow a single blocker at the moment.  This will need to be\n    // updated if we enhance to support multiple blockers in the future\n    let blockerFunction = blockerFunctions.get(activeBlocker);\n    invariant(\n      blockerFunction,\n      \"Could not find a function for the active blocker\"\n    );\n    let blocker = state.blockers.get(activeBlocker);\n\n    if (blocker && blocker.state === \"proceeding\") {\n      // If the blocker is currently proceeding, we don't need to re-check\n      // it and can let this navigation continue\n      return;\n    }\n\n    // At this point, we know we're unblocked/blocked so we need to check the\n    // user-provided blocker function\n    if (blockerFunction({ currentLocation, nextLocation, historyAction })) {\n      return activeBlocker;\n    }\n  }\n\n  function cancelActiveDeferreds(\n    predicate?: (routeId: string) => boolean\n  ): string[] {\n    let cancelledRouteIds: string[] = [];\n    activeDeferreds.forEach((dfd, routeId) => {\n      if (!predicate || predicate(routeId)) {\n        // Cancel the deferred - but do not remove from activeDeferreds here -\n        // we rely on the subscribers to do that so our tests can assert proper\n        // cleanup via _internalActiveDeferreds\n        dfd.cancel();\n        cancelledRouteIds.push(routeId);\n        activeDeferreds.delete(routeId);\n      }\n    });\n    return cancelledRouteIds;\n  }\n\n  // Opt in to capturing and reporting scroll positions during navigations,\n  // used by the <ScrollRestoration> component\n  function enableScrollRestoration(\n    positions: Record<string, number>,\n    getPosition: GetScrollPositionFunction,\n    getKey?: GetScrollRestorationKeyFunction\n  ) {\n    savedScrollPositions = positions;\n    getScrollPosition = getPosition;\n    getScrollRestorationKey = getKey || ((location) => location.key);\n\n    // Perform initial hydration scroll restoration, since we miss the boat on\n    // the initial updateState() because we've not yet rendered <ScrollRestoration/>\n    // and therefore have no savedScrollPositions available\n    if (!initialScrollRestored && state.navigation === IDLE_NAVIGATION) {\n      initialScrollRestored = true;\n      let y = getSavedScrollPosition(state.location, state.matches);\n      if (y != null) {\n        updateState({ restoreScrollPosition: y });\n      }\n    }\n\n    return () => {\n      savedScrollPositions = null;\n      getScrollPosition = null;\n      getScrollRestorationKey = null;\n    };\n  }\n\n  function saveScrollPosition(\n    location: Location,\n    matches: AgnosticDataRouteMatch[]\n  ): void {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      let userMatches = matches.map((m) =>\n        createUseMatchesMatch(m, state.loaderData)\n      );\n      let key = getScrollRestorationKey(location, userMatches) || location.key;\n      savedScrollPositions[key] = getScrollPosition();\n    }\n  }\n\n  function getSavedScrollPosition(\n    location: Location,\n    matches: AgnosticDataRouteMatch[]\n  ): number | null {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      let userMatches = matches.map((m) =>\n        createUseMatchesMatch(m, state.loaderData)\n      );\n      let key = getScrollRestorationKey(location, userMatches) || location.key;\n      let y = savedScrollPositions[key];\n      if (typeof y === \"number\") {\n        return y;\n      }\n    }\n    return null;\n  }\n\n  router = {\n    get basename() {\n      return init.basename;\n    },\n    get state() {\n      return state;\n    },\n    get routes() {\n      return dataRoutes;\n    },\n    initialize,\n    subscribe,\n    enableScrollRestoration,\n    navigate,\n    fetch,\n    revalidate,\n    // Passthrough to history-aware createHref used by useHref so we get proper\n    // hash-aware URLs in DOM paths\n    createHref: (to: To) => init.history.createHref(to),\n    encodeLocation: (to: To) => init.history.encodeLocation(to),\n    getFetcher,\n    deleteFetcher,\n    dispose,\n    getBlocker,\n    deleteBlocker,\n    _internalFetchControllers: fetchControllers,\n    _internalActiveDeferreds: activeDeferreds,\n  };\n\n  return router;\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region createStaticHandler\n////////////////////////////////////////////////////////////////////////////////\n\nexport const UNSAFE_DEFERRED_SYMBOL = Symbol(\"deferred\");\n\nexport function createStaticHandler(\n  routes: AgnosticRouteObject[],\n  opts?: {\n    basename?: string;\n  }\n): StaticHandler {\n  invariant(\n    routes.length > 0,\n    \"You must provide a non-empty routes array to createStaticHandler\"\n  );\n\n  let dataRoutes = convertRoutesToDataRoutes(routes);\n  let basename = (opts ? opts.basename : null) || \"/\";\n\n  /**\n   * The query() method is intended for document requests, in which we want to\n   * call an optional action and potentially multiple loaders for all nested\n   * routes.  It returns a StaticHandlerContext object, which is very similar\n   * to the router state (location, loaderData, actionData, errors, etc.) and\n   * also adds SSR-specific information such as the statusCode and headers\n   * from action/loaders Responses.\n   *\n   * It _should_ never throw and should report all errors through the\n   * returned context.errors object, properly associating errors to their error\n   * boundary.  Additionally, it tracks _deepestRenderedBoundaryId which can be\n   * used to emulate React error boundaries during SSr by performing a second\n   * pass only down to the boundaryId.\n   *\n   * The one exception where we do not return a StaticHandlerContext is when a\n   * redirect response is returned or thrown from any action/loader.  We\n   * propagate that out and return the raw Response so the HTTP server can\n   * return it directly.\n   */\n  async function query(\n    request: Request,\n    { requestContext }: { requestContext?: unknown } = {}\n  ): Promise<StaticHandlerContext | Response> {\n    let url = new URL(request.url);\n    let method = request.method.toLowerCase();\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"head\") {\n      let error = getInternalRouterError(405, { method });\n      let { matches: methodNotAllowedMatches, route } =\n        getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: methodNotAllowedMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error,\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null,\n      };\n    } else if (!matches) {\n      let error = getInternalRouterError(404, { pathname: location.pathname });\n      let { matches: notFoundMatches, route } =\n        getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: notFoundMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error,\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null,\n      };\n    }\n\n    let result = await queryImpl(request, location, matches, requestContext);\n    if (isResponse(result)) {\n      return result;\n    }\n\n    // When returning StaticHandlerContext, we patch back in the location here\n    // since we need it for React Context.  But this helps keep our submit and\n    // loadRouteData operating on a Request instead of a Location\n    return { location, basename, ...result };\n  }\n\n  /**\n   * The queryRoute() method is intended for targeted route requests, either\n   * for fetch ?_data requests or resource route requests.  In this case, we\n   * are only ever calling a single action or loader, and we are returning the\n   * returned value directly.  In most cases, this will be a Response returned\n   * from the action/loader, but it may be a primitive or other value as well -\n   * and in such cases the calling context should handle that accordingly.\n   *\n   * We do respect the throw/return differentiation, so if an action/loader\n   * throws, then this method will throw the value.  This is important so we\n   * can do proper boundary identification in Remix where a thrown Response\n   * must go to the Catch Boundary but a returned Response is happy-path.\n   *\n   * One thing to note is that any Router-initiated Errors that make sense\n   * to associate with a status code will be thrown as an ErrorResponse\n   * instance which include the raw Error, such that the calling context can\n   * serialize the error as they see fit while including the proper response\n   * code.  Examples here are 404 and 405 errors that occur prior to reaching\n   * any user-defined loaders.\n   */\n  async function queryRoute(\n    request: Request,\n    {\n      routeId,\n      requestContext,\n    }: { requestContext?: unknown; routeId?: string } = {}\n  ): Promise<any> {\n    let url = new URL(request.url);\n    let method = request.method.toLowerCase();\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"head\" && method !== \"options\") {\n      throw getInternalRouterError(405, { method });\n    } else if (!matches) {\n      throw getInternalRouterError(404, { pathname: location.pathname });\n    }\n\n    let match = routeId\n      ? matches.find((m) => m.route.id === routeId)\n      : getTargetMatch(matches, location);\n\n    if (routeId && !match) {\n      throw getInternalRouterError(403, {\n        pathname: location.pathname,\n        routeId,\n      });\n    } else if (!match) {\n      // This should never hit I don't think?\n      throw getInternalRouterError(404, { pathname: location.pathname });\n    }\n\n    let result = await queryImpl(\n      request,\n      location,\n      matches,\n      requestContext,\n      match\n    );\n    if (isResponse(result)) {\n      return result;\n    }\n\n    let error = result.errors ? Object.values(result.errors)[0] : undefined;\n    if (error !== undefined) {\n      // If we got back result.errors, that means the loader/action threw\n      // _something_ that wasn't a Response, but it's not guaranteed/required\n      // to be an `instanceof Error` either, so we have to use throw here to\n      // preserve the \"error\" state outside of queryImpl.\n      throw error;\n    }\n\n    // Pick off the right state value to return\n    if (result.actionData) {\n      return Object.values(result.actionData)[0];\n    }\n\n    if (result.loaderData) {\n      let data = Object.values(result.loaderData)[0];\n      if (result.activeDeferreds?.[match.route.id]) {\n        data[UNSAFE_DEFERRED_SYMBOL] = result.activeDeferreds[match.route.id];\n      }\n      return data;\n    }\n\n    return undefined;\n  }\n\n  async function queryImpl(\n    request: Request,\n    location: Location,\n    matches: AgnosticDataRouteMatch[],\n    requestContext: unknown,\n    routeMatch?: AgnosticDataRouteMatch\n  ): Promise<Omit<StaticHandlerContext, \"location\" | \"basename\"> | Response> {\n    invariant(\n      request.signal,\n      \"query()/queryRoute() requests must contain an AbortController signal\"\n    );\n\n    try {\n      if (isMutationMethod(request.method.toLowerCase())) {\n        let result = await submit(\n          request,\n          matches,\n          routeMatch || getTargetMatch(matches, location),\n          requestContext,\n          routeMatch != null\n        );\n        return result;\n      }\n\n      let result = await loadRouteData(\n        request,\n        matches,\n        requestContext,\n        routeMatch\n      );\n      return isResponse(result)\n        ? result\n        : {\n            ...result,\n            actionData: null,\n            actionHeaders: {},\n          };\n    } catch (e) {\n      // If the user threw/returned a Response in callLoaderOrAction, we throw\n      // it to bail out and then return or throw here based on whether the user\n      // returned or threw\n      if (isQueryRouteResponse(e)) {\n        if (e.type === ResultType.error && !isRedirectResponse(e.response)) {\n          throw e.response;\n        }\n        return e.response;\n      }\n      // Redirects are always returned since they don't propagate to catch\n      // boundaries\n      if (isRedirectResponse(e)) {\n        return e;\n      }\n      throw e;\n    }\n  }\n\n  async function submit(\n    request: Request,\n    matches: AgnosticDataRouteMatch[],\n    actionMatch: AgnosticDataRouteMatch,\n    requestContext: unknown,\n    isRouteRequest: boolean\n  ): Promise<Omit<StaticHandlerContext, \"location\" | \"basename\"> | Response> {\n    let result: DataResult;\n\n    if (!actionMatch.route.action) {\n      let error = getInternalRouterError(405, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: actionMatch.route.id,\n      });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error,\n      };\n    } else {\n      result = await callLoaderOrAction(\n        \"action\",\n        request,\n        actionMatch,\n        matches,\n        basename,\n        true,\n        isRouteRequest,\n        requestContext\n      );\n\n      if (request.signal.aborted) {\n        let method = isRouteRequest ? \"queryRoute\" : \"query\";\n        throw new Error(`${method}() call aborted`);\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      // Uhhhh - this should never happen, we should always throw these from\n      // callLoaderOrAction, but the type narrowing here keeps TS happy and we\n      // can get back on the \"throw all redirect responses\" train here should\n      // this ever happen :/\n      throw new Response(null, {\n        status: result.status,\n        headers: {\n          Location: result.location,\n        },\n      });\n    }\n\n    if (isDeferredResult(result)) {\n      let error = getInternalRouterError(400, { type: \"defer-action\" });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error,\n      };\n    }\n\n    if (isRouteRequest) {\n      // Note: This should only be non-Response values if we get here, since\n      // isRouteRequest should throw any Response received in callLoaderOrAction\n      if (isErrorResult(result)) {\n        throw result.error;\n      }\n\n      return {\n        matches: [actionMatch],\n        loaderData: {},\n        actionData: { [actionMatch.route.id]: result.data },\n        errors: null,\n        // Note: statusCode + headers are unused here since queryRoute will\n        // return the raw Response or value\n        statusCode: 200,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null,\n      };\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n      let context = await loadRouteData(\n        request,\n        matches,\n        requestContext,\n        undefined,\n        {\n          [boundaryMatch.route.id]: result.error,\n        }\n      );\n\n      // action status codes take precedence over loader status codes\n      return {\n        ...context,\n        statusCode: isRouteErrorResponse(result.error)\n          ? result.error.status\n          : 500,\n        actionData: null,\n        actionHeaders: {\n          ...(result.headers ? { [actionMatch.route.id]: result.headers } : {}),\n        },\n      };\n    }\n\n    // Create a GET request for the loaders\n    let loaderRequest = new Request(request.url, {\n      headers: request.headers,\n      redirect: request.redirect,\n      signal: request.signal,\n    });\n    let context = await loadRouteData(loaderRequest, matches, requestContext);\n\n    return {\n      ...context,\n      // action status codes take precedence over loader status codes\n      ...(result.statusCode ? { statusCode: result.statusCode } : {}),\n      actionData: {\n        [actionMatch.route.id]: result.data,\n      },\n      actionHeaders: {\n        ...(result.headers ? { [actionMatch.route.id]: result.headers } : {}),\n      },\n    };\n  }\n\n  async function loadRouteData(\n    request: Request,\n    matches: AgnosticDataRouteMatch[],\n    requestContext: unknown,\n    routeMatch?: AgnosticDataRouteMatch,\n    pendingActionError?: RouteData\n  ): Promise<\n    | Omit<\n        StaticHandlerContext,\n        \"location\" | \"basename\" | \"actionData\" | \"actionHeaders\"\n      >\n    | Response\n  > {\n    let isRouteRequest = routeMatch != null;\n\n    // Short circuit if we have no loaders to run (queryRoute())\n    if (isRouteRequest && !routeMatch?.route.loader) {\n      throw getInternalRouterError(400, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: routeMatch?.route.id,\n      });\n    }\n\n    let requestMatches = routeMatch\n      ? [routeMatch]\n      : getLoaderMatchesUntilBoundary(\n          matches,\n          Object.keys(pendingActionError || {})[0]\n        );\n    let matchesToLoad = requestMatches.filter((m) => m.route.loader);\n\n    // Short circuit if we have no loaders to run (query())\n    if (matchesToLoad.length === 0) {\n      return {\n        matches,\n        // Add a null for all matched routes for proper revalidation on the client\n        loaderData: matches.reduce(\n          (acc, m) => Object.assign(acc, { [m.route.id]: null }),\n          {}\n        ),\n        errors: pendingActionError || null,\n        statusCode: 200,\n        loaderHeaders: {},\n        activeDeferreds: null,\n      };\n    }\n\n    let results = await Promise.all([\n      ...matchesToLoad.map((match) =>\n        callLoaderOrAction(\n          \"loader\",\n          request,\n          match,\n          matches,\n          basename,\n          true,\n          isRouteRequest,\n          requestContext\n        )\n      ),\n    ]);\n\n    if (request.signal.aborted) {\n      let method = isRouteRequest ? \"queryRoute\" : \"query\";\n      throw new Error(`${method}() call aborted`);\n    }\n\n    // Process and commit output from loaders\n    let activeDeferreds = new Map<string, DeferredData>();\n    let context = processRouteLoaderData(\n      matches,\n      matchesToLoad,\n      results,\n      pendingActionError,\n      activeDeferreds\n    );\n\n    // Add a null for any non-loader matches for proper revalidation on the client\n    let executedLoaders = new Set<string>(\n      matchesToLoad.map((match) => match.route.id)\n    );\n    matches.forEach((match) => {\n      if (!executedLoaders.has(match.route.id)) {\n        context.loaderData[match.route.id] = null;\n      }\n    });\n\n    return {\n      ...context,\n      matches,\n      activeDeferreds:\n        activeDeferreds.size > 0\n          ? Object.fromEntries(activeDeferreds.entries())\n          : null,\n    };\n  }\n\n  return {\n    dataRoutes,\n    query,\n    queryRoute,\n  };\n}\n\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Helpers\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Given an existing StaticHandlerContext and an error thrown at render time,\n * provide an updated StaticHandlerContext suitable for a second SSR render\n */\nexport function getStaticContextFromError(\n  routes: AgnosticDataRouteObject[],\n  context: StaticHandlerContext,\n  error: any\n) {\n  let newContext: StaticHandlerContext = {\n    ...context,\n    statusCode: 500,\n    errors: {\n      [context._deepestRenderedBoundaryId || routes[0].id]: error,\n    },\n  };\n  return newContext;\n}\n\nfunction isSubmissionNavigation(\n  opts: RouterNavigateOptions\n): opts is SubmissionNavigateOptions {\n  return opts != null && \"formData\" in opts;\n}\n\n// Normalize navigation options by converting formMethod=GET formData objects to\n// URLSearchParams so they behave identically to links with query params\nfunction normalizeNavigateOptions(\n  to: To,\n  opts?: RouterNavigateOptions,\n  isFetcher = false\n): {\n  path: string;\n  submission?: Submission;\n  error?: ErrorResponse;\n} {\n  let path = typeof to === \"string\" ? to : createPath(to);\n\n  // Return location verbatim on non-submission navigations\n  if (!opts || !isSubmissionNavigation(opts)) {\n    return { path };\n  }\n\n  if (opts.formMethod && !isValidMethod(opts.formMethod)) {\n    return {\n      path,\n      error: getInternalRouterError(405, { method: opts.formMethod }),\n    };\n  }\n\n  // Create a Submission on non-GET navigations\n  let submission: Submission | undefined;\n  if (opts.formData) {\n    submission = {\n      formMethod: opts.formMethod || \"get\",\n      formAction: stripHashFromPath(path),\n      formEncType:\n        (opts && opts.formEncType) || \"application/x-www-form-urlencoded\",\n      formData: opts.formData,\n    };\n\n    if (isMutationMethod(submission.formMethod)) {\n      return { path, submission };\n    }\n  }\n\n  // Flatten submission onto URLSearchParams for GET submissions\n  let parsedPath = parsePath(path);\n  let searchParams = convertFormDataToSearchParams(opts.formData);\n  // Since fetcher GET submissions only run a single loader (as opposed to\n  // navigation GET submissions which run all loaders), we need to preserve\n  // any incoming ?index params\n  if (isFetcher && parsedPath.search && hasNakedIndexQuery(parsedPath.search)) {\n    searchParams.append(\"index\", \"\");\n  }\n  parsedPath.search = `?${searchParams}`;\n\n  return { path: createPath(parsedPath), submission };\n}\n\n// Filter out all routes below any caught error as they aren't going to\n// render so we don't need to load them\nfunction getLoaderMatchesUntilBoundary(\n  matches: AgnosticDataRouteMatch[],\n  boundaryId?: string\n) {\n  let boundaryMatches = matches;\n  if (boundaryId) {\n    let index = matches.findIndex((m) => m.route.id === boundaryId);\n    if (index >= 0) {\n      boundaryMatches = matches.slice(0, index);\n    }\n  }\n  return boundaryMatches;\n}\n\nfunction getMatchesToLoad(\n  history: History,\n  state: RouterState,\n  matches: AgnosticDataRouteMatch[],\n  submission: Submission | undefined,\n  location: Location,\n  isRevalidationRequired: boolean,\n  cancelledDeferredRoutes: string[],\n  cancelledFetcherLoads: string[],\n  pendingActionData?: RouteData,\n  pendingError?: RouteData,\n  fetchLoadMatches?: Map<string, FetchLoadMatch>\n): [AgnosticDataRouteMatch[], RevalidatingFetcher[]] {\n  let actionResult = pendingError\n    ? Object.values(pendingError)[0]\n    : pendingActionData\n    ? Object.values(pendingActionData)[0]\n    : undefined;\n\n  let currentUrl = history.createURL(state.location);\n  let nextUrl = history.createURL(location);\n\n  let defaultShouldRevalidate =\n    // Forced revalidation due to submission, useRevalidate, or X-Remix-Revalidate\n    isRevalidationRequired ||\n    // Clicked the same link, resubmitted a GET form\n    currentUrl.toString() === nextUrl.toString() ||\n    // Search params affect all loaders\n    currentUrl.search !== nextUrl.search;\n\n  // Pick navigation matches that are net-new or qualify for revalidation\n  let boundaryId = pendingError ? Object.keys(pendingError)[0] : undefined;\n  let boundaryMatches = getLoaderMatchesUntilBoundary(matches, boundaryId);\n\n  let navigationMatches = boundaryMatches.filter((match, index) => {\n    if (match.route.loader == null) {\n      return false;\n    }\n\n    // Always call the loader on new route instances and pending defer cancellations\n    if (\n      isNewLoader(state.loaderData, state.matches[index], match) ||\n      cancelledDeferredRoutes.some((id) => id === match.route.id)\n    ) {\n      return true;\n    }\n\n    // This is the default implementation for when we revalidate.  If the route\n    // provides it's own implementation, then we give them full control but\n    // provide this value so they can leverage it if needed after they check\n    // their own specific use cases\n    let currentRouteMatch = state.matches[index];\n    let nextRouteMatch = match;\n\n    return shouldRevalidateLoader(match, {\n      currentUrl,\n      currentParams: currentRouteMatch.params,\n      nextUrl,\n      nextParams: nextRouteMatch.params,\n      ...submission,\n      actionResult,\n      defaultShouldRevalidate:\n        defaultShouldRevalidate ||\n        isNewRouteInstance(currentRouteMatch, nextRouteMatch),\n    });\n  });\n\n  // Pick fetcher.loads that need to be revalidated\n  let revalidatingFetchers: RevalidatingFetcher[] = [];\n  fetchLoadMatches &&\n    fetchLoadMatches.forEach((f, key) => {\n      if (!matches.some((m) => m.route.id === f.routeId)) {\n        // This fetcher is not going to be present in the subsequent render so\n        // there's no need to revalidate it\n        return;\n      } else if (cancelledFetcherLoads.includes(key)) {\n        // This fetcher was cancelled from a prior action submission - force reload\n        revalidatingFetchers.push({ key, ...f });\n      } else {\n        // Revalidating fetchers are decoupled from the route matches since they\n        // hit a static href, so they _always_ check shouldRevalidate and the\n        // default is strictly if a revalidation is explicitly required (action\n        // submissions, useRevalidator, X-Remix-Revalidate).\n        let shouldRevalidate = shouldRevalidateLoader(f.match, {\n          currentUrl,\n          currentParams: state.matches[state.matches.length - 1].params,\n          nextUrl,\n          nextParams: matches[matches.length - 1].params,\n          ...submission,\n          actionResult,\n          defaultShouldRevalidate,\n        });\n        if (shouldRevalidate) {\n          revalidatingFetchers.push({ key, ...f });\n        }\n      }\n    });\n\n  return [navigationMatches, revalidatingFetchers];\n}\n\nfunction isNewLoader(\n  currentLoaderData: RouteData,\n  currentMatch: AgnosticDataRouteMatch,\n  match: AgnosticDataRouteMatch\n) {\n  let isNew =\n    // [a] -> [a, b]\n    !currentMatch ||\n    // [a, b] -> [a, c]\n    match.route.id !== currentMatch.route.id;\n\n  // Handle the case that we don't have data for a re-used route, potentially\n  // from a prior error or from a cancelled pending deferred\n  let isMissingData = currentLoaderData[match.route.id] === undefined;\n\n  // Always load if this is a net-new route or we don't yet have data\n  return isNew || isMissingData;\n}\n\nfunction isNewRouteInstance(\n  currentMatch: AgnosticDataRouteMatch,\n  match: AgnosticDataRouteMatch\n) {\n  let currentPath = currentMatch.route.path;\n  return (\n    // param change for this match, /users/123 -> /users/456\n    currentMatch.pathname !== match.pathname ||\n    // splat param changed, which is not present in match.path\n    // e.g. /files/images/avatar.jpg -> files/finances.xls\n    (currentPath != null &&\n      currentPath.endsWith(\"*\") &&\n      currentMatch.params[\"*\"] !== match.params[\"*\"])\n  );\n}\n\nfunction shouldRevalidateLoader(\n  loaderMatch: AgnosticDataRouteMatch,\n  arg: Parameters<ShouldRevalidateFunction>[0]\n) {\n  if (loaderMatch.route.shouldRevalidate) {\n    let routeChoice = loaderMatch.route.shouldRevalidate(arg);\n    if (typeof routeChoice === \"boolean\") {\n      return routeChoice;\n    }\n  }\n\n  return arg.defaultShouldRevalidate;\n}\n\nasync function callLoaderOrAction(\n  type: \"loader\" | \"action\",\n  request: Request,\n  match: AgnosticDataRouteMatch,\n  matches: AgnosticDataRouteMatch[],\n  basename = \"/\",\n  isStaticRequest: boolean = false,\n  isRouteRequest: boolean = false,\n  requestContext?: unknown\n): Promise<DataResult> {\n  let resultType;\n  let result;\n\n  // Setup a promise we can race against so that abort signals short circuit\n  let reject: () => void;\n  let abortPromise = new Promise((_, r) => (reject = r));\n  let onReject = () => reject();\n  request.signal.addEventListener(\"abort\", onReject);\n\n  try {\n    let handler = match.route[type];\n    invariant<Function>(\n      handler,\n      `Could not find the ${type} to run on the \"${match.route.id}\" route`\n    );\n\n    result = await Promise.race([\n      handler({ request, params: match.params, context: requestContext }),\n      abortPromise,\n    ]);\n\n    invariant(\n      result !== undefined,\n      `You defined ${type === \"action\" ? \"an action\" : \"a loader\"} for route ` +\n        `\"${match.route.id}\" but didn't return anything from your \\`${type}\\` ` +\n        `function. Please return a value or \\`null\\`.`\n    );\n  } catch (e) {\n    resultType = ResultType.error;\n    result = e;\n  } finally {\n    request.signal.removeEventListener(\"abort\", onReject);\n  }\n\n  if (isResponse(result)) {\n    let status = result.status;\n\n    // Process redirects\n    if (redirectStatusCodes.has(status)) {\n      let location = result.headers.get(\"Location\");\n      invariant(\n        location,\n        \"Redirects returned/thrown from loaders/actions must have a Location header\"\n      );\n\n      let isAbsolute = /^(?:[a-z][a-z0-9+.-]*:|\\/\\/)/i.test(location);\n\n      // Support relative routing in internal redirects\n      if (!isAbsolute) {\n        let activeMatches = matches.slice(0, matches.indexOf(match) + 1);\n        let routePathnames = getPathContributingMatches(activeMatches).map(\n          (match) => match.pathnameBase\n        );\n        let resolvedLocation = resolveTo(\n          location,\n          routePathnames,\n          new URL(request.url).pathname\n        );\n        invariant(\n          createPath(resolvedLocation),\n          `Unable to resolve redirect location: ${location}`\n        );\n\n        // Prepend the basename to the redirect location if we have one\n        if (basename) {\n          let path = resolvedLocation.pathname;\n          resolvedLocation.pathname =\n            path === \"/\" ? basename : joinPaths([basename, path]);\n        }\n\n        location = createPath(resolvedLocation);\n      } else if (!isStaticRequest) {\n        // Strip off the protocol+origin for same-origin absolute redirects.\n        // If this is a static reques, we can let it go back to the browser\n        // as-is\n        let currentUrl = new URL(request.url);\n        let url = location.startsWith(\"//\")\n          ? new URL(currentUrl.protocol + location)\n          : new URL(location);\n        if (url.origin === currentUrl.origin) {\n          location = url.pathname + url.search + url.hash;\n        }\n      }\n\n      // Don't process redirects in the router during static requests requests.\n      // Instead, throw the Response and let the server handle it with an HTTP\n      // redirect.  We also update the Location header in place in this flow so\n      // basename and relative routing is taken into account\n      if (isStaticRequest) {\n        result.headers.set(\"Location\", location);\n        throw result;\n      }\n\n      return {\n        type: ResultType.redirect,\n        status,\n        location,\n        revalidate: result.headers.get(\"X-Remix-Revalidate\") !== null,\n      };\n    }\n\n    // For SSR single-route requests, we want to hand Responses back directly\n    // without unwrapping.  We do this with the QueryRouteResponse wrapper\n    // interface so we can know whether it was returned or thrown\n    if (isRouteRequest) {\n      // eslint-disable-next-line no-throw-literal\n      throw {\n        type: resultType || ResultType.data,\n        response: result,\n      };\n    }\n\n    let data: any;\n    let contentType = result.headers.get(\"Content-Type\");\n    // Check between word boundaries instead of startsWith() due to the last\n    // paragraph of https://httpwg.org/specs/rfc9110.html#field.content-type\n    if (contentType && /\\bapplication\\/json\\b/.test(contentType)) {\n      data = await result.json();\n    } else {\n      data = await result.text();\n    }\n\n    if (resultType === ResultType.error) {\n      return {\n        type: resultType,\n        error: new ErrorResponse(status, result.statusText, data),\n        headers: result.headers,\n      };\n    }\n\n    return {\n      type: ResultType.data,\n      data,\n      statusCode: result.status,\n      headers: result.headers,\n    };\n  }\n\n  if (resultType === ResultType.error) {\n    return { type: resultType, error: result };\n  }\n\n  if (result instanceof DeferredData) {\n    return { type: ResultType.deferred, deferredData: result };\n  }\n\n  return { type: ResultType.data, data: result };\n}\n\n// Utility method for creating the Request instances for loaders/actions during\n// client-side navigations and fetches.  During SSR we will always have a\n// Request instance from the static handler (query/queryRoute)\nfunction createClientSideRequest(\n  history: History,\n  location: string | Location,\n  signal: AbortSignal,\n  submission?: Submission\n): Request {\n  let url = history.createURL(stripHashFromPath(location)).toString();\n  let init: RequestInit = { signal };\n\n  if (submission && isMutationMethod(submission.formMethod)) {\n    let { formMethod, formEncType, formData } = submission;\n    init.method = formMethod.toUpperCase();\n    init.body =\n      formEncType === \"application/x-www-form-urlencoded\"\n        ? convertFormDataToSearchParams(formData)\n        : formData;\n  }\n\n  // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n  return new Request(url, init);\n}\n\nfunction convertFormDataToSearchParams(formData: FormData): URLSearchParams {\n  let searchParams = new URLSearchParams();\n\n  for (let [key, value] of formData.entries()) {\n    // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#converting-an-entry-list-to-a-list-of-name-value-pairs\n    searchParams.append(key, value instanceof File ? value.name : value);\n  }\n\n  return searchParams;\n}\n\nfunction processRouteLoaderData(\n  matches: AgnosticDataRouteMatch[],\n  matchesToLoad: AgnosticDataRouteMatch[],\n  results: DataResult[],\n  pendingError: RouteData | undefined,\n  activeDeferreds: Map<string, DeferredData>\n): {\n  loaderData: RouterState[\"loaderData\"];\n  errors: RouterState[\"errors\"] | null;\n  statusCode: number;\n  loaderHeaders: Record<string, Headers>;\n} {\n  // Fill in loaderData/errors from our loaders\n  let loaderData: RouterState[\"loaderData\"] = {};\n  let errors: RouterState[\"errors\"] | null = null;\n  let statusCode: number | undefined;\n  let foundError = false;\n  let loaderHeaders: Record<string, Headers> = {};\n\n  // Process loader results into state.loaderData/state.errors\n  results.forEach((result, index) => {\n    let id = matchesToLoad[index].route.id;\n    invariant(\n      !isRedirectResult(result),\n      \"Cannot handle redirect results in processLoaderData\"\n    );\n    if (isErrorResult(result)) {\n      // Look upwards from the matched route for the closest ancestor\n      // error boundary, defaulting to the root match\n      let boundaryMatch = findNearestBoundary(matches, id);\n      let error = result.error;\n      // If we have a pending action error, we report it at the highest-route\n      // that throws a loader error, and then clear it out to indicate that\n      // it was consumed\n      if (pendingError) {\n        error = Object.values(pendingError)[0];\n        pendingError = undefined;\n      }\n\n      errors = errors || {};\n\n      // Prefer higher error values if lower errors bubble to the same boundary\n      if (errors[boundaryMatch.route.id] == null) {\n        errors[boundaryMatch.route.id] = error;\n      }\n\n      // Clear our any prior loaderData for the throwing route\n      loaderData[id] = undefined;\n\n      // Once we find our first (highest) error, we set the status code and\n      // prevent deeper status codes from overriding\n      if (!foundError) {\n        foundError = true;\n        statusCode = isRouteErrorResponse(result.error)\n          ? result.error.status\n          : 500;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    } else {\n      if (isDeferredResult(result)) {\n        activeDeferreds.set(id, result.deferredData);\n        loaderData[id] = result.deferredData.data;\n      } else {\n        loaderData[id] = result.data;\n      }\n\n      // Error status codes always override success status codes, but if all\n      // loaders are successful we take the deepest status code.\n      if (\n        result.statusCode != null &&\n        result.statusCode !== 200 &&\n        !foundError\n      ) {\n        statusCode = result.statusCode;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    }\n  });\n\n  // If we didn't consume the pending action error (i.e., all loaders\n  // resolved), then consume it here.  Also clear out any loaderData for the\n  // throwing route\n  if (pendingError) {\n    errors = pendingError;\n    loaderData[Object.keys(pendingError)[0]] = undefined;\n  }\n\n  return {\n    loaderData,\n    errors,\n    statusCode: statusCode || 200,\n    loaderHeaders,\n  };\n}\n\nfunction processLoaderData(\n  state: RouterState,\n  matches: AgnosticDataRouteMatch[],\n  matchesToLoad: AgnosticDataRouteMatch[],\n  results: DataResult[],\n  pendingError: RouteData | undefined,\n  revalidatingFetchers: RevalidatingFetcher[],\n  fetcherResults: DataResult[],\n  activeDeferreds: Map<string, DeferredData>\n): {\n  loaderData: RouterState[\"loaderData\"];\n  errors?: RouterState[\"errors\"];\n} {\n  let { loaderData, errors } = processRouteLoaderData(\n    matches,\n    matchesToLoad,\n    results,\n    pendingError,\n    activeDeferreds\n  );\n\n  // Process results from our revalidating fetchers\n  for (let index = 0; index < revalidatingFetchers.length; index++) {\n    let { key, match } = revalidatingFetchers[index];\n    invariant(\n      fetcherResults !== undefined && fetcherResults[index] !== undefined,\n      \"Did not find corresponding fetcher result\"\n    );\n    let result = fetcherResults[index];\n\n    // Process fetcher non-redirect errors\n    if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, match.route.id);\n      if (!(errors && errors[boundaryMatch.route.id])) {\n        errors = {\n          ...errors,\n          [boundaryMatch.route.id]: result.error,\n        };\n      }\n      state.fetchers.delete(key);\n    } else if (isRedirectResult(result)) {\n      // Should never get here, redirects should get processed above, but we\n      // keep this to type narrow to a success result in the else\n      invariant(false, \"Unhandled fetcher revalidation redirect\");\n    } else if (isDeferredResult(result)) {\n      // Should never get here, deferred data should be awaited for fetchers\n      // in resolveDeferredResults\n      invariant(false, \"Unhandled fetcher deferred data\");\n    } else {\n      let doneFetcher: FetcherStates[\"Idle\"] = {\n        state: \"idle\",\n        data: result.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n        \" _hasFetcherDoneAnything \": true,\n      };\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  return { loaderData, errors };\n}\n\nfunction mergeLoaderData(\n  loaderData: RouteData,\n  newLoaderData: RouteData,\n  matches: AgnosticDataRouteMatch[],\n  errors: RouteData | null | undefined\n): RouteData {\n  let mergedLoaderData = { ...newLoaderData };\n  for (let match of matches) {\n    let id = match.route.id;\n    if (newLoaderData.hasOwnProperty(id)) {\n      if (newLoaderData[id] !== undefined) {\n        mergedLoaderData[id] = newLoaderData[id];\n      } else {\n        // No-op - this is so we ignore existing data if we have a key in the\n        // incoming object with an undefined value, which is how we unset a prior\n        // loaderData if we encounter a loader error\n      }\n    } else if (loaderData[id] !== undefined) {\n      mergedLoaderData[id] = loaderData[id];\n    }\n\n    if (errors && errors.hasOwnProperty(id)) {\n      // Don't keep any loader data below the boundary\n      break;\n    }\n  }\n  return mergedLoaderData;\n}\n\n// Find the nearest error boundary, looking upwards from the leaf route (or the\n// route specified by routeId) for the closest ancestor error boundary,\n// defaulting to the root match\nfunction findNearestBoundary(\n  matches: AgnosticDataRouteMatch[],\n  routeId?: string\n): AgnosticDataRouteMatch {\n  let eligibleMatches = routeId\n    ? matches.slice(0, matches.findIndex((m) => m.route.id === routeId) + 1)\n    : [...matches];\n  return (\n    eligibleMatches.reverse().find((m) => m.route.hasErrorBoundary === true) ||\n    matches[0]\n  );\n}\n\nfunction getShortCircuitMatches(routes: AgnosticDataRouteObject[]): {\n  matches: AgnosticDataRouteMatch[];\n  route: AgnosticDataRouteObject;\n} {\n  // Prefer a root layout route if present, otherwise shim in a route object\n  let route = routes.find((r) => r.index || !r.path || r.path === \"/\") || {\n    id: `__shim-error-route__`,\n  };\n\n  return {\n    matches: [\n      {\n        params: {},\n        pathname: \"\",\n        pathnameBase: \"\",\n        route,\n      },\n    ],\n    route,\n  };\n}\n\nfunction getInternalRouterError(\n  status: number,\n  {\n    pathname,\n    routeId,\n    method,\n    type,\n  }: {\n    pathname?: string;\n    routeId?: string;\n    method?: string;\n    type?: \"defer-action\";\n  } = {}\n) {\n  let statusText = \"Unknown Server Error\";\n  let errorMessage = \"Unknown @remix-run/router error\";\n\n  if (status === 400) {\n    statusText = \"Bad Request\";\n    if (method && pathname && routeId) {\n      errorMessage =\n        `You made a ${method} request to \"${pathname}\" but ` +\n        `did not provide a \\`loader\\` for route \"${routeId}\", ` +\n        `so there is no way to handle the request.`;\n    } else if (type === \"defer-action\") {\n      errorMessage = \"defer() is not supported in actions\";\n    }\n  } else if (status === 403) {\n    statusText = \"Forbidden\";\n    errorMessage = `Route \"${routeId}\" does not match URL \"${pathname}\"`;\n  } else if (status === 404) {\n    statusText = \"Not Found\";\n    errorMessage = `No route matches URL \"${pathname}\"`;\n  } else if (status === 405) {\n    statusText = \"Method Not Allowed\";\n    if (method && pathname && routeId) {\n      errorMessage =\n        `You made a ${method.toUpperCase()} request to \"${pathname}\" but ` +\n        `did not provide an \\`action\\` for route \"${routeId}\", ` +\n        `so there is no way to handle the request.`;\n    } else if (method) {\n      errorMessage = `Invalid request method \"${method.toUpperCase()}\"`;\n    }\n  }\n\n  return new ErrorResponse(\n    status || 500,\n    statusText,\n    new Error(errorMessage),\n    true\n  );\n}\n\n// Find any returned redirect errors, starting from the lowest match\nfunction findRedirect(results: DataResult[]): RedirectResult | undefined {\n  for (let i = results.length - 1; i >= 0; i--) {\n    let result = results[i];\n    if (isRedirectResult(result)) {\n      return result;\n    }\n  }\n}\n\nfunction stripHashFromPath(path: To) {\n  let parsedPath = typeof path === \"string\" ? parsePath(path) : path;\n  return createPath({ ...parsedPath, hash: \"\" });\n}\n\nfunction isHashChangeOnly(a: Location, b: Location): boolean {\n  return (\n    a.pathname === b.pathname && a.search === b.search && a.hash !== b.hash\n  );\n}\n\nfunction isDeferredResult(result: DataResult): result is DeferredResult {\n  return result.type === ResultType.deferred;\n}\n\nfunction isErrorResult(result: DataResult): result is ErrorResult {\n  return result.type === ResultType.error;\n}\n\nfunction isRedirectResult(result?: DataResult): result is RedirectResult {\n  return (result && result.type) === ResultType.redirect;\n}\n\nfunction isResponse(value: any): value is Response {\n  return (\n    value != null &&\n    typeof value.status === \"number\" &&\n    typeof value.statusText === \"string\" &&\n    typeof value.headers === \"object\" &&\n    typeof value.body !== \"undefined\"\n  );\n}\n\nfunction isRedirectResponse(result: any): result is Response {\n  if (!isResponse(result)) {\n    return false;\n  }\n\n  let status = result.status;\n  let location = result.headers.get(\"Location\");\n  return status >= 300 && status <= 399 && location != null;\n}\n\nfunction isQueryRouteResponse(obj: any): obj is QueryRouteResponse {\n  return (\n    obj &&\n    isResponse(obj.response) &&\n    (obj.type === ResultType.data || ResultType.error)\n  );\n}\n\nfunction isValidMethod(method: string): method is FormMethod {\n  return validRequestMethods.has(method as FormMethod);\n}\n\nfunction isMutationMethod(method?: string): method is MutationFormMethod {\n  return validMutationMethods.has(method as MutationFormMethod);\n}\n\nasync function resolveDeferredResults(\n  currentMatches: AgnosticDataRouteMatch[],\n  matchesToLoad: AgnosticDataRouteMatch[],\n  results: DataResult[],\n  signal: AbortSignal,\n  isFetcher: boolean,\n  currentLoaderData?: RouteData\n) {\n  for (let index = 0; index < results.length; index++) {\n    let result = results[index];\n    let match = matchesToLoad[index];\n    let currentMatch = currentMatches.find(\n      (m) => m.route.id === match.route.id\n    );\n    let isRevalidatingLoader =\n      currentMatch != null &&\n      !isNewRouteInstance(currentMatch, match) &&\n      (currentLoaderData && currentLoaderData[match.route.id]) !== undefined;\n\n    if (isDeferredResult(result) && (isFetcher || isRevalidatingLoader)) {\n      // Note: we do not have to touch activeDeferreds here since we race them\n      // against the signal in resolveDeferredData and they'll get aborted\n      // there if needed\n      await resolveDeferredData(result, signal, isFetcher).then((result) => {\n        if (result) {\n          results[index] = result || results[index];\n        }\n      });\n    }\n  }\n}\n\nasync function resolveDeferredData(\n  result: DeferredResult,\n  signal: AbortSignal,\n  unwrap = false\n): Promise<SuccessResult | ErrorResult | undefined> {\n  let aborted = await result.deferredData.resolveData(signal);\n  if (aborted) {\n    return;\n  }\n\n  if (unwrap) {\n    try {\n      return {\n        type: ResultType.data,\n        data: result.deferredData.unwrappedData,\n      };\n    } catch (e) {\n      // Handle any TrackedPromise._error values encountered while unwrapping\n      return {\n        type: ResultType.error,\n        error: e,\n      };\n    }\n  }\n\n  return {\n    type: ResultType.data,\n    data: result.deferredData.data,\n  };\n}\n\nfunction hasNakedIndexQuery(search: string): boolean {\n  return new URLSearchParams(search).getAll(\"index\").some((v) => v === \"\");\n}\n\n// Note: This should match the format exported by useMatches, so if you change\n// this please also change that :)  Eventually we'll DRY this up\nfunction createUseMatchesMatch(\n  match: AgnosticDataRouteMatch,\n  loaderData: RouteData\n): UseMatchesMatch {\n  let { route, pathname, params } = match;\n  return {\n    id: route.id,\n    pathname,\n    params,\n    data: loaderData[route.id] as unknown,\n    handle: route.handle as unknown,\n  };\n}\n\nfunction getTargetMatch(\n  matches: AgnosticDataRouteMatch[],\n  location: Location | string\n) {\n  let search =\n    typeof location === \"string\" ? parsePath(location).search : location.search;\n  if (\n    matches[matches.length - 1].route.index &&\n    hasNakedIndexQuery(search || \"\")\n  ) {\n    // Return the leaf index route when index is present\n    return matches[matches.length - 1];\n  }\n  // Otherwise grab the deepest \"path contributing\" match (ignoring index and\n  // pathless layout routes)\n  let pathMatches = getPathContributingMatches(matches);\n  return pathMatches[pathMatches.length - 1];\n}\n//#endregion\n","/**\n * NOTE: If you refactor this to split up the modules into separate files,\n * you'll need to update the rollup config for react-router-dom-v5-compat.\n */\nimport * as React from \"react\";\nimport type {\n  NavigateOptions,\n  RelativeRoutingType,\n  RouteObject,\n  To,\n} from \"react-router\";\nimport {\n  Router,\n  createPath,\n  useHref,\n  useLocation,\n  useMatches,\n  useNavigate,\n  useNavigation,\n  useResolvedPath,\n  unstable_useBlocker as useBlocker,\n  UNSAFE_DataRouterContext as DataRouterContext,\n  UNSAFE_DataRouterStateContext as DataRouterStateContext,\n  UNSAFE_NavigationContext as NavigationContext,\n  UNSAFE_RouteContext as RouteContext,\n  UNSAFE_enhanceManualRouteObjects as enhanceManualRouteObjects,\n} from \"react-router\";\nimport type {\n  BrowserHistory,\n  Fetcher,\n  FormEncType,\n  FormMethod,\n  GetScrollRestorationKeyFunction,\n  HashHistory,\n  History,\n  HydrationState,\n  Router as RemixRouter,\n} from \"@remix-run/router\";\nimport {\n  createRouter,\n  createBrowserHistory,\n  createHashHistory,\n  invariant,\n  joinPaths,\n  ErrorResponse,\n} from \"@remix-run/router\";\n\nimport type {\n  SubmitOptions,\n  ParamKeyValuePair,\n  URLSearchParamsInit,\n} from \"./dom\";\nimport {\n  createSearchParams,\n  defaultMethod,\n  getFormSubmissionInfo,\n  getSearchParamsForLocation,\n  shouldProcessLinkClick,\n} from \"./dom\";\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Re-exports\n////////////////////////////////////////////////////////////////////////////////\n\nexport type {\n  FormEncType,\n  FormMethod,\n  GetScrollRestorationKeyFunction,\n  ParamKeyValuePair,\n  SubmitOptions,\n  URLSearchParamsInit,\n};\nexport { createSearchParams };\n\n// Note: Keep in sync with react-router exports!\nexport type {\n  ActionFunction,\n  ActionFunctionArgs,\n  AwaitProps,\n  unstable_Blocker,\n  unstable_BlockerFunction,\n  DataRouteMatch,\n  DataRouteObject,\n  Fetcher,\n  Hash,\n  IndexRouteObject,\n  IndexRouteProps,\n  JsonFunction,\n  LayoutRouteProps,\n  LoaderFunction,\n  LoaderFunctionArgs,\n  Location,\n  MemoryRouterProps,\n  NavigateFunction,\n  NavigateOptions,\n  NavigateProps,\n  Navigation,\n  Navigator,\n  NonIndexRouteObject,\n  OutletProps,\n  Params,\n  ParamParseKey,\n  Path,\n  PathMatch,\n  Pathname,\n  PathPattern,\n  PathRouteProps,\n  RedirectFunction,\n  RelativeRoutingType,\n  RouteMatch,\n  RouteObject,\n  RouteProps,\n  RouterProps,\n  RouterProviderProps,\n  RoutesProps,\n  Search,\n  ShouldRevalidateFunction,\n  To,\n} from \"react-router\";\nexport {\n  AbortedDeferredError,\n  Await,\n  MemoryRouter,\n  Navigate,\n  NavigationType,\n  Outlet,\n  Route,\n  Router,\n  RouterProvider,\n  Routes,\n  createMemoryRouter,\n  createPath,\n  createRoutesFromChildren,\n  createRoutesFromElements,\n  defer,\n  isRouteErrorResponse,\n  generatePath,\n  json,\n  matchPath,\n  matchRoutes,\n  parsePath,\n  redirect,\n  renderMatches,\n  resolvePath,\n  useActionData,\n  useAsyncError,\n  useAsyncValue,\n  unstable_useBlocker,\n  useHref,\n  useInRouterContext,\n  useLoaderData,\n  useLocation,\n  useMatch,\n  useMatches,\n  useNavigate,\n  useNavigation,\n  useNavigationType,\n  useOutlet,\n  useOutletContext,\n  useParams,\n  useResolvedPath,\n  useRevalidator,\n  useRouteError,\n  useRouteLoaderData,\n  useRoutes,\n} from \"react-router\";\n\n///////////////////////////////////////////////////////////////////////////////\n// DANGER! PLEASE READ ME!\n// We provide these exports as an escape hatch in the event that you need any\n// routing data that we don't provide an explicit API for. With that said, we\n// want to cover your use case if we can, so if you feel the need to use these\n// we want to hear from you. Let us know what you're building and we'll do our\n// best to make sure we can support you!\n//\n// We consider these exports an implementation detail and do not guarantee\n// against any breaking changes, regardless of the semver release. Use with\n// extreme caution and only if you understand the consequences. Godspeed.\n///////////////////////////////////////////////////////////////////////////////\n\n/** @internal */\nexport {\n  UNSAFE_DataRouterContext,\n  UNSAFE_DataRouterStateContext,\n  UNSAFE_NavigationContext,\n  UNSAFE_LocationContext,\n  UNSAFE_RouteContext,\n  UNSAFE_enhanceManualRouteObjects,\n} from \"react-router\";\n//#endregion\n\ndeclare global {\n  var __staticRouterHydrationData: HydrationState | undefined;\n}\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Routers\n////////////////////////////////////////////////////////////////////////////////\n\nexport function createBrowserRouter(\n  routes: RouteObject[],\n  opts?: {\n    basename?: string;\n    hydrationData?: HydrationState;\n    window?: Window;\n  }\n): RemixRouter {\n  return createRouter({\n    basename: opts?.basename,\n    history: createBrowserHistory({ window: opts?.window }),\n    hydrationData: opts?.hydrationData || parseHydrationData(),\n    routes: enhanceManualRouteObjects(routes),\n  }).initialize();\n}\n\nexport function createHashRouter(\n  routes: RouteObject[],\n  opts?: {\n    basename?: string;\n    hydrationData?: HydrationState;\n    window?: Window;\n  }\n): RemixRouter {\n  return createRouter({\n    basename: opts?.basename,\n    history: createHashHistory({ window: opts?.window }),\n    hydrationData: opts?.hydrationData || parseHydrationData(),\n    routes: enhanceManualRouteObjects(routes),\n  }).initialize();\n}\n\nfunction parseHydrationData(): HydrationState | undefined {\n  let state = window?.__staticRouterHydrationData;\n  if (state && state.errors) {\n    state = {\n      ...state,\n      errors: deserializeErrors(state.errors),\n    };\n  }\n  return state;\n}\n\nfunction deserializeErrors(\n  errors: RemixRouter[\"state\"][\"errors\"]\n): RemixRouter[\"state\"][\"errors\"] {\n  if (!errors) return null;\n  let entries = Object.entries(errors);\n  let serialized: RemixRouter[\"state\"][\"errors\"] = {};\n  for (let [key, val] of entries) {\n    // Hey you!  If you change this, please change the corresponding logic in\n    // serializeErrors in react-router-dom/server.tsx :)\n    if (val && val.__type === \"RouteErrorResponse\") {\n      serialized[key] = new ErrorResponse(\n        val.status,\n        val.statusText,\n        val.data,\n        val.internal === true\n      );\n    } else if (val && val.__type === \"Error\") {\n      let error = new Error(val.message);\n      // Wipe away the client-side stack trace.  Nothing to fill it in with\n      // because we don't serialize SSR stack traces for security reasons\n      error.stack = \"\";\n      serialized[key] = error;\n    } else {\n      serialized[key] = val;\n    }\n  }\n  return serialized;\n}\n\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Components\n////////////////////////////////////////////////////////////////////////////////\n\nexport interface BrowserRouterProps {\n  basename?: string;\n  children?: React.ReactNode;\n  window?: Window;\n}\n\n/**\n * A `<Router>` for use in web browsers. Provides the cleanest URLs.\n */\nexport function BrowserRouter({\n  basename,\n  children,\n  window,\n}: BrowserRouterProps) {\n  let historyRef = React.useRef<BrowserHistory>();\n  if (historyRef.current == null) {\n    historyRef.current = createBrowserHistory({ window, v5Compat: true });\n  }\n\n  let history = historyRef.current;\n  let [state, setState] = React.useState({\n    action: history.action,\n    location: history.location,\n  });\n\n  React.useLayoutEffect(() => history.listen(setState), [history]);\n\n  return (\n    <Router\n      basename={basename}\n      children={children}\n      location={state.location}\n      navigationType={state.action}\n      navigator={history}\n    />\n  );\n}\n\nexport interface HashRouterProps {\n  basename?: string;\n  children?: React.ReactNode;\n  window?: Window;\n}\n\n/**\n * A `<Router>` for use in web browsers. Stores the location in the hash\n * portion of the URL so it is not sent to the server.\n */\nexport function HashRouter({ basename, children, window }: HashRouterProps) {\n  let historyRef = React.useRef<HashHistory>();\n  if (historyRef.current == null) {\n    historyRef.current = createHashHistory({ window, v5Compat: true });\n  }\n\n  let history = historyRef.current;\n  let [state, setState] = React.useState({\n    action: history.action,\n    location: history.location,\n  });\n\n  React.useLayoutEffect(() => history.listen(setState), [history]);\n\n  return (\n    <Router\n      basename={basename}\n      children={children}\n      location={state.location}\n      navigationType={state.action}\n      navigator={history}\n    />\n  );\n}\n\nexport interface HistoryRouterProps {\n  basename?: string;\n  children?: React.ReactNode;\n  history: History;\n}\n\n/**\n * A `<Router>` that accepts a pre-instantiated history object. It's important\n * to note that using your own history object is highly discouraged and may add\n * two versions of the history library to your bundles unless you use the same\n * version of the history library that React Router uses internally.\n */\nfunction HistoryRouter({ basename, children, history }: HistoryRouterProps) {\n  const [state, setState] = React.useState({\n    action: history.action,\n    location: history.location,\n  });\n\n  React.useLayoutEffect(() => history.listen(setState), [history]);\n\n  return (\n    <Router\n      basename={basename}\n      children={children}\n      location={state.location}\n      navigationType={state.action}\n      navigator={history}\n    />\n  );\n}\n\nif (__DEV__) {\n  HistoryRouter.displayName = \"unstable_HistoryRouter\";\n}\n\nexport { HistoryRouter as unstable_HistoryRouter };\n\nexport interface LinkProps\n  extends Omit<React.AnchorHTMLAttributes<HTMLAnchorElement>, \"href\"> {\n  reloadDocument?: boolean;\n  replace?: boolean;\n  state?: any;\n  preventScrollReset?: boolean;\n  relative?: RelativeRoutingType;\n  to: To;\n}\n\nconst isBrowser =\n  typeof window !== \"undefined\" &&\n  typeof window.document !== \"undefined\" &&\n  typeof window.document.createElement !== \"undefined\";\n\n/**\n * The public API for rendering a history-aware <a>.\n */\nexport const Link = React.forwardRef<HTMLAnchorElement, LinkProps>(\n  function LinkWithRef(\n    {\n      onClick,\n      relative,\n      reloadDocument,\n      replace,\n      state,\n      target,\n      to,\n      preventScrollReset,\n      ...rest\n    },\n    ref\n  ) {\n    // `location` is the unaltered href we will render in the <a> tag for absolute URLs\n    let location = typeof to === \"string\" ? to : createPath(to);\n    let isAbsolute =\n      /^[a-z+]+:\\/\\//i.test(location) || location.startsWith(\"//\");\n\n    // Location to use in the click handler\n    let navigationLocation = location;\n    let isExternal = false;\n    if (isBrowser && isAbsolute) {\n      let currentUrl = new URL(window.location.href);\n      let targetUrl = location.startsWith(\"//\")\n        ? new URL(currentUrl.protocol + location)\n        : new URL(location);\n      if (targetUrl.origin === currentUrl.origin) {\n        // Strip the protocol/origin for same-origin absolute URLs\n        navigationLocation =\n          targetUrl.pathname + targetUrl.search + targetUrl.hash;\n      } else {\n        isExternal = true;\n      }\n    }\n\n    // `href` is what we render in the <a> tag for relative URLs\n    let href = useHref(navigationLocation, { relative });\n\n    let internalOnClick = useLinkClickHandler(navigationLocation, {\n      replace,\n      state,\n      target,\n      preventScrollReset,\n      relative,\n    });\n    function handleClick(\n      event: React.MouseEvent<HTMLAnchorElement, MouseEvent>\n    ) {\n      if (onClick) onClick(event);\n      if (!event.defaultPrevented) {\n        internalOnClick(event);\n      }\n    }\n\n    return (\n      // eslint-disable-next-line jsx-a11y/anchor-has-content\n      <a\n        {...rest}\n        href={isAbsolute ? location : href}\n        onClick={isExternal || reloadDocument ? onClick : handleClick}\n        ref={ref}\n        target={target}\n      />\n    );\n  }\n);\n\nif (__DEV__) {\n  Link.displayName = \"Link\";\n}\n\nexport interface NavLinkProps\n  extends Omit<LinkProps, \"className\" | \"style\" | \"children\"> {\n  children?:\n    | React.ReactNode\n    | ((props: { isActive: boolean; isPending: boolean }) => React.ReactNode);\n  caseSensitive?: boolean;\n  className?:\n    | string\n    | ((props: {\n        isActive: boolean;\n        isPending: boolean;\n      }) => string | undefined);\n  end?: boolean;\n  style?:\n    | React.CSSProperties\n    | ((props: {\n        isActive: boolean;\n        isPending: boolean;\n      }) => React.CSSProperties | undefined);\n}\n\n/**\n * A <Link> wrapper that knows if it's \"active\" or not.\n */\nexport const NavLink = React.forwardRef<HTMLAnchorElement, NavLinkProps>(\n  function NavLinkWithRef(\n    {\n      \"aria-current\": ariaCurrentProp = \"page\",\n      caseSensitive = false,\n      className: classNameProp = \"\",\n      end = false,\n      style: styleProp,\n      to,\n      children,\n      ...rest\n    },\n    ref\n  ) {\n    let path = useResolvedPath(to, { relative: rest.relative });\n    let location = useLocation();\n    let routerState = React.useContext(DataRouterStateContext);\n    let { navigator } = React.useContext(NavigationContext);\n\n    let toPathname = navigator.encodeLocation\n      ? navigator.encodeLocation(path).pathname\n      : path.pathname;\n    let locationPathname = location.pathname;\n    let nextLocationPathname =\n      routerState && routerState.navigation && routerState.navigation.location\n        ? routerState.navigation.location.pathname\n        : null;\n\n    if (!caseSensitive) {\n      locationPathname = locationPathname.toLowerCase();\n      nextLocationPathname = nextLocationPathname\n        ? nextLocationPathname.toLowerCase()\n        : null;\n      toPathname = toPathname.toLowerCase();\n    }\n\n    let isActive =\n      locationPathname === toPathname ||\n      (!end &&\n        locationPathname.startsWith(toPathname) &&\n        locationPathname.charAt(toPathname.length) === \"/\");\n\n    let isPending =\n      nextLocationPathname != null &&\n      (nextLocationPathname === toPathname ||\n        (!end &&\n          nextLocationPathname.startsWith(toPathname) &&\n          nextLocationPathname.charAt(toPathname.length) === \"/\"));\n\n    let ariaCurrent = isActive ? ariaCurrentProp : undefined;\n\n    let className: string | undefined;\n    if (typeof classNameProp === \"function\") {\n      className = classNameProp({ isActive, isPending });\n    } else {\n      // If the className prop is not a function, we use a default `active`\n      // class for <NavLink />s that are active. In v5 `active` was the default\n      // value for `activeClassName`, but we are removing that API and can still\n      // use the old default behavior for a cleaner upgrade path and keep the\n      // simple styling rules working as they currently do.\n      className = [\n        classNameProp,\n        isActive ? \"active\" : null,\n        isPending ? \"pending\" : null,\n      ]\n        .filter(Boolean)\n        .join(\" \");\n    }\n\n    let style =\n      typeof styleProp === \"function\"\n        ? styleProp({ isActive, isPending })\n        : styleProp;\n\n    return (\n      <Link\n        {...rest}\n        aria-current={ariaCurrent}\n        className={className}\n        ref={ref}\n        style={style}\n        to={to}\n      >\n        {typeof children === \"function\"\n          ? children({ isActive, isPending })\n          : children}\n      </Link>\n    );\n  }\n);\n\nif (__DEV__) {\n  NavLink.displayName = \"NavLink\";\n}\n\nexport interface FormProps extends React.FormHTMLAttributes<HTMLFormElement> {\n  /**\n   * The HTTP verb to use when the form is submit. Supports \"get\", \"post\",\n   * \"put\", \"delete\", \"patch\".\n   */\n  method?: FormMethod;\n\n  /**\n   * Normal `<form action>` but supports React Router's relative paths.\n   */\n  action?: string;\n\n  /**\n   * Forces a full document navigation instead of a fetch.\n   */\n  reloadDocument?: boolean;\n\n  /**\n   * Replaces the current entry in the browser history stack when the form\n   * navigates. Use this if you don't want the user to be able to click \"back\"\n   * to the page with the form on it.\n   */\n  replace?: boolean;\n\n  /**\n   * Determines whether the form action is relative to the route hierarchy or\n   * the pathname.  Use this if you want to opt out of navigating the route\n   * hierarchy and want to instead route based on /-delimited URL segments\n   */\n  relative?: RelativeRoutingType;\n\n  /**\n   * Prevent the scroll position from resetting to the top of the viewport on\n   * completion of the navigation when using the <ScrollRestoration> component\n   */\n  preventScrollReset?: boolean;\n\n  /**\n   * A function to call when the form is submitted. If you call\n   * `event.preventDefault()` then this form will not do anything.\n   */\n  onSubmit?: React.FormEventHandler<HTMLFormElement>;\n}\n\n/**\n * A `@remix-run/router`-aware `<form>`. It behaves like a normal form except\n * that the interaction with the server is with `fetch` instead of new document\n * requests, allowing components to add nicer UX to the page as the form is\n * submitted and returns with data.\n */\nexport const Form = React.forwardRef<HTMLFormElement, FormProps>(\n  (props, ref) => {\n    return <FormImpl {...props} ref={ref} />;\n  }\n);\n\nif (__DEV__) {\n  Form.displayName = \"Form\";\n}\n\ntype HTMLSubmitEvent = React.BaseSyntheticEvent<\n  SubmitEvent,\n  Event,\n  HTMLFormElement\n>;\n\ntype HTMLFormSubmitter = HTMLButtonElement | HTMLInputElement;\n\ninterface FormImplProps extends FormProps {\n  fetcherKey?: string;\n  routeId?: string;\n}\n\nconst FormImpl = React.forwardRef<HTMLFormElement, FormImplProps>(\n  (\n    {\n      reloadDocument,\n      replace,\n      method = defaultMethod,\n      action,\n      onSubmit,\n      fetcherKey,\n      routeId,\n      relative,\n      preventScrollReset,\n      ...props\n    },\n    forwardedRef\n  ) => {\n    let submit = useSubmitImpl(fetcherKey, routeId);\n    let formMethod: FormMethod =\n      method.toLowerCase() === \"get\" ? \"get\" : \"post\";\n    let formAction = useFormAction(action, { relative });\n    let submitHandler: React.FormEventHandler<HTMLFormElement> = (event) => {\n      onSubmit && onSubmit(event);\n      if (event.defaultPrevented) return;\n      event.preventDefault();\n\n      let submitter = (event as unknown as HTMLSubmitEvent).nativeEvent\n        .submitter as HTMLFormSubmitter | null;\n\n      let submitMethod =\n        (submitter?.getAttribute(\"formmethod\") as FormMethod | undefined) ||\n        method;\n\n      submit(submitter || event.currentTarget, {\n        method: submitMethod,\n        replace,\n        relative,\n        preventScrollReset,\n      });\n    };\n\n    return (\n      <form\n        ref={forwardedRef}\n        method={formMethod}\n        action={formAction}\n        onSubmit={reloadDocument ? onSubmit : submitHandler}\n        {...props}\n      />\n    );\n  }\n);\n\nif (__DEV__) {\n  FormImpl.displayName = \"FormImpl\";\n}\n\nexport interface ScrollRestorationProps {\n  getKey?: GetScrollRestorationKeyFunction;\n  storageKey?: string;\n}\n\n/**\n * This component will emulate the browser's scroll restoration on location\n * changes.\n */\nexport function ScrollRestoration({\n  getKey,\n  storageKey,\n}: ScrollRestorationProps) {\n  useScrollRestoration({ getKey, storageKey });\n  return null;\n}\n\nif (__DEV__) {\n  ScrollRestoration.displayName = \"ScrollRestoration\";\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Hooks\n////////////////////////////////////////////////////////////////////////////////\n\nenum DataRouterHook {\n  UseScrollRestoration = \"useScrollRestoration\",\n  UseSubmitImpl = \"useSubmitImpl\",\n  UseFetcher = \"useFetcher\",\n}\n\nenum DataRouterStateHook {\n  UseFetchers = \"useFetchers\",\n  UseScrollRestoration = \"useScrollRestoration\",\n}\n\nfunction getDataRouterConsoleError(\n  hookName: DataRouterHook | DataRouterStateHook\n) {\n  return `${hookName} must be used within a data router.  See https://reactrouter.com/routers/picking-a-router.`;\n}\n\nfunction useDataRouterContext(hookName: DataRouterHook) {\n  let ctx = React.useContext(DataRouterContext);\n  invariant(ctx, getDataRouterConsoleError(hookName));\n  return ctx;\n}\n\nfunction useDataRouterState(hookName: DataRouterStateHook) {\n  let state = React.useContext(DataRouterStateContext);\n  invariant(state, getDataRouterConsoleError(hookName));\n  return state;\n}\n\n/**\n * Handles the click behavior for router `<Link>` components. This is useful if\n * you need to create custom `<Link>` components with the same click behavior we\n * use in our exported `<Link>`.\n */\nexport function useLinkClickHandler<E extends Element = HTMLAnchorElement>(\n  to: To,\n  {\n    target,\n    replace: replaceProp,\n    state,\n    preventScrollReset,\n    relative,\n  }: {\n    target?: React.HTMLAttributeAnchorTarget;\n    replace?: boolean;\n    state?: any;\n    preventScrollReset?: boolean;\n    relative?: RelativeRoutingType;\n  } = {}\n): (event: React.MouseEvent<E, MouseEvent>) => void {\n  let navigate = useNavigate();\n  let location = useLocation();\n  let path = useResolvedPath(to, { relative });\n\n  return React.useCallback(\n    (event: React.MouseEvent<E, MouseEvent>) => {\n      if (shouldProcessLinkClick(event, target)) {\n        event.preventDefault();\n\n        // If the URL hasn't changed, a regular <a> will do a replace instead of\n        // a push, so do the same here unless the replace prop is explicitly set\n        let replace =\n          replaceProp !== undefined\n            ? replaceProp\n            : createPath(location) === createPath(path);\n\n        navigate(to, { replace, state, preventScrollReset, relative });\n      }\n    },\n    [\n      location,\n      navigate,\n      path,\n      replaceProp,\n      state,\n      target,\n      to,\n      preventScrollReset,\n      relative,\n    ]\n  );\n}\n\n/**\n * A convenient wrapper for reading and writing search parameters via the\n * URLSearchParams interface.\n */\nexport function useSearchParams(\n  defaultInit?: URLSearchParamsInit\n): [URLSearchParams, SetURLSearchParams] {\n  warning(\n    typeof URLSearchParams !== \"undefined\",\n    `You cannot use the \\`useSearchParams\\` hook in a browser that does not ` +\n      `support the URLSearchParams API. If you need to support Internet ` +\n      `Explorer 11, we recommend you load a polyfill such as ` +\n      `https://github.com/ungap/url-search-params\\n\\n` +\n      `If you're unsure how to load polyfills, we recommend you check out ` +\n      `https://polyfill.io/v3/ which provides some recommendations about how ` +\n      `to load polyfills only for users that need them, instead of for every ` +\n      `user.`\n  );\n\n  let defaultSearchParamsRef = React.useRef(createSearchParams(defaultInit));\n  let hasSetSearchParamsRef = React.useRef(false);\n\n  let location = useLocation();\n  let searchParams = React.useMemo(\n    () =>\n      // Only merge in the defaults if we haven't yet called setSearchParams.\n      // Once we call that we want those to take precedence, otherwise you can't\n      // remove a param with setSearchParams({}) if it has an initial value\n      getSearchParamsForLocation(\n        location.search,\n        hasSetSearchParamsRef.current ? null : defaultSearchParamsRef.current\n      ),\n    [location.search]\n  );\n\n  let navigate = useNavigate();\n  let setSearchParams = React.useCallback<SetURLSearchParams>(\n    (nextInit, navigateOptions) => {\n      const newSearchParams = createSearchParams(\n        typeof nextInit === \"function\" ? nextInit(searchParams) : nextInit\n      );\n      hasSetSearchParamsRef.current = true;\n      navigate(\"?\" + newSearchParams, navigateOptions);\n    },\n    [navigate, searchParams]\n  );\n\n  return [searchParams, setSearchParams];\n}\n\ntype SetURLSearchParams = (\n  nextInit?:\n    | URLSearchParamsInit\n    | ((prev: URLSearchParams) => URLSearchParamsInit),\n  navigateOpts?: NavigateOptions\n) => void;\n\ntype SubmitTarget =\n  | HTMLFormElement\n  | HTMLButtonElement\n  | HTMLInputElement\n  | FormData\n  | URLSearchParams\n  | { [name: string]: string }\n  | null;\n\n/**\n * Submits a HTML `<form>` to the server without reloading the page.\n */\nexport interface SubmitFunction {\n  (\n    /**\n     * Specifies the `<form>` to be submitted to the server, a specific\n     * `<button>` or `<input type=\"submit\">` to use to submit the form, or some\n     * arbitrary data to submit.\n     *\n     * Note: When using a `<button>` its `name` and `value` will also be\n     * included in the form data that is submitted.\n     */\n    target: SubmitTarget,\n\n    /**\n     * Options that override the `<form>`'s own attributes. Required when\n     * submitting arbitrary data without a backing `<form>`.\n     */\n    options?: SubmitOptions\n  ): void;\n}\n\n/**\n * Returns a function that may be used to programmatically submit a form (or\n * some arbitrary data) to the server.\n */\nexport function useSubmit(): SubmitFunction {\n  return useSubmitImpl();\n}\n\nfunction useSubmitImpl(fetcherKey?: string, routeId?: string): SubmitFunction {\n  let { router } = useDataRouterContext(DataRouterHook.UseSubmitImpl);\n  let defaultAction = useFormAction();\n\n  return React.useCallback(\n    (target, options = {}) => {\n      if (typeof document === \"undefined\") {\n        throw new Error(\n          \"You are calling submit during the server render. \" +\n            \"Try calling submit within a `useEffect` or callback instead.\"\n        );\n      }\n\n      let { method, encType, formData, url } = getFormSubmissionInfo(\n        target,\n        defaultAction,\n        options\n      );\n\n      let href = url.pathname + url.search;\n      let opts = {\n        replace: options.replace,\n        preventScrollReset: options.preventScrollReset,\n        formData,\n        formMethod: method as FormMethod,\n        formEncType: encType as FormEncType,\n      };\n      if (fetcherKey) {\n        invariant(routeId != null, \"No routeId available for useFetcher()\");\n        router.fetch(fetcherKey, routeId, href, opts);\n      } else {\n        router.navigate(href, opts);\n      }\n    },\n    [defaultAction, router, fetcherKey, routeId]\n  );\n}\n\nexport function useFormAction(\n  action?: string,\n  { relative }: { relative?: RelativeRoutingType } = {}\n): string {\n  let { basename } = React.useContext(NavigationContext);\n  let routeContext = React.useContext(RouteContext);\n  invariant(routeContext, \"useFormAction must be used inside a RouteContext\");\n\n  let [match] = routeContext.matches.slice(-1);\n  // Shallow clone path so we can modify it below, otherwise we modify the\n  // object referenced by useMemo inside useResolvedPath\n  let path = { ...useResolvedPath(action ? action : \".\", { relative }) };\n\n  // Previously we set the default action to \".\". The problem with this is that\n  // `useResolvedPath(\".\")` excludes search params and the hash of the resolved\n  // URL. This is the intended behavior of when \".\" is specifically provided as\n  // the form action, but inconsistent w/ browsers when the action is omitted.\n  // https://github.com/remix-run/remix/issues/927\n  let location = useLocation();\n  if (action == null) {\n    // Safe to write to these directly here since if action was undefined, we\n    // would have called useResolvedPath(\".\") which will never include a search\n    // or hash\n    path.search = location.search;\n    path.hash = location.hash;\n\n    // When grabbing search params from the URL, remove the automatically\n    // inserted ?index param so we match the useResolvedPath search behavior\n    // which would not include ?index\n    if (match.route.index) {\n      let params = new URLSearchParams(path.search);\n      params.delete(\"index\");\n      path.search = params.toString() ? `?${params.toString()}` : \"\";\n    }\n  }\n\n  if ((!action || action === \".\") && match.route.index) {\n    path.search = path.search\n      ? path.search.replace(/^\\?/, \"?index&\")\n      : \"?index\";\n  }\n\n  // If we're operating within a basename, prepend it to the pathname prior\n  // to creating the form action.  If this is a root navigation, then just use\n  // the raw basename which allows the basename to have full control over the\n  // presence of a trailing slash on root actions\n  if (basename !== \"/\") {\n    path.pathname =\n      path.pathname === \"/\" ? basename : joinPaths([basename, path.pathname]);\n  }\n\n  return createPath(path);\n}\n\nfunction createFetcherForm(fetcherKey: string, routeId: string) {\n  let FetcherForm = React.forwardRef<HTMLFormElement, FormProps>(\n    (props, ref) => {\n      return (\n        <FormImpl\n          {...props}\n          ref={ref}\n          fetcherKey={fetcherKey}\n          routeId={routeId}\n        />\n      );\n    }\n  );\n  if (__DEV__) {\n    FetcherForm.displayName = \"fetcher.Form\";\n  }\n  return FetcherForm;\n}\n\nlet fetcherId = 0;\n\nexport type FetcherWithComponents<TData> = Fetcher<TData> & {\n  Form: ReturnType<typeof createFetcherForm>;\n  submit: (\n    target: SubmitTarget,\n    // Fetchers cannot replace/preventScrollReset because they are not\n    // navigation events\n    options?: Omit<SubmitOptions, \"replace\" | \"preventScrollReset\">\n  ) => void;\n  load: (href: string) => void;\n};\n\n/**\n * Interacts with route loaders and actions without causing a navigation. Great\n * for any interaction that stays on the same page.\n */\nexport function useFetcher<TData = any>(): FetcherWithComponents<TData> {\n  let { router } = useDataRouterContext(DataRouterHook.UseFetcher);\n\n  let route = React.useContext(RouteContext);\n  invariant(route, `useFetcher must be used inside a RouteContext`);\n\n  let routeId = route.matches[route.matches.length - 1]?.route.id;\n  invariant(\n    routeId != null,\n    `useFetcher can only be used on routes that contain a unique \"id\"`\n  );\n\n  let [fetcherKey] = React.useState(() => String(++fetcherId));\n  let [Form] = React.useState(() => {\n    invariant(routeId, `No routeId available for fetcher.Form()`);\n    return createFetcherForm(fetcherKey, routeId);\n  });\n  let [load] = React.useState(() => (href: string) => {\n    invariant(router, \"No router available for fetcher.load()\");\n    invariant(routeId, \"No routeId available for fetcher.load()\");\n    router.fetch(fetcherKey, routeId, href);\n  });\n  let submit = useSubmitImpl(fetcherKey, routeId);\n\n  let fetcher = router.getFetcher<TData>(fetcherKey);\n\n  let fetcherWithComponents = React.useMemo(\n    () => ({\n      Form,\n      submit,\n      load,\n      ...fetcher,\n    }),\n    [fetcher, Form, submit, load]\n  );\n\n  React.useEffect(() => {\n    // Is this busted when the React team gets real weird and calls effects\n    // twice on mount?  We really just need to garbage collect here when this\n    // fetcher is no longer around.\n    return () => {\n      if (!router) {\n        console.warn(`No fetcher available to clean up from useFetcher()`);\n        return;\n      }\n      router.deleteFetcher(fetcherKey);\n    };\n  }, [router, fetcherKey]);\n\n  return fetcherWithComponents;\n}\n\n/**\n * Provides all fetchers currently on the page. Useful for layouts and parent\n * routes that need to provide pending/optimistic UI regarding the fetch.\n */\nexport function useFetchers(): Fetcher[] {\n  let state = useDataRouterState(DataRouterStateHook.UseFetchers);\n  return [...state.fetchers.values()];\n}\n\nconst SCROLL_RESTORATION_STORAGE_KEY = \"react-router-scroll-positions\";\nlet savedScrollPositions: Record<string, number> = {};\n\n/**\n * When rendered inside a RouterProvider, will restore scroll positions on navigations\n */\nfunction useScrollRestoration({\n  getKey,\n  storageKey,\n}: {\n  getKey?: GetScrollRestorationKeyFunction;\n  storageKey?: string;\n} = {}) {\n  let { router } = useDataRouterContext(DataRouterHook.UseScrollRestoration);\n  let { restoreScrollPosition, preventScrollReset } = useDataRouterState(\n    DataRouterStateHook.UseScrollRestoration\n  );\n  let location = useLocation();\n  let matches = useMatches();\n  let navigation = useNavigation();\n\n  // Trigger manual scroll restoration while we're active\n  React.useEffect(() => {\n    window.history.scrollRestoration = \"manual\";\n    return () => {\n      window.history.scrollRestoration = \"auto\";\n    };\n  }, []);\n\n  // Save positions on pagehide\n  usePageHide(\n    React.useCallback(() => {\n      if (navigation.state === \"idle\") {\n        let key = (getKey ? getKey(location, matches) : null) || location.key;\n        savedScrollPositions[key] = window.scrollY;\n      }\n      sessionStorage.setItem(\n        storageKey || SCROLL_RESTORATION_STORAGE_KEY,\n        JSON.stringify(savedScrollPositions)\n      );\n      window.history.scrollRestoration = \"auto\";\n    }, [storageKey, getKey, navigation.state, location, matches])\n  );\n\n  // Read in any saved scroll locations\n  if (typeof document !== \"undefined\") {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useLayoutEffect(() => {\n      try {\n        let sessionPositions = sessionStorage.getItem(\n          storageKey || SCROLL_RESTORATION_STORAGE_KEY\n        );\n        if (sessionPositions) {\n          savedScrollPositions = JSON.parse(sessionPositions);\n        }\n      } catch (e) {\n        // no-op, use default empty object\n      }\n    }, [storageKey]);\n\n    // Enable scroll restoration in the router\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useLayoutEffect(() => {\n      let disableScrollRestoration = router?.enableScrollRestoration(\n        savedScrollPositions,\n        () => window.scrollY,\n        getKey\n      );\n      return () => disableScrollRestoration && disableScrollRestoration();\n    }, [router, getKey]);\n\n    // Restore scrolling when state.restoreScrollPosition changes\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useLayoutEffect(() => {\n      // Explicit false means don't do anything (used for submissions)\n      if (restoreScrollPosition === false) {\n        return;\n      }\n\n      // been here before, scroll to it\n      if (typeof restoreScrollPosition === \"number\") {\n        window.scrollTo(0, restoreScrollPosition);\n        return;\n      }\n\n      // try to scroll to the hash\n      if (location.hash) {\n        let el = document.getElementById(location.hash.slice(1));\n        if (el) {\n          el.scrollIntoView();\n          return;\n        }\n      }\n\n      // Don't reset if this navigation opted out\n      if (preventScrollReset === true) {\n        return;\n      }\n\n      // otherwise go to the top on new locations\n      window.scrollTo(0, 0);\n    }, [location, restoreScrollPosition, preventScrollReset]);\n  }\n}\n\n/**\n * Setup a callback to be fired on the window's `beforeunload` event. This is\n * useful for saving some data to `window.localStorage` just before the page\n * refreshes.\n *\n * Note: The `callback` argument should be a function created with\n * `React.useCallback()`.\n */\nexport function useBeforeUnload(\n  callback: (event: BeforeUnloadEvent) => any,\n  options?: { capture?: boolean }\n): void {\n  let { capture } = options || {};\n  React.useEffect(() => {\n    let opts = capture != null ? { capture } : undefined;\n    window.addEventListener(\"beforeunload\", callback, opts);\n    return () => {\n      window.removeEventListener(\"beforeunload\", callback, opts);\n    };\n  }, [callback, capture]);\n}\n\n/**\n * Setup a callback to be fired on the window's `pagehide` event. This is\n * useful for saving some data to `window.localStorage` just before the page\n * refreshes.  This event is better supported than beforeunload across browsers.\n *\n * Note: The `callback` argument should be a function created with\n * `React.useCallback()`.\n */\nfunction usePageHide(\n  callback: (event: PageTransitionEvent) => any,\n  options?: { capture?: boolean }\n): void {\n  let { capture } = options || {};\n  React.useEffect(() => {\n    let opts = capture != null ? { capture } : undefined;\n    window.addEventListener(\"pagehide\", callback, opts);\n    return () => {\n      window.removeEventListener(\"pagehide\", callback, opts);\n    };\n  }, [callback, capture]);\n}\n\n/**\n * Wrapper around useBlocker to show a window.confirm prompt to users instead\n * of building a custom UI with useBlocker.\n *\n * Warning: This has *a lot of rough edges* and behaves very differently (and\n * very incorrectly in some cases) across browsers if user click addition\n * back/forward navigations while the confirm is open.  Use at your own risk.\n */\nfunction usePrompt({ when, message }: { when: boolean; message: string }) {\n  let blocker = useBlocker(when);\n\n  React.useEffect(() => {\n    if (blocker.state === \"blocked\" && !when) {\n      blocker.reset();\n    }\n  }, [blocker, when]);\n\n  React.useEffect(() => {\n    if (blocker.state === \"blocked\") {\n      let proceed = window.confirm(message);\n      if (proceed) {\n        setTimeout(blocker.proceed, 0);\n      } else {\n        blocker.reset();\n      }\n    }\n  }, [blocker, message]);\n}\n\nexport { usePrompt as unstable_usePrompt };\n\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Utils\n////////////////////////////////////////////////////////////////////////////////\n\nfunction warning(cond: boolean, message: string): void {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging React Router!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n//#endregion\n\nexport { useScrollRestoration as UNSAFE_useScrollRestoration };\n","import type { FormEncType, FormMethod } from \"@remix-run/router\";\nimport type { RelativeRoutingType } from \"react-router\";\n\nexport const defaultMethod = \"get\";\nconst defaultEncType = \"application/x-www-form-urlencoded\";\n\nexport function isHtmlElement(object: any): object is HTMLElement {\n  return object != null && typeof object.tagName === \"string\";\n}\n\nexport function isButtonElement(object: any): object is HTMLButtonElement {\n  return isHtmlElement(object) && object.tagName.toLowerCase() === \"button\";\n}\n\nexport function isFormElement(object: any): object is HTMLFormElement {\n  return isHtmlElement(object) && object.tagName.toLowerCase() === \"form\";\n}\n\nexport function isInputElement(object: any): object is HTMLInputElement {\n  return isHtmlElement(object) && object.tagName.toLowerCase() === \"input\";\n}\n\ntype LimitedMouseEvent = Pick<\n  MouseEvent,\n  \"button\" | \"metaKey\" | \"altKey\" | \"ctrlKey\" | \"shiftKey\"\n>;\n\nfunction isModifiedEvent(event: LimitedMouseEvent) {\n  return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);\n}\n\nexport function shouldProcessLinkClick(\n  event: LimitedMouseEvent,\n  target?: string\n) {\n  return (\n    event.button === 0 && // Ignore everything but left clicks\n    (!target || target === \"_self\") && // Let browser handle \"target=_blank\" etc.\n    !isModifiedEvent(event) // Ignore clicks with modifier keys\n  );\n}\n\nexport type ParamKeyValuePair = [string, string];\n\nexport type URLSearchParamsInit =\n  | string\n  | ParamKeyValuePair[]\n  | Record<string, string | string[]>\n  | URLSearchParams;\n\n/**\n * Creates a URLSearchParams object using the given initializer.\n *\n * This is identical to `new URLSearchParams(init)` except it also\n * supports arrays as values in the object form of the initializer\n * instead of just strings. This is convenient when you need multiple\n * values for a given key, but don't want to use an array initializer.\n *\n * For example, instead of:\n *\n *   let searchParams = new URLSearchParams([\n *     ['sort', 'name'],\n *     ['sort', 'price']\n *   ]);\n *\n * you can do:\n *\n *   let searchParams = createSearchParams({\n *     sort: ['name', 'price']\n *   });\n */\nexport function createSearchParams(\n  init: URLSearchParamsInit = \"\"\n): URLSearchParams {\n  return new URLSearchParams(\n    typeof init === \"string\" ||\n    Array.isArray(init) ||\n    init instanceof URLSearchParams\n      ? init\n      : Object.keys(init).reduce((memo, key) => {\n          let value = init[key];\n          return memo.concat(\n            Array.isArray(value) ? value.map((v) => [key, v]) : [[key, value]]\n          );\n        }, [] as ParamKeyValuePair[])\n  );\n}\n\nexport function getSearchParamsForLocation(\n  locationSearch: string,\n  defaultSearchParams: URLSearchParams | null\n) {\n  let searchParams = createSearchParams(locationSearch);\n\n  if (defaultSearchParams) {\n    for (let key of defaultSearchParams.keys()) {\n      if (!searchParams.has(key)) {\n        defaultSearchParams.getAll(key).forEach((value) => {\n          searchParams.append(key, value);\n        });\n      }\n    }\n  }\n\n  return searchParams;\n}\n\nexport interface SubmitOptions {\n  /**\n   * The HTTP method used to submit the form. Overrides `<form method>`.\n   * Defaults to \"GET\".\n   */\n  method?: FormMethod;\n\n  /**\n   * The action URL path used to submit the form. Overrides `<form action>`.\n   * Defaults to the path of the current route.\n   *\n   * Note: It is assumed the path is already resolved. If you need to resolve a\n   * relative path, use `useFormAction`.\n   */\n  action?: string;\n\n  /**\n   * The action URL used to submit the form. Overrides `<form encType>`.\n   * Defaults to \"application/x-www-form-urlencoded\".\n   */\n  encType?: FormEncType;\n\n  /**\n   * Set `true` to replace the current entry in the browser's history stack\n   * instead of creating a new one (i.e. stay on \"the same page\"). Defaults\n   * to `false`.\n   */\n  replace?: boolean;\n\n  /**\n   * Determines whether the form action is relative to the route hierarchy or\n   * the pathname.  Use this if you want to opt out of navigating the route\n   * hierarchy and want to instead route based on /-delimited URL segments\n   */\n  relative?: RelativeRoutingType;\n\n  /**\n   * In browser-based environments, prevent resetting scroll after this\n   * navigation when using the <ScrollRestoration> component\n   */\n  preventScrollReset?: boolean;\n}\n\nexport function getFormSubmissionInfo(\n  target:\n    | HTMLFormElement\n    | HTMLButtonElement\n    | HTMLInputElement\n    | FormData\n    | URLSearchParams\n    | { [name: string]: string }\n    | null,\n  defaultAction: string,\n  options: SubmitOptions\n): {\n  url: URL;\n  method: string;\n  encType: string;\n  formData: FormData;\n} {\n  let method: string;\n  let action: string;\n  let encType: string;\n  let formData: FormData;\n\n  if (isFormElement(target)) {\n    let submissionTrigger: HTMLButtonElement | HTMLInputElement = (\n      options as any\n    ).submissionTrigger;\n\n    method = options.method || target.getAttribute(\"method\") || defaultMethod;\n    action = options.action || target.getAttribute(\"action\") || defaultAction;\n    encType =\n      options.encType || target.getAttribute(\"enctype\") || defaultEncType;\n\n    formData = new FormData(target);\n\n    if (submissionTrigger && submissionTrigger.name) {\n      formData.append(submissionTrigger.name, submissionTrigger.value);\n    }\n  } else if (\n    isButtonElement(target) ||\n    (isInputElement(target) &&\n      (target.type === \"submit\" || target.type === \"image\"))\n  ) {\n    let form = target.form;\n\n    if (form == null) {\n      throw new Error(\n        `Cannot submit a <button> or <input type=\"submit\"> without a <form>`\n      );\n    }\n\n    // <button>/<input type=\"submit\"> may override attributes of <form>\n\n    method =\n      options.method ||\n      target.getAttribute(\"formmethod\") ||\n      form.getAttribute(\"method\") ||\n      defaultMethod;\n    action =\n      options.action ||\n      target.getAttribute(\"formaction\") ||\n      form.getAttribute(\"action\") ||\n      defaultAction;\n    encType =\n      options.encType ||\n      target.getAttribute(\"formenctype\") ||\n      form.getAttribute(\"enctype\") ||\n      defaultEncType;\n\n    formData = new FormData(form);\n\n    // Include name + value from a <button>, appending in case the button name\n    // matches an existing input name\n    if (target.name) {\n      formData.append(target.name, target.value);\n    }\n  } else if (isHtmlElement(target)) {\n    throw new Error(\n      `Cannot submit element that is not <form>, <button>, or ` +\n        `<input type=\"submit|image\">`\n    );\n  } else {\n    method = options.method || defaultMethod;\n    action = options.action || defaultAction;\n    encType = options.encType || defaultEncType;\n\n    if (target instanceof FormData) {\n      formData = target;\n    } else {\n      formData = new FormData();\n\n      if (target instanceof URLSearchParams) {\n        for (let [name, value] of target) {\n          formData.append(name, value);\n        }\n      } else if (target != null) {\n        for (let name of Object.keys(target)) {\n          formData.append(name, target[name]);\n        }\n      }\n    }\n  }\n\n  let { protocol, host } = window.location;\n  let url = new URL(action, `${protocol}//${host}`);\n\n  return { url, method: method.toLowerCase(), encType, formData };\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport * as React from \"react\";\n\n/**\n * inlined Object.is polyfill to avoid requiring consumers ship their own\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\n */\nfunction isPolyfill(x: any, y: any) {\n  return (\n    (x === y && (x !== 0 || 1 / x === 1 / y)) || (x !== x && y !== y) // eslint-disable-line no-self-compare\n  );\n}\n\nconst is: (x: any, y: any) => boolean =\n  typeof Object.is === \"function\" ? Object.is : isPolyfill;\n\n// Intentionally not using named imports because Rollup uses dynamic\n// dispatch for CommonJS interop named imports.\nconst { useState, useEffect, useLayoutEffect, useDebugValue } = React;\n\nlet didWarnOld18Alpha = false;\nlet didWarnUncachedGetSnapshot = false;\n\n// Disclaimer: This shim breaks many of the rules of React, and only works\n// because of a very particular set of implementation details and assumptions\n// -- change any one of them and it will break. The most important assumption\n// is that updates are always synchronous, because concurrent rendering is\n// only available in versions of React that also have a built-in\n// useSyncExternalStore API. And we only use this shim when the built-in API\n// does not exist.\n//\n// Do not assume that the clever hacks used by this hook also work in general.\n// The point of this shim is to replace the need for hacks by other libraries.\nexport function useSyncExternalStore<T>(\n  subscribe: (fn: () => void) => () => void,\n  getSnapshot: () => T,\n  // Note: The shim does not use getServerSnapshot, because pre-18 versions of\n  // React do not expose a way to check if we're hydrating. So users of the shim\n  // will need to track that themselves and return the correct value\n  // from `getSnapshot`.\n  getServerSnapshot?: () => T\n): T {\n  if (__DEV__) {\n    if (!didWarnOld18Alpha) {\n      if (\"startTransition\" in React) {\n        didWarnOld18Alpha = true;\n        console.error(\n          \"You are using an outdated, pre-release alpha of React 18 that \" +\n            \"does not support useSyncExternalStore. The \" +\n            \"use-sync-external-store shim will not work correctly. Upgrade \" +\n            \"to a newer pre-release.\"\n        );\n      }\n    }\n  }\n\n  // Read the current snapshot from the store on every render. Again, this\n  // breaks the rules of React, and only works here because of specific\n  // implementation details, most importantly that updates are\n  // always synchronous.\n  const value = getSnapshot();\n  if (__DEV__) {\n    if (!didWarnUncachedGetSnapshot) {\n      const cachedValue = getSnapshot();\n      if (!is(value, cachedValue)) {\n        console.error(\n          \"The result of getSnapshot should be cached to avoid an infinite loop\"\n        );\n        didWarnUncachedGetSnapshot = true;\n      }\n    }\n  }\n\n  // Because updates are synchronous, we don't queue them. Instead we force a\n  // re-render whenever the subscribed state changes by updating an some\n  // arbitrary useState hook. Then, during render, we call getSnapshot to read\n  // the current value.\n  //\n  // Because we don't actually use the state returned by the useState hook, we\n  // can save a bit of memory by storing other stuff in that slot.\n  //\n  // To implement the early bailout, we need to track some things on a mutable\n  // object. Usually, we would put that in a useRef hook, but we can stash it in\n  // our useState hook instead.\n  //\n  // To force a re-render, we call forceUpdate({inst}). That works because the\n  // new object always fails an equality check.\n  const [{ inst }, forceUpdate] = useState({ inst: { value, getSnapshot } });\n\n  // Track the latest getSnapshot function with a ref. This needs to be updated\n  // in the layout phase so we can access it during the tearing check that\n  // happens on subscribe.\n  useLayoutEffect(() => {\n    inst.value = value;\n    inst.getSnapshot = getSnapshot;\n\n    // Whenever getSnapshot or subscribe changes, we need to check in the\n    // commit phase if there was an interleaved mutation. In concurrent mode\n    // this can happen all the time, but even in synchronous mode, an earlier\n    // effect may have mutated the store.\n    if (checkIfSnapshotChanged(inst)) {\n      // Force a re-render.\n      forceUpdate({ inst });\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [subscribe, value, getSnapshot]);\n\n  useEffect(() => {\n    // Check for changes right before subscribing. Subsequent changes will be\n    // detected in the subscription handler.\n    if (checkIfSnapshotChanged(inst)) {\n      // Force a re-render.\n      forceUpdate({ inst });\n    }\n    const handleStoreChange = () => {\n      // TODO: Because there is no cross-renderer API for batching updates, it's\n      // up to the consumer of this library to wrap their subscription event\n      // with unstable_batchedUpdates. Should we try to detect when this isn't\n      // the case and print a warning in development?\n\n      // The store changed. Check if the snapshot changed since the last time we\n      // read from the store.\n      if (checkIfSnapshotChanged(inst)) {\n        // Force a re-render.\n        forceUpdate({ inst });\n      }\n    };\n    // Subscribe to the store and return a clean-up function.\n    return subscribe(handleStoreChange);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [subscribe]);\n\n  useDebugValue(value);\n  return value;\n}\n\nfunction checkIfSnapshotChanged(inst: any) {\n  const latestGetSnapshot = inst.getSnapshot;\n  const prevValue = inst.value;\n  try {\n    const nextValue = latestGetSnapshot();\n    return !is(prevValue, nextValue);\n  } catch (error) {\n    return true;\n  }\n}\n","/**\n * Inlined into the react-router repo since use-sync-external-store does not\n * provide a UMD-compatible package, so we need this to be able to distribute\n * UMD react-router bundles\n */\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport * as React from \"react\";\n\nimport { useSyncExternalStore as client } from \"./useSyncExternalStoreShimClient\";\nimport { useSyncExternalStore as server } from \"./useSyncExternalStoreShimServer\";\n\nconst canUseDOM: boolean = !!(\n  typeof window !== \"undefined\" &&\n  typeof window.document !== \"undefined\" &&\n  typeof window.document.createElement !== \"undefined\"\n);\nconst isServerEnvironment = !canUseDOM;\nconst shim = isServerEnvironment ? server : client;\n\nexport const useSyncExternalStore =\n  \"useSyncExternalStore\" in React\n    ? ((module) => module.useSyncExternalStore)(React)\n    : shim;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nexport function useSyncExternalStore<T>(\n  subscribe: (fn: () => void) => () => void,\n  getSnapshot: () => T,\n  getServerSnapshot?: () => T\n): T {\n  // Note: The shim does not use getServerSnapshot, because pre-18 versions of\n  // React do not expose a way to check if we're hydrating. So users of the shim\n  // will need to track that themselves and return the correct value\n  // from `getSnapshot`.\n  return getSnapshot();\n}\n","import * as React from \"react\";\nimport type {\n  AgnosticRouteMatch,\n  AgnosticIndexRouteObject,\n  AgnosticNonIndexRouteObject,\n  History,\n  Location,\n  Router,\n  StaticHandlerContext,\n  To,\n  TrackedPromise,\n} from \"@remix-run/router\";\nimport type { Action as NavigationType } from \"@remix-run/router\";\n\n// Create react-specific types from the agnostic types in @remix-run/router to\n// export from react-router\nexport interface IndexRouteObject {\n  caseSensitive?: AgnosticIndexRouteObject[\"caseSensitive\"];\n  path?: AgnosticIndexRouteObject[\"path\"];\n  id?: AgnosticIndexRouteObject[\"id\"];\n  loader?: AgnosticIndexRouteObject[\"loader\"];\n  action?: AgnosticIndexRouteObject[\"action\"];\n  hasErrorBoundary?: AgnosticIndexRouteObject[\"hasErrorBoundary\"];\n  shouldRevalidate?: AgnosticIndexRouteObject[\"shouldRevalidate\"];\n  handle?: AgnosticIndexRouteObject[\"handle\"];\n  index: true;\n  children?: undefined;\n  element?: React.ReactNode | null;\n  errorElement?: React.ReactNode | null;\n}\n\nexport interface NonIndexRouteObject {\n  caseSensitive?: AgnosticNonIndexRouteObject[\"caseSensitive\"];\n  path?: AgnosticNonIndexRouteObject[\"path\"];\n  id?: AgnosticNonIndexRouteObject[\"id\"];\n  loader?: AgnosticNonIndexRouteObject[\"loader\"];\n  action?: AgnosticNonIndexRouteObject[\"action\"];\n  hasErrorBoundary?: AgnosticNonIndexRouteObject[\"hasErrorBoundary\"];\n  shouldRevalidate?: AgnosticNonIndexRouteObject[\"shouldRevalidate\"];\n  handle?: AgnosticNonIndexRouteObject[\"handle\"];\n  index?: false;\n  children?: RouteObject[];\n  element?: React.ReactNode | null;\n  errorElement?: React.ReactNode | null;\n}\n\nexport type RouteObject = IndexRouteObject | NonIndexRouteObject;\n\nexport type DataRouteObject = RouteObject & {\n  children?: DataRouteObject[];\n  id: string;\n};\n\nexport interface RouteMatch<\n  ParamKey extends string = string,\n  RouteObjectType extends RouteObject = RouteObject\n> extends AgnosticRouteMatch<ParamKey, RouteObjectType> {}\n\nexport interface DataRouteMatch extends RouteMatch<string, DataRouteObject> {}\n\nexport interface DataRouterContextObject extends NavigationContextObject {\n  router: Router;\n  staticContext?: StaticHandlerContext;\n}\n\nexport const DataRouterContext =\n  React.createContext<DataRouterContextObject | null>(null);\nif (__DEV__) {\n  DataRouterContext.displayName = \"DataRouter\";\n}\n\nexport const DataRouterStateContext = React.createContext<\n  Router[\"state\"] | null\n>(null);\nif (__DEV__) {\n  DataRouterStateContext.displayName = \"DataRouterState\";\n}\n\nexport const AwaitContext = React.createContext<TrackedPromise | null>(null);\nif (__DEV__) {\n  AwaitContext.displayName = \"Await\";\n}\n\nexport type RelativeRoutingType = \"route\" | \"path\";\n\nexport interface NavigateOptions {\n  replace?: boolean;\n  state?: any;\n  preventScrollReset?: boolean;\n  relative?: RelativeRoutingType;\n}\n\n/**\n * A Navigator is a \"location changer\"; it's how you get to different locations.\n *\n * Every history instance conforms to the Navigator interface, but the\n * distinction is useful primarily when it comes to the low-level <Router> API\n * where both the location and a navigator must be provided separately in order\n * to avoid \"tearing\" that may occur in a suspense-enabled app if the action\n * and/or location were to be read directly from the history instance.\n */\nexport interface Navigator {\n  createHref: History[\"createHref\"];\n  // Optional for backwards-compat with Router/HistoryRouter usage (edge case)\n  encodeLocation?: History[\"encodeLocation\"];\n  go: History[\"go\"];\n  push(to: To, state?: any, opts?: NavigateOptions): void;\n  replace(to: To, state?: any, opts?: NavigateOptions): void;\n}\n\ninterface NavigationContextObject {\n  basename: string;\n  navigator: Navigator;\n  static: boolean;\n}\n\nexport const NavigationContext = React.createContext<NavigationContextObject>(\n  null!\n);\n\nif (__DEV__) {\n  NavigationContext.displayName = \"Navigation\";\n}\n\ninterface LocationContextObject {\n  location: Location;\n  navigationType: NavigationType;\n}\n\nexport const LocationContext = React.createContext<LocationContextObject>(\n  null!\n);\n\nif (__DEV__) {\n  LocationContext.displayName = \"Location\";\n}\n\nexport interface RouteContextObject {\n  outlet: React.ReactElement | null;\n  matches: RouteMatch[];\n}\n\nexport const RouteContext = React.createContext<RouteContextObject>({\n  outlet: null,\n  matches: [],\n});\n\nif (__DEV__) {\n  RouteContext.displayName = \"Route\";\n}\n\nexport const RouteErrorContext = React.createContext<any>(null);\n\nif (__DEV__) {\n  RouteErrorContext.displayName = \"RouteError\";\n}\n","import * as React from \"react\";\nimport type {\n  Blocker,\n  BlockerFunction,\n  Location,\n  ParamParseKey,\n  Params,\n  Path,\n  PathMatch,\n  PathPattern,\n  Router as RemixRouter,\n  To,\n} from \"@remix-run/router\";\nimport {\n  Action as NavigationType,\n  invariant,\n  isRouteErrorResponse,\n  joinPaths,\n  matchPath,\n  matchRoutes,\n  parsePath,\n  resolveTo,\n  warning,\n  UNSAFE_getPathContributingMatches as getPathContributingMatches,\n} from \"@remix-run/router\";\n\nimport type {\n  NavigateOptions,\n  RouteContextObject,\n  RouteMatch,\n  RouteObject,\n  DataRouteMatch,\n  RelativeRoutingType,\n} from \"./context\";\nimport {\n  DataRouterContext,\n  DataRouterStateContext,\n  LocationContext,\n  NavigationContext,\n  RouteContext,\n  RouteErrorContext,\n  AwaitContext,\n} from \"./context\";\n\n/**\n * Returns the full href for the given \"to\" value. This is useful for building\n * custom links that are also accessible and preserve right-click behavior.\n *\n * @see https://reactrouter.com/hooks/use-href\n */\nexport function useHref(\n  to: To,\n  { relative }: { relative?: RelativeRoutingType } = {}\n): string {\n  invariant(\n    useInRouterContext(),\n    // TODO: This error is probably because they somehow have 2 versions of the\n    // router loaded. We can help them understand how to avoid that.\n    `useHref() may be used only in the context of a <Router> component.`\n  );\n\n  let { basename, navigator } = React.useContext(NavigationContext);\n  let { hash, pathname, search } = useResolvedPath(to, { relative });\n\n  let joinedPathname = pathname;\n\n  // If we're operating within a basename, prepend it to the pathname prior\n  // to creating the href.  If this is a root navigation, then just use the raw\n  // basename which allows the basename to have full control over the presence\n  // of a trailing slash on root links\n  if (basename !== \"/\") {\n    joinedPathname =\n      pathname === \"/\" ? basename : joinPaths([basename, pathname]);\n  }\n\n  return navigator.createHref({ pathname: joinedPathname, search, hash });\n}\n\n/**\n * Returns true if this component is a descendant of a <Router>.\n *\n * @see https://reactrouter.com/hooks/use-in-router-context\n */\nexport function useInRouterContext(): boolean {\n  return React.useContext(LocationContext) != null;\n}\n\n/**\n * Returns the current location object, which represents the current URL in web\n * browsers.\n *\n * Note: If you're using this it may mean you're doing some of your own\n * \"routing\" in your app, and we'd like to know what your use case is. We may\n * be able to provide something higher-level to better suit your needs.\n *\n * @see https://reactrouter.com/hooks/use-location\n */\nexport function useLocation(): Location {\n  invariant(\n    useInRouterContext(),\n    // TODO: This error is probably because they somehow have 2 versions of the\n    // router loaded. We can help them understand how to avoid that.\n    `useLocation() may be used only in the context of a <Router> component.`\n  );\n\n  return React.useContext(LocationContext).location;\n}\n\n/**\n * Returns the current navigation action which describes how the router came to\n * the current location, either by a pop, push, or replace on the history stack.\n *\n * @see https://reactrouter.com/hooks/use-navigation-type\n */\nexport function useNavigationType(): NavigationType {\n  return React.useContext(LocationContext).navigationType;\n}\n\n/**\n * Returns a PathMatch object if the given pattern matches the current URL.\n * This is useful for components that need to know \"active\" state, e.g.\n * <NavLink>.\n *\n * @see https://reactrouter.com/hooks/use-match\n */\nexport function useMatch<\n  ParamKey extends ParamParseKey<Path>,\n  Path extends string\n>(pattern: PathPattern<Path> | Path): PathMatch<ParamKey> | null {\n  invariant(\n    useInRouterContext(),\n    // TODO: This error is probably because they somehow have 2 versions of the\n    // router loaded. We can help them understand how to avoid that.\n    `useMatch() may be used only in the context of a <Router> component.`\n  );\n\n  let { pathname } = useLocation();\n  return React.useMemo(\n    () => matchPath<ParamKey, Path>(pattern, pathname),\n    [pathname, pattern]\n  );\n}\n\n/**\n * The interface for the navigate() function returned from useNavigate().\n */\nexport interface NavigateFunction {\n  (to: To, options?: NavigateOptions): void;\n  (delta: number): void;\n}\n\n/**\n * Returns an imperative method for changing the location. Used by <Link>s, but\n * may also be used by other elements to change the location.\n *\n * @see https://reactrouter.com/hooks/use-navigate\n */\nexport function useNavigate(): NavigateFunction {\n  invariant(\n    useInRouterContext(),\n    // TODO: This error is probably because they somehow have 2 versions of the\n    // router loaded. We can help them understand how to avoid that.\n    `useNavigate() may be used only in the context of a <Router> component.`\n  );\n\n  let { basename, navigator } = React.useContext(NavigationContext);\n  let { matches } = React.useContext(RouteContext);\n  let { pathname: locationPathname } = useLocation();\n\n  let routePathnamesJson = JSON.stringify(\n    getPathContributingMatches(matches).map((match) => match.pathnameBase)\n  );\n\n  let activeRef = React.useRef(false);\n  React.useEffect(() => {\n    activeRef.current = true;\n  });\n\n  let navigate: NavigateFunction = React.useCallback(\n    (to: To | number, options: NavigateOptions = {}) => {\n      warning(\n        activeRef.current,\n        `You should call navigate() in a React.useEffect(), not when ` +\n          `your component is first rendered.`\n      );\n\n      if (!activeRef.current) return;\n\n      if (typeof to === \"number\") {\n        navigator.go(to);\n        return;\n      }\n\n      let path = resolveTo(\n        to,\n        JSON.parse(routePathnamesJson),\n        locationPathname,\n        options.relative === \"path\"\n      );\n\n      // If we're operating within a basename, prepend it to the pathname prior\n      // to handing off to history.  If this is a root navigation, then we\n      // navigate to the raw basename which allows the basename to have full\n      // control over the presence of a trailing slash on root links\n      if (basename !== \"/\") {\n        path.pathname =\n          path.pathname === \"/\"\n            ? basename\n            : joinPaths([basename, path.pathname]);\n      }\n\n      (!!options.replace ? navigator.replace : navigator.push)(\n        path,\n        options.state,\n        options\n      );\n    },\n    [basename, navigator, routePathnamesJson, locationPathname]\n  );\n\n  return navigate;\n}\n\nconst OutletContext = React.createContext<unknown>(null);\n\n/**\n * Returns the context (if provided) for the child route at this level of the route\n * hierarchy.\n * @see https://reactrouter.com/hooks/use-outlet-context\n */\nexport function useOutletContext<Context = unknown>(): Context {\n  return React.useContext(OutletContext) as Context;\n}\n\n/**\n * Returns the element for the child route at this level of the route\n * hierarchy. Used internally by <Outlet> to render child routes.\n *\n * @see https://reactrouter.com/hooks/use-outlet\n */\nexport function useOutlet(context?: unknown): React.ReactElement | null {\n  let outlet = React.useContext(RouteContext).outlet;\n  if (outlet) {\n    return (\n      <OutletContext.Provider value={context}>{outlet}</OutletContext.Provider>\n    );\n  }\n  return outlet;\n}\n\n/**\n * Returns an object of key/value pairs of the dynamic params from the current\n * URL that were matched by the route path.\n *\n * @see https://reactrouter.com/hooks/use-params\n */\nexport function useParams<\n  ParamsOrKey extends string | Record<string, string | undefined> = string\n>(): Readonly<\n  [ParamsOrKey] extends [string] ? Params<ParamsOrKey> : Partial<ParamsOrKey>\n> {\n  let { matches } = React.useContext(RouteContext);\n  let routeMatch = matches[matches.length - 1];\n  return routeMatch ? (routeMatch.params as any) : {};\n}\n\n/**\n * Resolves the pathname of the given `to` value against the current location.\n *\n * @see https://reactrouter.com/hooks/use-resolved-path\n */\nexport function useResolvedPath(\n  to: To,\n  { relative }: { relative?: RelativeRoutingType } = {}\n): Path {\n  let { matches } = React.useContext(RouteContext);\n  let { pathname: locationPathname } = useLocation();\n\n  let routePathnamesJson = JSON.stringify(\n    getPathContributingMatches(matches).map((match) => match.pathnameBase)\n  );\n\n  return React.useMemo(\n    () =>\n      resolveTo(\n        to,\n        JSON.parse(routePathnamesJson),\n        locationPathname,\n        relative === \"path\"\n      ),\n    [to, routePathnamesJson, locationPathname, relative]\n  );\n}\n\n/**\n * Returns the element of the route that matched the current location, prepared\n * with the correct context to render the remainder of the route tree. Route\n * elements in the tree must render an <Outlet> to render their child route's\n * element.\n *\n * @see https://reactrouter.com/hooks/use-routes\n */\nexport function useRoutes(\n  routes: RouteObject[],\n  locationArg?: Partial<Location> | string\n): React.ReactElement | null {\n  invariant(\n    useInRouterContext(),\n    // TODO: This error is probably because they somehow have 2 versions of the\n    // router loaded. We can help them understand how to avoid that.\n    `useRoutes() may be used only in the context of a <Router> component.`\n  );\n\n  let { navigator } = React.useContext(NavigationContext);\n  let dataRouterStateContext = React.useContext(DataRouterStateContext);\n  let { matches: parentMatches } = React.useContext(RouteContext);\n  let routeMatch = parentMatches[parentMatches.length - 1];\n  let parentParams = routeMatch ? routeMatch.params : {};\n  let parentPathname = routeMatch ? routeMatch.pathname : \"/\";\n  let parentPathnameBase = routeMatch ? routeMatch.pathnameBase : \"/\";\n  let parentRoute = routeMatch && routeMatch.route;\n\n  if (__DEV__) {\n    // You won't get a warning about 2 different <Routes> under a <Route>\n    // without a trailing *, but this is a best-effort warning anyway since we\n    // cannot even give the warning unless they land at the parent route.\n    //\n    // Example:\n    //\n    // <Routes>\n    //   {/* This route path MUST end with /* because otherwise\n    //       it will never match /blog/post/123 */}\n    //   <Route path=\"blog\" element={<Blog />} />\n    //   <Route path=\"blog/feed\" element={<BlogFeed />} />\n    // </Routes>\n    //\n    // function Blog() {\n    //   return (\n    //     <Routes>\n    //       <Route path=\"post/:id\" element={<Post />} />\n    //     </Routes>\n    //   );\n    // }\n    let parentPath = (parentRoute && parentRoute.path) || \"\";\n    warningOnce(\n      parentPathname,\n      !parentRoute || parentPath.endsWith(\"*\"),\n      `You rendered descendant <Routes> (or called \\`useRoutes()\\`) at ` +\n        `\"${parentPathname}\" (under <Route path=\"${parentPath}\">) but the ` +\n        `parent route path has no trailing \"*\". This means if you navigate ` +\n        `deeper, the parent won't match anymore and therefore the child ` +\n        `routes will never render.\\n\\n` +\n        `Please change the parent <Route path=\"${parentPath}\"> to <Route ` +\n        `path=\"${parentPath === \"/\" ? \"*\" : `${parentPath}/*`}\">.`\n    );\n  }\n\n  let locationFromContext = useLocation();\n\n  let location;\n  if (locationArg) {\n    let parsedLocationArg =\n      typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n\n    invariant(\n      parentPathnameBase === \"/\" ||\n        parsedLocationArg.pathname?.startsWith(parentPathnameBase),\n      `When overriding the location using \\`<Routes location>\\` or \\`useRoutes(routes, location)\\`, ` +\n        `the location pathname must begin with the portion of the URL pathname that was ` +\n        `matched by all parent routes. The current pathname base is \"${parentPathnameBase}\" ` +\n        `but pathname \"${parsedLocationArg.pathname}\" was given in the \\`location\\` prop.`\n    );\n\n    location = parsedLocationArg;\n  } else {\n    location = locationFromContext;\n  }\n\n  let pathname = location.pathname || \"/\";\n  let remainingPathname =\n    parentPathnameBase === \"/\"\n      ? pathname\n      : pathname.slice(parentPathnameBase.length) || \"/\";\n\n  let matches = matchRoutes(routes, { pathname: remainingPathname });\n\n  if (__DEV__) {\n    warning(\n      parentRoute || matches != null,\n      `No routes matched location \"${location.pathname}${location.search}${location.hash}\" `\n    );\n\n    warning(\n      matches == null ||\n        matches[matches.length - 1].route.element !== undefined,\n      `Matched leaf route at location \"${location.pathname}${location.search}${location.hash}\" does not have an element. ` +\n        `This means it will render an <Outlet /> with a null value by default resulting in an \"empty\" page.`\n    );\n  }\n\n  let renderedMatches = _renderMatches(\n    matches &&\n      matches.map((match) =>\n        Object.assign({}, match, {\n          params: Object.assign({}, parentParams, match.params),\n          pathname: joinPaths([\n            parentPathnameBase,\n            // Re-encode pathnames that were decoded inside matchRoutes\n            navigator.encodeLocation\n              ? navigator.encodeLocation(match.pathname).pathname\n              : match.pathname,\n          ]),\n          pathnameBase:\n            match.pathnameBase === \"/\"\n              ? parentPathnameBase\n              : joinPaths([\n                  parentPathnameBase,\n                  // Re-encode pathnames that were decoded inside matchRoutes\n                  navigator.encodeLocation\n                    ? navigator.encodeLocation(match.pathnameBase).pathname\n                    : match.pathnameBase,\n                ]),\n        })\n      ),\n    parentMatches,\n    dataRouterStateContext || undefined\n  );\n\n  // When a user passes in a `locationArg`, the associated routes need to\n  // be wrapped in a new `LocationContext.Provider` in order for `useLocation`\n  // to use the scoped location instead of the global location.\n  if (locationArg && renderedMatches) {\n    return (\n      <LocationContext.Provider\n        value={{\n          location: {\n            pathname: \"/\",\n            search: \"\",\n            hash: \"\",\n            state: null,\n            key: \"default\",\n            ...location,\n          },\n          navigationType: NavigationType.Pop,\n        }}\n      >\n        {renderedMatches}\n      </LocationContext.Provider>\n    );\n  }\n\n  return renderedMatches;\n}\n\nfunction DefaultErrorElement() {\n  let error = useRouteError();\n  let message = isRouteErrorResponse(error)\n    ? `${error.status} ${error.statusText}`\n    : error instanceof Error\n    ? error.message\n    : JSON.stringify(error);\n  let stack = error instanceof Error ? error.stack : null;\n  let lightgrey = \"rgba(200,200,200, 0.5)\";\n  let preStyles = { padding: \"0.5rem\", backgroundColor: lightgrey };\n  let codeStyles = { padding: \"2px 4px\", backgroundColor: lightgrey };\n\n  let devInfo = null;\n  if (__DEV__) {\n    devInfo = (\n      <>\n        <p>💿 Hey developer 👋</p>\n        <p>\n          You can provide a way better UX than this when your app throws errors\n          by providing your own&nbsp;\n          <code style={codeStyles}>errorElement</code> props on&nbsp;\n          <code style={codeStyles}>&lt;Route&gt;</code>\n        </p>\n      </>\n    );\n  }\n\n  return (\n    <>\n      <h2>Unexpected Application Error!</h2>\n      <h3 style={{ fontStyle: \"italic\" }}>{message}</h3>\n      {stack ? <pre style={preStyles}>{stack}</pre> : null}\n      {devInfo}\n    </>\n  );\n}\n\ntype RenderErrorBoundaryProps = React.PropsWithChildren<{\n  location: Location;\n  error: any;\n  component: React.ReactNode;\n  routeContext: RouteContextObject;\n}>;\n\ntype RenderErrorBoundaryState = {\n  location: Location;\n  error: any;\n};\n\nexport class RenderErrorBoundary extends React.Component<\n  RenderErrorBoundaryProps,\n  RenderErrorBoundaryState\n> {\n  constructor(props: RenderErrorBoundaryProps) {\n    super(props);\n    this.state = {\n      location: props.location,\n      error: props.error,\n    };\n  }\n\n  static getDerivedStateFromError(error: any) {\n    return { error: error };\n  }\n\n  static getDerivedStateFromProps(\n    props: RenderErrorBoundaryProps,\n    state: RenderErrorBoundaryState\n  ) {\n    // When we get into an error state, the user will likely click \"back\" to the\n    // previous page that didn't have an error. Because this wraps the entire\n    // application, that will have no effect--the error page continues to display.\n    // This gives us a mechanism to recover from the error when the location changes.\n    //\n    // Whether we're in an error state or not, we update the location in state\n    // so that when we are in an error state, it gets reset when a new location\n    // comes in and the user recovers from the error.\n    if (state.location !== props.location) {\n      return {\n        error: props.error,\n        location: props.location,\n      };\n    }\n\n    // If we're not changing locations, preserve the location but still surface\n    // any new errors that may come through. We retain the existing error, we do\n    // this because the error provided from the app state may be cleared without\n    // the location changing.\n    return {\n      error: props.error || state.error,\n      location: state.location,\n    };\n  }\n\n  componentDidCatch(error: any, errorInfo: any) {\n    console.error(\n      \"React Router caught the following error during render\",\n      error,\n      errorInfo\n    );\n  }\n\n  render() {\n    return this.state.error ? (\n      <RouteContext.Provider value={this.props.routeContext}>\n        <RouteErrorContext.Provider\n          value={this.state.error}\n          children={this.props.component}\n        />\n      </RouteContext.Provider>\n    ) : (\n      this.props.children\n    );\n  }\n}\n\ninterface RenderedRouteProps {\n  routeContext: RouteContextObject;\n  match: RouteMatch<string, RouteObject>;\n  children: React.ReactNode | null;\n}\n\nfunction RenderedRoute({ routeContext, match, children }: RenderedRouteProps) {\n  let dataRouterContext = React.useContext(DataRouterContext);\n\n  // Track how deep we got in our render pass to emulate SSR componentDidCatch\n  // in a DataStaticRouter\n  if (\n    dataRouterContext &&\n    dataRouterContext.static &&\n    dataRouterContext.staticContext &&\n    match.route.errorElement\n  ) {\n    dataRouterContext.staticContext._deepestRenderedBoundaryId = match.route.id;\n  }\n\n  return (\n    <RouteContext.Provider value={routeContext}>\n      {children}\n    </RouteContext.Provider>\n  );\n}\n\nexport function _renderMatches(\n  matches: RouteMatch[] | null,\n  parentMatches: RouteMatch[] = [],\n  dataRouterState?: RemixRouter[\"state\"]\n): React.ReactElement | null {\n  if (matches == null) {\n    if (dataRouterState?.errors) {\n      // Don't bail if we have data router errors so we can render them in the\n      // boundary.  Use the pre-matched (or shimmed) matches\n      matches = dataRouterState.matches as DataRouteMatch[];\n    } else {\n      return null;\n    }\n  }\n\n  let renderedMatches = matches;\n\n  // If we have data errors, trim matches to the highest error boundary\n  let errors = dataRouterState?.errors;\n  if (errors != null) {\n    let errorIndex = renderedMatches.findIndex(\n      (m) => m.route.id && errors?.[m.route.id]\n    );\n    invariant(\n      errorIndex >= 0,\n      `Could not find a matching route for the current errors: ${errors}`\n    );\n    renderedMatches = renderedMatches.slice(\n      0,\n      Math.min(renderedMatches.length, errorIndex + 1)\n    );\n  }\n\n  return renderedMatches.reduceRight((outlet, match, index) => {\n    let error = match.route.id ? errors?.[match.route.id] : null;\n    // Only data routers handle errors\n    let errorElement = dataRouterState\n      ? match.route.errorElement || <DefaultErrorElement />\n      : null;\n    let matches = parentMatches.concat(renderedMatches.slice(0, index + 1));\n    let getChildren = () => (\n      <RenderedRoute match={match} routeContext={{ outlet, matches }}>\n        {error\n          ? errorElement\n          : match.route.element !== undefined\n          ? match.route.element\n          : outlet}\n      </RenderedRoute>\n    );\n    // Only wrap in an error boundary within data router usages when we have an\n    // errorElement on this route.  Otherwise let it bubble up to an ancestor\n    // errorElement\n    return dataRouterState && (match.route.errorElement || index === 0) ? (\n      <RenderErrorBoundary\n        location={dataRouterState.location}\n        component={errorElement}\n        error={error}\n        children={getChildren()}\n        routeContext={{ outlet: null, matches }}\n      />\n    ) : (\n      getChildren()\n    );\n  }, null as React.ReactElement | null);\n}\n\nenum DataRouterHook {\n  UseBlocker = \"useBlocker\",\n  UseRevalidator = \"useRevalidator\",\n}\n\nenum DataRouterStateHook {\n  UseLoaderData = \"useLoaderData\",\n  UseActionData = \"useActionData\",\n  UseRouteError = \"useRouteError\",\n  UseNavigation = \"useNavigation\",\n  UseRouteLoaderData = \"useRouteLoaderData\",\n  UseMatches = \"useMatches\",\n  UseRevalidator = \"useRevalidator\",\n}\n\nfunction getDataRouterConsoleError(\n  hookName: DataRouterHook | DataRouterStateHook\n) {\n  return `${hookName} must be used within a data router.  See https://reactrouter.com/routers/picking-a-router.`;\n}\n\nfunction useDataRouterContext(hookName: DataRouterHook) {\n  let ctx = React.useContext(DataRouterContext);\n  invariant(ctx, getDataRouterConsoleError(hookName));\n  return ctx;\n}\n\nfunction useDataRouterState(hookName: DataRouterStateHook) {\n  let state = React.useContext(DataRouterStateContext);\n  invariant(state, getDataRouterConsoleError(hookName));\n  return state;\n}\n\nfunction useRouteContext(hookName: DataRouterStateHook) {\n  let route = React.useContext(RouteContext);\n  invariant(route, getDataRouterConsoleError(hookName));\n  return route;\n}\n\nfunction useCurrentRouteId(hookName: DataRouterStateHook) {\n  let route = useRouteContext(hookName);\n  let thisRoute = route.matches[route.matches.length - 1];\n  invariant(\n    thisRoute.route.id,\n    `${hookName} can only be used on routes that contain a unique \"id\"`\n  );\n  return thisRoute.route.id;\n}\n\n/**\n * Returns the current navigation, defaulting to an \"idle\" navigation when\n * no navigation is in progress\n */\nexport function useNavigation() {\n  let state = useDataRouterState(DataRouterStateHook.UseNavigation);\n  return state.navigation;\n}\n\n/**\n * Returns a revalidate function for manually triggering revalidation, as well\n * as the current state of any manual revalidations\n */\nexport function useRevalidator() {\n  let dataRouterContext = useDataRouterContext(DataRouterHook.UseRevalidator);\n  let state = useDataRouterState(DataRouterStateHook.UseRevalidator);\n  return {\n    revalidate: dataRouterContext.router.revalidate,\n    state: state.revalidation,\n  };\n}\n\n/**\n * Returns the active route matches, useful for accessing loaderData for\n * parent/child routes or the route \"handle\" property\n */\nexport function useMatches() {\n  let { matches, loaderData } = useDataRouterState(\n    DataRouterStateHook.UseMatches\n  );\n  return React.useMemo(\n    () =>\n      matches.map((match) => {\n        let { pathname, params } = match;\n        // Note: This structure matches that created by createUseMatchesMatch\n        // in the @remix-run/router , so if you change this please also change\n        // that :)  Eventually we'll DRY this up\n        return {\n          id: match.route.id,\n          pathname,\n          params,\n          data: loaderData[match.route.id] as unknown,\n          handle: match.route.handle as unknown,\n        };\n      }),\n    [matches, loaderData]\n  );\n}\n\n/**\n * Returns the loader data for the nearest ancestor Route loader\n */\nexport function useLoaderData(): unknown {\n  let state = useDataRouterState(DataRouterStateHook.UseLoaderData);\n  let routeId = useCurrentRouteId(DataRouterStateHook.UseLoaderData);\n\n  if (state.errors && state.errors[routeId] != null) {\n    console.error(\n      `You cannot \\`useLoaderData\\` in an errorElement (routeId: ${routeId})`\n    );\n    return undefined;\n  }\n  return state.loaderData[routeId];\n}\n\n/**\n * Returns the loaderData for the given routeId\n */\nexport function useRouteLoaderData(routeId: string): unknown {\n  let state = useDataRouterState(DataRouterStateHook.UseRouteLoaderData);\n  return state.loaderData[routeId];\n}\n\n/**\n * Returns the action data for the nearest ancestor Route action\n */\nexport function useActionData(): unknown {\n  let state = useDataRouterState(DataRouterStateHook.UseActionData);\n\n  let route = React.useContext(RouteContext);\n  invariant(route, `useActionData must be used inside a RouteContext`);\n\n  return Object.values(state?.actionData || {})[0];\n}\n\n/**\n * Returns the nearest ancestor Route error, which could be a loader/action\n * error or a render error.  This is intended to be called from your\n * errorElement to display a proper error message.\n */\nexport function useRouteError(): unknown {\n  let error = React.useContext(RouteErrorContext);\n  let state = useDataRouterState(DataRouterStateHook.UseRouteError);\n  let routeId = useCurrentRouteId(DataRouterStateHook.UseRouteError);\n\n  // If this was a render error, we put it in a RouteError context inside\n  // of RenderErrorBoundary\n  if (error) {\n    return error;\n  }\n\n  // Otherwise look for errors from our data router state\n  return state.errors?.[routeId];\n}\n\n/**\n * Returns the happy-path data from the nearest ancestor <Await /> value\n */\nexport function useAsyncValue(): unknown {\n  let value = React.useContext(AwaitContext);\n  return value?._data;\n}\n\n/**\n * Returns the error from the nearest ancestor <Await /> value\n */\nexport function useAsyncError(): unknown {\n  let value = React.useContext(AwaitContext);\n  return value?._error;\n}\n\n// useBlocker() is a singleton for now since we don't have any compelling use\n// cases for multi-blocker yet\nlet blockerKey = \"blocker-singleton\";\n\n/**\n * Allow the application to block navigations within the SPA and present the\n * user a confirmation dialog to confirm the navigation.  Mostly used to avoid\n * using half-filled form data.  This does not handle hard-reloads or\n * cross-origin navigations.\n */\nexport function useBlocker(shouldBlock: boolean | BlockerFunction): Blocker {\n  let { router } = useDataRouterContext(DataRouterHook.UseBlocker);\n\n  let blockerFunction = React.useCallback<BlockerFunction>(\n    (args) => {\n      return typeof shouldBlock === \"function\"\n        ? !!shouldBlock(args)\n        : !!shouldBlock;\n    },\n    [shouldBlock]\n  );\n\n  let blocker = router.getBlocker(blockerKey, blockerFunction);\n\n  // Cleanup on unmount\n  React.useEffect(() => () => router.deleteBlocker(blockerKey), [router]);\n\n  return blocker;\n}\n\nconst alreadyWarned: Record<string, boolean> = {};\n\nfunction warningOnce(key: string, cond: boolean, message: string) {\n  if (!cond && !alreadyWarned[key]) {\n    alreadyWarned[key] = true;\n    warning(false, message);\n  }\n}\n","import * as React from \"react\";\nimport type {\n  TrackedPromise,\n  InitialEntry,\n  Location,\n  MemoryHistory,\n  Router as RemixRouter,\n  RouterState,\n  To,\n} from \"@remix-run/router\";\nimport {\n  Action as NavigationType,\n  AbortedDeferredError,\n  createMemoryHistory,\n  invariant,\n  parsePath,\n  stripBasename,\n  warning,\n} from \"@remix-run/router\";\nimport { useSyncExternalStore as useSyncExternalStoreShim } from \"./use-sync-external-store-shim\";\n\nimport type {\n  DataRouteObject,\n  IndexRouteObject,\n  RouteMatch,\n  RouteObject,\n  Navigator,\n  NonIndexRouteObject,\n  RelativeRoutingType,\n} from \"./context\";\nimport {\n  LocationContext,\n  NavigationContext,\n  DataRouterContext,\n  DataRouterStateContext,\n  AwaitContext,\n} from \"./context\";\nimport {\n  useAsyncValue,\n  useInRouterContext,\n  useNavigate,\n  useOutlet,\n  useRoutes,\n  _renderMatches,\n} from \"./hooks\";\n\nexport interface RouterProviderProps {\n  fallbackElement?: React.ReactNode;\n  router: RemixRouter;\n}\n\n/**\n * Given a Remix Router instance, render the appropriate UI\n */\nexport function RouterProvider({\n  fallbackElement,\n  router,\n}: RouterProviderProps): React.ReactElement {\n  // Sync router state to our component state to force re-renders\n  let state: RouterState = useSyncExternalStoreShim(\n    router.subscribe,\n    () => router.state,\n    // We have to provide this so React@18 doesn't complain during hydration,\n    // but we pass our serialized hydration data into the router so state here\n    // is already synced with what the server saw\n    () => router.state\n  );\n\n  let navigator = React.useMemo((): Navigator => {\n    return {\n      createHref: router.createHref,\n      encodeLocation: router.encodeLocation,\n      go: (n) => router.navigate(n),\n      push: (to, state, opts) =>\n        router.navigate(to, {\n          state,\n          preventScrollReset: opts?.preventScrollReset,\n        }),\n      replace: (to, state, opts) =>\n        router.navigate(to, {\n          replace: true,\n          state,\n          preventScrollReset: opts?.preventScrollReset,\n        }),\n    };\n  }, [router]);\n\n  let basename = router.basename || \"/\";\n\n  // The fragment and {null} here are important!  We need them to keep React 18's\n  // useId happy when we are server-rendering since we may have a <script> here\n  // containing the hydrated server-side staticContext (from StaticRouterProvider).\n  // useId relies on the component tree structure to generate deterministic id's\n  // so we need to ensure it remains the same on the client even though\n  // we don't need the <script> tag\n  return (\n    <>\n      <DataRouterContext.Provider\n        value={{\n          router,\n          navigator,\n          static: false,\n          // Do we need this?\n          basename,\n        }}\n      >\n        <DataRouterStateContext.Provider value={state}>\n          <Router\n            basename={router.basename}\n            location={router.state.location}\n            navigationType={router.state.historyAction}\n            navigator={navigator}\n          >\n            {router.state.initialized ? <Routes /> : fallbackElement}\n          </Router>\n        </DataRouterStateContext.Provider>\n      </DataRouterContext.Provider>\n      {null}\n    </>\n  );\n}\n\nexport interface MemoryRouterProps {\n  basename?: string;\n  children?: React.ReactNode;\n  initialEntries?: InitialEntry[];\n  initialIndex?: number;\n}\n\n/**\n * A <Router> that stores all entries in memory.\n *\n * @see https://reactrouter.com/router-components/memory-router\n */\nexport function MemoryRouter({\n  basename,\n  children,\n  initialEntries,\n  initialIndex,\n}: MemoryRouterProps): React.ReactElement {\n  let historyRef = React.useRef<MemoryHistory>();\n  if (historyRef.current == null) {\n    historyRef.current = createMemoryHistory({\n      initialEntries,\n      initialIndex,\n      v5Compat: true,\n    });\n  }\n\n  let history = historyRef.current;\n  let [state, setState] = React.useState({\n    action: history.action,\n    location: history.location,\n  });\n\n  React.useLayoutEffect(() => history.listen(setState), [history]);\n\n  return (\n    <Router\n      basename={basename}\n      children={children}\n      location={state.location}\n      navigationType={state.action}\n      navigator={history}\n    />\n  );\n}\n\nexport interface NavigateProps {\n  to: To;\n  replace?: boolean;\n  state?: any;\n  relative?: RelativeRoutingType;\n}\n\n/**\n * Changes the current location.\n *\n * Note: This API is mostly useful in React.Component subclasses that are not\n * able to use hooks. In functional components, we recommend you use the\n * `useNavigate` hook instead.\n *\n * @see https://reactrouter.com/components/navigate\n */\nexport function Navigate({\n  to,\n  replace,\n  state,\n  relative,\n}: NavigateProps): null {\n  invariant(\n    useInRouterContext(),\n    // TODO: This error is probably because they somehow have 2 versions of\n    // the router loaded. We can help them understand how to avoid that.\n    `<Navigate> may be used only in the context of a <Router> component.`\n  );\n\n  warning(\n    !React.useContext(NavigationContext).static,\n    `<Navigate> must not be used on the initial render in a <StaticRouter>. ` +\n      `This is a no-op, but you should modify your code so the <Navigate> is ` +\n      `only ever rendered in response to some user interaction or state change.`\n  );\n\n  let dataRouterState = React.useContext(DataRouterStateContext);\n  let navigate = useNavigate();\n\n  React.useEffect(() => {\n    // Avoid kicking off multiple navigations if we're in the middle of a\n    // data-router navigation, since components get re-rendered when we enter\n    // a submitting/loading state\n    if (dataRouterState && dataRouterState.navigation.state !== \"idle\") {\n      return;\n    }\n    navigate(to, { replace, state, relative });\n  });\n\n  return null;\n}\n\nexport interface OutletProps {\n  context?: unknown;\n}\n\n/**\n * Renders the child route's element, if there is one.\n *\n * @see https://reactrouter.com/components/outlet\n */\nexport function Outlet(props: OutletProps): React.ReactElement | null {\n  return useOutlet(props.context);\n}\n\nexport interface PathRouteProps {\n  caseSensitive?: NonIndexRouteObject[\"caseSensitive\"];\n  path?: NonIndexRouteObject[\"path\"];\n  id?: NonIndexRouteObject[\"id\"];\n  loader?: NonIndexRouteObject[\"loader\"];\n  action?: NonIndexRouteObject[\"action\"];\n  hasErrorBoundary?: NonIndexRouteObject[\"hasErrorBoundary\"];\n  shouldRevalidate?: NonIndexRouteObject[\"shouldRevalidate\"];\n  handle?: NonIndexRouteObject[\"handle\"];\n  index?: false;\n  children?: React.ReactNode;\n  element?: React.ReactNode | null;\n  errorElement?: React.ReactNode | null;\n}\n\nexport interface LayoutRouteProps extends PathRouteProps {}\n\nexport interface IndexRouteProps {\n  caseSensitive?: IndexRouteObject[\"caseSensitive\"];\n  path?: IndexRouteObject[\"path\"];\n  id?: IndexRouteObject[\"id\"];\n  loader?: IndexRouteObject[\"loader\"];\n  action?: IndexRouteObject[\"action\"];\n  hasErrorBoundary?: IndexRouteObject[\"hasErrorBoundary\"];\n  shouldRevalidate?: IndexRouteObject[\"shouldRevalidate\"];\n  handle?: IndexRouteObject[\"handle\"];\n  index: true;\n  children?: undefined;\n  element?: React.ReactNode | null;\n  errorElement?: React.ReactNode | null;\n}\n\nexport type RouteProps = PathRouteProps | LayoutRouteProps | IndexRouteProps;\n\n/**\n * Declares an element that should be rendered at a certain URL path.\n *\n * @see https://reactrouter.com/components/route\n */\nexport function Route(_props: RouteProps): React.ReactElement | null {\n  invariant(\n    false,\n    `A <Route> is only ever to be used as the child of <Routes> element, ` +\n      `never rendered directly. Please wrap your <Route> in a <Routes>.`\n  );\n}\n\nexport interface RouterProps {\n  basename?: string;\n  children?: React.ReactNode;\n  location: Partial<Location> | string;\n  navigationType?: NavigationType;\n  navigator: Navigator;\n  static?: boolean;\n}\n\n/**\n * Provides location context for the rest of the app.\n *\n * Note: You usually won't render a <Router> directly. Instead, you'll render a\n * router that is more specific to your environment such as a <BrowserRouter>\n * in web browsers or a <StaticRouter> for server rendering.\n *\n * @see https://reactrouter.com/router-components/router\n */\nexport function Router({\n  basename: basenameProp = \"/\",\n  children = null,\n  location: locationProp,\n  navigationType = NavigationType.Pop,\n  navigator,\n  static: staticProp = false,\n}: RouterProps): React.ReactElement | null {\n  invariant(\n    !useInRouterContext(),\n    `You cannot render a <Router> inside another <Router>.` +\n      ` You should never have more than one in your app.`\n  );\n\n  // Preserve trailing slashes on basename, so we can let the user control\n  // the enforcement of trailing slashes throughout the app\n  let basename = basenameProp.replace(/^\\/*/, \"/\");\n  let navigationContext = React.useMemo(\n    () => ({ basename, navigator, static: staticProp }),\n    [basename, navigator, staticProp]\n  );\n\n  if (typeof locationProp === \"string\") {\n    locationProp = parsePath(locationProp);\n  }\n\n  let {\n    pathname = \"/\",\n    search = \"\",\n    hash = \"\",\n    state = null,\n    key = \"default\",\n  } = locationProp;\n\n  let location = React.useMemo(() => {\n    let trailingPathname = stripBasename(pathname, basename);\n\n    if (trailingPathname == null) {\n      return null;\n    }\n\n    return {\n      pathname: trailingPathname,\n      search,\n      hash,\n      state,\n      key,\n    };\n  }, [basename, pathname, search, hash, state, key]);\n\n  warning(\n    location != null,\n    `<Router basename=\"${basename}\"> is not able to match the URL ` +\n      `\"${pathname}${search}${hash}\" because it does not start with the ` +\n      `basename, so the <Router> won't render anything.`\n  );\n\n  if (location == null) {\n    return null;\n  }\n\n  return (\n    <NavigationContext.Provider value={navigationContext}>\n      <LocationContext.Provider\n        children={children}\n        value={{ location, navigationType }}\n      />\n    </NavigationContext.Provider>\n  );\n}\n\nexport interface RoutesProps {\n  children?: React.ReactNode;\n  location?: Partial<Location> | string;\n}\n\n/**\n * A container for a nested tree of <Route> elements that renders the branch\n * that best matches the current location.\n *\n * @see https://reactrouter.com/components/routes\n */\nexport function Routes({\n  children,\n  location,\n}: RoutesProps): React.ReactElement | null {\n  let dataRouterContext = React.useContext(DataRouterContext);\n  // When in a DataRouterContext _without_ children, we use the router routes\n  // directly.  If we have children, then we're in a descendant tree and we\n  // need to use child routes.\n  let routes =\n    dataRouterContext && !children\n      ? (dataRouterContext.router.routes as DataRouteObject[])\n      : createRoutesFromChildren(children);\n  return useRoutes(routes, location);\n}\n\nexport interface AwaitResolveRenderFunction {\n  (data: Awaited<any>): React.ReactNode;\n}\n\nexport interface AwaitProps {\n  children: React.ReactNode | AwaitResolveRenderFunction;\n  errorElement?: React.ReactNode;\n  resolve: TrackedPromise | any;\n}\n\n/**\n * Component to use for rendering lazily loaded data from returning defer()\n * in a loader function\n */\nexport function Await({ children, errorElement, resolve }: AwaitProps) {\n  return (\n    <AwaitErrorBoundary resolve={resolve} errorElement={errorElement}>\n      <ResolveAwait>{children}</ResolveAwait>\n    </AwaitErrorBoundary>\n  );\n}\n\ntype AwaitErrorBoundaryProps = React.PropsWithChildren<{\n  errorElement?: React.ReactNode;\n  resolve: TrackedPromise | any;\n}>;\n\ntype AwaitErrorBoundaryState = {\n  error: any;\n};\n\nenum AwaitRenderStatus {\n  pending,\n  success,\n  error,\n}\n\nconst neverSettledPromise = new Promise(() => {});\n\nclass AwaitErrorBoundary extends React.Component<\n  AwaitErrorBoundaryProps,\n  AwaitErrorBoundaryState\n> {\n  constructor(props: AwaitErrorBoundaryProps) {\n    super(props);\n    this.state = { error: null };\n  }\n\n  static getDerivedStateFromError(error: any) {\n    return { error };\n  }\n\n  componentDidCatch(error: any, errorInfo: any) {\n    console.error(\n      \"<Await> caught the following error during render\",\n      error,\n      errorInfo\n    );\n  }\n\n  render() {\n    let { children, errorElement, resolve } = this.props;\n\n    let promise: TrackedPromise | null = null;\n    let status: AwaitRenderStatus = AwaitRenderStatus.pending;\n\n    if (!(resolve instanceof Promise)) {\n      // Didn't get a promise - provide as a resolved promise\n      status = AwaitRenderStatus.success;\n      promise = Promise.resolve();\n      Object.defineProperty(promise, \"_tracked\", { get: () => true });\n      Object.defineProperty(promise, \"_data\", { get: () => resolve });\n    } else if (this.state.error) {\n      // Caught a render error, provide it as a rejected promise\n      status = AwaitRenderStatus.error;\n      let renderError = this.state.error;\n      promise = Promise.reject().catch(() => {}); // Avoid unhandled rejection warnings\n      Object.defineProperty(promise, \"_tracked\", { get: () => true });\n      Object.defineProperty(promise, \"_error\", { get: () => renderError });\n    } else if ((resolve as TrackedPromise)._tracked) {\n      // Already tracked promise - check contents\n      promise = resolve;\n      status =\n        promise._error !== undefined\n          ? AwaitRenderStatus.error\n          : promise._data !== undefined\n          ? AwaitRenderStatus.success\n          : AwaitRenderStatus.pending;\n    } else {\n      // Raw (untracked) promise - track it\n      status = AwaitRenderStatus.pending;\n      Object.defineProperty(resolve, \"_tracked\", { get: () => true });\n      promise = resolve.then(\n        (data: any) =>\n          Object.defineProperty(resolve, \"_data\", { get: () => data }),\n        (error: any) =>\n          Object.defineProperty(resolve, \"_error\", { get: () => error })\n      );\n    }\n\n    if (\n      status === AwaitRenderStatus.error &&\n      promise._error instanceof AbortedDeferredError\n    ) {\n      // Freeze the UI by throwing a never resolved promise\n      throw neverSettledPromise;\n    }\n\n    if (status === AwaitRenderStatus.error && !errorElement) {\n      // No errorElement, throw to the nearest route-level error boundary\n      throw promise._error;\n    }\n\n    if (status === AwaitRenderStatus.error) {\n      // Render via our errorElement\n      return <AwaitContext.Provider value={promise} children={errorElement} />;\n    }\n\n    if (status === AwaitRenderStatus.success) {\n      // Render children with resolved value\n      return <AwaitContext.Provider value={promise} children={children} />;\n    }\n\n    // Throw to the suspense boundary\n    throw promise;\n  }\n}\n\n/**\n * @private\n * Indirection to leverage useAsyncValue for a render-prop API on <Await>\n */\nfunction ResolveAwait({\n  children,\n}: {\n  children: React.ReactNode | AwaitResolveRenderFunction;\n}) {\n  let data = useAsyncValue();\n  let toRender = typeof children === \"function\" ? children(data) : children;\n  return <>{toRender}</>;\n}\n\n///////////////////////////////////////////////////////////////////////////////\n// UTILS\n///////////////////////////////////////////////////////////////////////////////\n\n/**\n * Creates a route config from a React \"children\" object, which is usually\n * either a `<Route>` element or an array of them. Used internally by\n * `<Routes>` to create a route config from its children.\n *\n * @see https://reactrouter.com/utils/create-routes-from-children\n */\nexport function createRoutesFromChildren(\n  children: React.ReactNode,\n  parentPath: number[] = []\n): RouteObject[] {\n  let routes: RouteObject[] = [];\n\n  React.Children.forEach(children, (element, index) => {\n    if (!React.isValidElement(element)) {\n      // Ignore non-elements. This allows people to more easily inline\n      // conditionals in their route config.\n      return;\n    }\n\n    if (element.type === React.Fragment) {\n      // Transparently support React.Fragment and its children.\n      routes.push.apply(\n        routes,\n        createRoutesFromChildren(element.props.children, parentPath)\n      );\n      return;\n    }\n\n    invariant(\n      element.type === Route,\n      `[${\n        typeof element.type === \"string\" ? element.type : element.type.name\n      }] is not a <Route> component. All component children of <Routes> must be a <Route> or <React.Fragment>`\n    );\n\n    invariant(\n      !element.props.index || !element.props.children,\n      \"An index route cannot have child routes.\"\n    );\n\n    let treePath = [...parentPath, index];\n    let route: RouteObject = {\n      id: element.props.id || treePath.join(\"-\"),\n      caseSensitive: element.props.caseSensitive,\n      element: element.props.element,\n      index: element.props.index,\n      path: element.props.path,\n      loader: element.props.loader,\n      action: element.props.action,\n      errorElement: element.props.errorElement,\n      hasErrorBoundary: element.props.errorElement != null,\n      shouldRevalidate: element.props.shouldRevalidate,\n      handle: element.props.handle,\n    };\n\n    if (element.props.children) {\n      route.children = createRoutesFromChildren(\n        element.props.children,\n        treePath\n      );\n    }\n\n    routes.push(route);\n  });\n\n  return routes;\n}\n\n/**\n * Renders the result of `matchRoutes()` into a React element.\n */\nexport function renderMatches(\n  matches: RouteMatch[] | null\n): React.ReactElement | null {\n  return _renderMatches(matches);\n}\n\n/**\n * @private\n * Walk the route tree and add hasErrorBoundary if it's not provided, so that\n * users providing manual route arrays can just specify errorElement\n */\nexport function enhanceManualRouteObjects(\n  routes: RouteObject[]\n): RouteObject[] {\n  return routes.map((route) => {\n    let routeClone = { ...route };\n    if (routeClone.hasErrorBoundary == null) {\n      routeClone.hasErrorBoundary = routeClone.errorElement != null;\n    }\n    if (routeClone.children) {\n      routeClone.children = enhanceManualRouteObjects(routeClone.children);\n    }\n    return routeClone;\n  });\n}\n"],"names":["toPrefixedThemeSection","themeSectionKey","Object","entries","theme","reduce","prefixed","_ref","key","value","concat","toCustomPropertyString","themeSection","map","_ref2","join","CssVariables","_ref3","colors","layers","spacers","elevations","allowedProps","variables","keys","filter","prop","React","_JSXStyle","id","dynamic","defaultProps","propTypes","PropTypes","NoticeBoxIcon","warning","error","dataTest","color","Icon","IconInfoFilled24","IconWarningFilled24","IconErrorFilled24","className","mutuallyExclusive","NoticeBoxMessage","children","NoticeBoxTitle","title","NoticeBox","classnames","cx","SvgChevronDown16","height","viewBox","width","xmlns","d","fill","Action","PopStateEventType","createHashHistory","options","getUrlBasedHistory","window","globalHistory","pathname","search","hash","parsePath","location","substr","createLocation","state","usr","to","base","document","querySelector","href","getAttribute","url","hashIndex","indexOf","slice","createPath","charAt","JSON","stringify","invariant","message","Error","cond","console","warn","e","getHistoryState","index","idx","current","Math","random","toString","path","parsedPath","searchIndex","getLocation","createHref","validateLocation","defaultView","v5Compat","history","action","Pop","listener","getIndex","handlePop","nextIndex","delta","createURL","origin","URL","replaceState","listen","fn","addEventListener","removeEventListener","encodeLocation","push","Push","historyState","pushState","assign","replace","Replace","go","n","ResultType","convertRoutesToDataRoutes","routes","parentPath","allIds","Set","route","treePath","has","add","isIndexRoute","undefined","matchRoutes","locationArg","basename","stripBasename","branches","flattenRoutes","sort","a","b","score","siblings","length","every","i","compareIndexes","routesMeta","meta","childrenIndex","rankRouteBranches","matches","matchRouteBranch","safelyDecodeURI","parentsMeta","flattenRoute","relativePath","caseSensitive","startsWith","joinPaths","computeScore","forEach","_route$path","includes","exploded","explodeOptionalSegments","segments","split","first","rest","isOptional","endsWith","required","restExploded","result","subpath","paramRe","isSplat","s","initialScore","some","segment","test","branch","matchedParams","matchedPathname","end","remainingPathname","match","matchPath","params","pathnameBase","normalizePathname","pattern","matcher","paramNames","regexpSource","_","paramName","RegExp","compilePath","captureGroups","memo","splatValue","decodeURIComponent","safelyDecodeURIComponent","decodeURI","toLowerCase","startIndex","nextChar","getInvalidPathError","char","field","dest","getPathContributingMatches","resolveTo","toArg","routePathnames","locationPathname","isPathRelative","from","isEmptyPath","toPathname","routePathnameIndex","toSegments","shift","fromPathname","pop","resolvePathname","normalizeSearch","normalizeHash","resolvePath","hasExplicitTrailingSlash","hasCurrentTrailingSlash","paths","AbortedDeferredError","DeferredData","constructor","data","responseInit","reject","pendingKeysSet","subscribers","deferredKeys","Array","isArray","this","abortPromise","Promise","r","controller","AbortController","onAbort","unlistenAbortSignal","signal","acc","trackPromise","done","init","promise","race","then","onSettle","catch","defineProperty","get","aborted","delete","emit","settledKey","subscriber","subscribe","cancel","abort","v","k","resolve","size","unwrappedData","unwrapTrackedPromise","pendingKeys","_tracked","isTrackedPromise","_error","_data","ErrorResponse","status","statusText","internal","isRouteErrorResponse","validMutationMethodsArr","validMutationMethods","validRequestMethodsArr","validRequestMethods","redirectStatusCodes","redirectPreserveMethodStatusCodes","IDLE_NAVIGATION","formMethod","formAction","formEncType","formData","IDLE_FETCHER","IDLE_BLOCKER","proceed","reset","isBrowser","createElement","isServer","createRouter","dataRoutes","unlistenHistory","savedScrollPositions","getScrollRestorationKey","getScrollPosition","initialScrollRestored","hydrationData","initialMatches","initialErrors","getInternalRouterError","getShortCircuitMatches","router","pendingNavigationController","initialized","m","loader","historyAction","navigation","restoreScrollPosition","preventScrollReset","revalidation","loaderData","actionData","errors","fetchers","Map","blockers","pendingAction","HistoryAction","pendingPreventScrollReset","isUninterruptedRevalidation","isRevalidationRequired","cancelledDeferredRoutes","cancelledFetcherLoads","fetchControllers","incrementingLoadId","pendingNavigationLoadId","fetchReloadIds","fetchRedirectIds","fetchLoadMatches","activeDeferreds","activeBlocker","blockerFunctions","ignoreNextHistoryUpdate","updateState","newState","completeNavigation","isActionReload","isMutationMethod","_isRedirect","mergeLoaderData","deleteBlocker","getSavedScrollPosition","async","startNavigation","opts","startUninterruptedRevalidation","userMatches","createUseMatchesMatch","saveScrollPosition","loadingNavigation","overrideNavigation","notFoundMatches","cancelActiveDeferreds","submission","pendingActionData","pendingError","request","createClientSideRequest","findNearestBoundary","actionOutput","interruptActiveLoads","actionMatch","getTargetMatch","callLoaderOrAction","shortCircuited","type","method","routeId","isRedirectResult","startRedirectNavigation","isErrorResult","boundaryMatch","pendingActionError","isDeferredResult","handleAction","Request","activeSubmission","matchesToLoad","revalidatingFetchers","getMatchesToLoad","rf","fetcher","revalidatingFetcher","set","results","loaderResults","fetcherResults","callLoadersAndMaybeResolveData","redirect","findRedirect","processLoaderData","deferredData","doneKeys","markFetchersDone","markFetchRedirectsDone","didAbortFetchLoads","abortStaleFetchLoads","handleLoaders","getFetcher","_temp","isFetchActionRedirect","revalidate","redirectLocation","_extends","_isFetchActionRedirect","_window","newOrigin","redirectHistoryAction","currentMatches","fetchersToLoad","all","f","resolveDeferredResults","abortFetcher","setFetcherError","deleteFetcher","doneFetcher","landedId","yeetedKeys","updateBlocker","newBlocker","blocker","shouldBlockNavigation","currentLocation","nextLocation","blockerFunction","predicate","cancelledRouteIds","dfd","y","initialize","blockerKey","enableScrollRestoration","positions","getPosition","getKey","navigate","normalizeNavigateOptions","userReplace","fetch","requestMatches","existingFetcher","abortController","fetchRequest","actionResult","loadingFetcher","revalidationRequest","loadId","loadFetcher","staleKey","handleFetcherAction","resolveDeferredData","handleFetcherLoader","dispose","clear","getBlocker","_internalFetchControllers","_internalActiveDeferreds","Symbol","isFetcher","isSubmissionNavigation","isValidMethod","stripHashFromPath","searchParams","convertFormDataToSearchParams","hasNakedIndexQuery","append","getLoaderMatchesUntilBoundary","boundaryId","boundaryMatches","findIndex","values","currentUrl","nextUrl","defaultShouldRevalidate","navigationMatches","currentLoaderData","currentMatch","isNew","isMissingData","isNewLoader","currentRouteMatch","nextRouteMatch","shouldRevalidateLoader","currentParams","nextParams","isNewRouteInstance","currentPath","loaderMatch","arg","shouldRevalidate","routeChoice","isStaticRequest","isRouteRequest","requestContext","resultType","onReject","handler","context","isResponse","headers","protocol","resolvedLocation","response","contentType","json","text","statusCode","deferred","toUpperCase","body","URLSearchParams","File","name","processRouteLoaderData","foundError","loaderHeaders","newLoaderData","mergedLoaderData","hasOwnProperty","reverse","find","hasErrorBoundary","_temp4","errorMessage","isRevalidatingLoader","unwrap","resolveData","getAll","handle","pathMatches","createHashRouter","parseHydrationData","enhanceManualRouteObjects","__staticRouterHydrationData","deserializeErrors","serialized","val","__type","stack","Link","ref","onClick","relative","reloadDocument","target","isAbsolute","navigationLocation","isExternal","targetUrl","useHref","internalOnClick","replaceProp","useNavigate","useLocation","useResolvedPath","event","button","metaKey","altKey","ctrlKey","shiftKey","isModifiedEvent","shouldProcessLinkClick","preventDefault","useLinkClickHandler","defaultPrevented","NavLink","ariaCurrentProp","classNameProp","style","styleProp","routerState","DataRouterStateContext","navigator","NavigationContext","nextLocationPathname","isActive","isPending","ariaCurrent","Boolean","DataRouterHook","DataRouterStateHook","is","x","useState","useEffect","useLayoutEffect","useDebugValue","checkIfSnapshotChanged","inst","latestGetSnapshot","getSnapshot","prevValue","nextValue","useSyncExternalStore","getServerSnapshot","forceUpdate","DataRouterContext","LocationContext","RouteContext","outlet","RouteErrorContext","useInRouterContext","joinedPathname","routePathnamesJson","activeRef","parse","OutletContext","_temp2","DefaultErrorElement","useRouteError","lightgrey","preStyles","padding","backgroundColor","fontStyle","RenderErrorBoundary","props","super","componentDidCatch","errorInfo","render","Provider","routeContext","component","RenderedRoute","dataRouterContext","static","staticContext","errorElement","_deepestRenderedBoundaryId","_renderMatches","parentMatches","dataRouterState","renderedMatches","errorIndex","min","reduceRight","getChildren","element","useDataRouterState","hookName","useCurrentRouteId","useRouteContext","thisRoute","UseRouteError","RouterProvider","fallbackElement","useSyncExternalStoreShim","Router","navigationType","Routes","Navigate","Outlet","useOutlet","Route","_props","_ref4","basenameProp","locationProp","NavigationType","staticProp","navigationContext","trailingPathname","_ref5","dataRouterStateContext","routeMatch","parentParams","parentPathnameBase","locationFromContext","parsedLocationArg","useRoutes","createRoutesFromChildren","AwaitRenderStatus","AwaitErrorBoundary","pending","renderError","success","neverSettledPromise","AwaitContext","apply","routeClone"],"sourceRoot":""}